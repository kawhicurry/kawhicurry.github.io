<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第一次LLM学习之旅</title>
      <link href="/AI/47184172/"/>
      <url>/AI/47184172/</url>
      
        <content type="html"><![CDATA[<p>LLM出来之后，一直很想要一个自己的知识库系统。很早之前就选好了Obsidian当自己的知识库系统，把自己的各种知识收集进去。<br>Ob的一大特点就是所有东西都是直接装在目录里的，顺便可以当成一个目录管理器用。<br>这样做的意义在于，以后可以自己控制LLM处理这些文件的细节。</p><p>其实之前玩过本地的<code>Stable-Diffustion</code>，效果非常好，已经是一个成熟的调包侠了，会自己从<code>HuggingFace</code>上找model，然后找提示词网站来组装生成图。<br>但是对于语言大模型，部署的过程一直不太顺利。最开始我的选择是国产的<code>ChatGlm-6B</code>。<br>但是在过程中多次出现各种跑不起来的情况，最后恍然大悟Windows不好使，还是得上Linux。<br>当时其实有Hype-V的Linux虚拟机，用来写我的eBPF毕设。<br>后面发现Hype-V里没法轻松把显卡挂进去，又对WSL有一种莫名的抗拒，于是索性没有往下搞。</p><p>最近突然心血来潮，又想来试试大模型有什么别的学习路径，这下发现了<code>Ollama</code>这个好东西。</p><h1 id="开端：Ollama，想做大模型界的Docker"><a href="#开端：Ollama，想做大模型界的Docker" class="headerlink" title="开端：Ollama，想做大模型界的Docker"></a>开端：Ollama，想做大模型界的Docker</h1><p>如题所示，Ollama做了一些相当不错的封装。我把我心目中最终要的命令列在下面先，不妨来看看：</p><pre><code class="highlight plaintext">ollama pull qwen2ollama listollama run qwen2ollama ps</code></pre><p>怎么样？如果你也是个Linux老鸟的话你会发现，<code>ollama</code>这个命令和<code>docker</code>似乎一模一样。<br>这也是ollama的追求，它似乎想做LLM时代的Docker。</p><p>当然，上面这四行命令中，最吸引人的当然是第一条和第三条。<br>我依然记得下载ChatGlm的时候，要去清华的网盘里把所有bin文件都点一遍下载。<br>虽然它给了压缩按钮，但是由于目录太大，它不让我压缩。<br>而ollama只需要一个pull，一个也许是你熟知的大模型就拉取到你本地了。<br>这个拉取过程支持断点续传，并且拉取的似乎也是一种分层模型，颇有docker中union filesystem的味道。</p><p>而ollama run更是惊艳，相比于其他llm那配置了半天还要自己写代码配置的方式，一行ollma run之后，一个对话框就出现了。<br>一个最简单的对话过程就开始，这和我们在网页上使用的各种什么大模型，没有任何区别。</p><p>当这个存在于终端里的对话框出现的时候，我突然意识到，这就是<strong>LLM本来的样子</strong>。</p><h1 id="悟道：Transformer，也许仍然是个函数"><a href="#悟道：Transformer，也许仍然是个函数" class="headerlink" title="悟道：Transformer，也许仍然是个函数"></a>悟道：Transformer，也许仍然是个函数</h1><p>在真正接触本地LLM之前，我一直有一个疑问，LLM到底是不是真正的通用人工智能？<br>但当我把本地LLM跑起来之后，我意识到这玩意远比我想象的要“结构简单”。</p><p>目前大多数LLM使用的是一种叫Transformer的架构。其实除了它还有一些别的架构，比如LSTM。<br>虽然我也不知道这些架构具体有哪些差异，但从结论上来看，Transformer解决了一个非常重要的问题：当神经网络层数增加时，对算力的需求不会陡增。<br>而这意味着，只要使用大量算力进行计算，效果就一定会变好。这在一定程度上解释了，为什么GPT-2到GPT-3有着如此大的提升——架构对了，怼算力就完事了。</p><p>至于Transformer究竟是什么？我只是个小小的工程师，这种专业问题还是问问搞AI的大佬吧。对于一个工程师来说，Transformer就是一个函数。我说的函数不是数学上那个函数，数学上的函数很好理解，毕竟啥都能当成函数。我说的是我们编程的那个函数。</p><pre><code class="highlight python"><span class="keyword">def</span> <span class="title function_">transformer</span>(<span class="params">*args,**kwargs</span>):  <span class="keyword">return</span> sth</code></pre><p>怎么样，是不是眼熟了许多？为什么要用这种描述呢？<br>这种认知意味着，<em>当相关软件架构成熟后，任何工程师都可以将LLM作为自身软件的一部分</em>。<br>但同时，由于LLM本身即是一个Transformer（这里我们暂时不考虑其他架构），我们只需单独处理它的输入和输出即可。</p><p>那么下一个问题是，这是一个怎样的函数？<br>在讨论这个问题前，让我们先来看看最常见的GPT模型，有没有想过GPT的全名是什么？<br>GPT全称Generative Pre-trained Transformer。从这个名字上我们可以看出来两件事。<br>首先，第一个问题在于这个Generative，与Artificial general intelligence（通用人工智能）不同，GPT很“谦虚”，但也很精确地描述了自己是什么，它不是AGI，而是单纯一个预训练过的大号Transformer。<br>这与我们上面得出来的结论是一致的。<br>其次，第二个问题在于这个pre-trained（预训练）。<br>这个过程本身其实很好理解，就是爬取网络上的各种知识给它，进行训练。<br>但这种训练意味着，这个函数的内部被改变了。<br>而函数内部的改变意味着训练前后，对于同一输入，给出的输出可能会大大不同，因为此时函数内部发生了变化。<br>现在让我们重新来审视这个“函数”。它应该长这个样：</p><pre><code class="highlight python"><span class="keyword">def</span> <span class="title function_">pre_train</span>():  <span class="keyword">return</span> parser<span class="keyword">def</span> <span class="title function_">transformer</span>():  <span class="keyword">return</span> parser(sth)</code></pre><p>同时，这种预训练过程还导出了另一个结论——你有没有担心过AI替代人类这种问题？<br>现在你应该知道，这玩意根本做不到这种事，它就是个简单的函数，接受参数（我们一般管这个叫prompt，提示词），给出输出。更何况，它甚至不会上网自个找资料——因为它是预训练的，而不是实时的。</p><p>现在想必你会有一个疑问，能不能让他上网？网上的知识浩如烟海，要是能上网岂不是无敌了？</p><h1 id="增强：RAG，给LLM插上翅膀"><a href="#增强：RAG，给LLM插上翅膀" class="headerlink" title="增强：RAG，给LLM插上翅膀"></a>增强：RAG，给LLM插上翅膀</h1><p>既然Transformer可以处理我们的问题，也可以处理网上的知识，那我们把网上的知识和我们的问题一起交给它不就好了。只不过，在获取网上的知识这一步，我们需要多一些步骤，把网上的知识处理成文本形式。<br>或者更近一步呢？也许不只是网上的知识，也许可以是本地的。也不是不只是文字的，也可以是图片，可以是文档甚至是更多可能的格式。</p><p>上面描述的过程，在LLM这里叫做RAG（Retrieval Augmented Generation，检索增强生成）。<br>简单来说，就是在使用大模型回答问题前，先帮大模型搜罗一部分资料，这种资料往往不被包含在大模型预训练时获取的部分，且这种资料一般有较强的实时性。</p><p>RAG应用一般有以下几个步骤：</p><ol><li>加载数据，从上面提到的各类数据里加载进来</li><li>分词，由于数据众多，所以要依据一定规则将其分片</li><li>存储，分词后就可以建立索引，方便后续的提取</li><li>取值，从索引中找到数据，进行提取</li><li>生成，依据提取出来的数据<strong>和</strong>用户的问题一同输出给大模型，生成结果</li></ol><p>以代码形式展示就是：</p><pre><code class="highlight python">question = <span class="string">&quot;?&quot;</span><span class="keyword">def</span> <span class="title function_">RAG</span>():  raw_documents = load()  chunks = split(raw_documents)  index = store(chunks)  prompt = retrieve(index)  result = generate(prompt + question)  <span class="keyword">return</span> result</code></pre><p>有了这种能力，相当于给大模型插上了翅膀，大模型的能力不仅仅局限于预训练时的数据，也对实时的数据有了处理能力。</p><h1 id="扮演：Prompt，戏精上身，但更懂你"><a href="#扮演：Prompt，戏精上身，但更懂你" class="headerlink" title="扮演：Prompt，戏精上身，但更懂你"></a>扮演：Prompt，戏精上身，但更懂你</h1><p>现在，是时候让LLM来帮忙干点活了，比如算算当下很火的数学题：3.9和3.11谁大？<br>为了防止一些非计算机领域或者不了解计算机版本号的同学get不到这个问题的精髓之处，还是稍微做些补充。从数学上来说，当然是3.90大于3.11，但在软件工程里，这种数字通常表示大版本+小版本，也就是3.09小于3.11。<br>当大家去问这个问题的时候，可能由于训练的预料不同得到不同的结果。<br>比如使用计算机知识语料进行训练的话，可能就是3.9&lt;3.11。<br>但如果训练时专门对数学类问题进行过调优的话，就能很好地解释3.9&gt;3.11。<br>倘若一个没有计算机知识的用户碰到了前一种大模型，就容易让人有种感觉：大模型好蠢啊。</p><p>但其实对人来来说，这个问题也未必是那么好回答的。<br>倘若网上冷不丁地弹出一个窗口问我这俩哪个大，我还真得楞一下，然后不知所措——因为我能意识到，这道题目似乎是少了条件的，他可没说是软件版本号还是数字比大小。<br>但如果是人在问我，那我的判断也许多一丝把握。<br>如果是我的工程师同学来问我，那十有八九是版本号了，如果是我的弟弟妹妹来问我，十有八九是写作业偷懒不想自己算了，如果是我的兄弟——那估计是看到了这个帖子，过来消遣洒家的。</p><p>看，为什么我可以分辨出这些？当然是我了解这些人，知道他们的特点，从而可以给他们回答。那为啥LLM不行呢？<br>回到那个网上冷不丁弹窗口的场景，LLM看到的就是一个这样的场景。<br>它既不知道你是谁，也不知道你在搞什么鸡毛，但是LLM的责任心（其实也没啥责任心，都是预训练留下的结果）让它必须回答。那能怎么办呢？<br>想想你当年上课的时候被突然抽起来回答问题的场景就好了——根据以前的经验，猜一个嘛，你大喊一声选C，老师说这是填空题。<br>这就是上面这个场景中LLM无法回答的原因，它并非真的不知道怎么回答，也不是随便乱猜。<br>只是你啥也没告诉它，所以它只能从过往的经验里，挑了个概率最大的告诉你，简称挑最大的答。</p><p>那我们可以做什么呢？简单!告诉它上下文就好了。如果你要问数学问题，你就告诉LLM：</p><blockquote><p>数学上3.9和3.11谁更大？</p></blockquote><p>如果你要问版本号，那你就说：</p><blockquote><p>计算机版本号上3.9和3.11谁更大</p></blockquote><p>以上，便是提示词（prompt）工程，通过提示词来诱导LLM给出我们期望的答案。<br>无论未来的LLM发展到什么地步，这种提示词工程都将存在下去，<br>因为<strong>人类生存的世界里，上下文永远是连续的</strong>。<br>但每次LLM启动时，它都会回到它诞生（预训练完成）的那一刻。</p><p>当我们追求通用能力的时候，精确性就会下降，反之亦然。<br>而GPT的开创意义就在这里，它选择了用最广泛，最Generative的预料来训练，然后在推理阶段根据大量的提示词来进行上下文的推理计算，得到的也是最接近人类逻辑的答案。</p><p>最好的提示方式是什么？想比与念一些莫名其妙地咒语，目前最佳的方式似乎是<code>扮演</code>。<br>扮成一个老师、一个工程师或者猫娘（？）<br>感觉提示词展开又是一个大工程，网上已经有相当多的教程了，还是请读着自行搜索吧。</p><h1 id="应用：Agent，人机交互的最优解"><a href="#应用：Agent，人机交互的最优解" class="headerlink" title="应用：Agent，人机交互的最优解"></a>应用：Agent，人机交互的最优解</h1><p>等等，总不能到最后AI都去写诗歌了，我们还在打工吧。<br>我们这么努力发展AI可不是为了养个爹，所以怎么让AI来帮我们干活呢？<br>那得先想想我们在干啥？写代码、画图表，一万个人心中也许有一万个想法。</p><p>但是通过上面的介绍，你应该明白——LLM其实什么也做不了，因为LLM就是LLM。它接受一个输入，给出一个输出，它不是人，甚至不是机器人。它不会帮你做出任何事。它唯一会的，就是根据你的输入，结合各种其他的给定，给出一个输出。这也是为什么在上面的很多地方，我会用函数来描述LLM，它只是处理数据，并不做任何实际操作。</p><p>不过话说回来，既然能是个函数，那也就意味着，它可以被“组装”进现有的软件体系中，作为软件的一部分。比如我们可以给出几个选项，然后迫使LLM从这几个选项中选出一个可能的，然后交给软件来执行。</p><p>当然，实际上我们要考虑的要更多，比如LLM如何取数据，取错了怎么办，或者是没照着选项怎么办，所以很多情况下，我们需要引入更多代码来解决这个问题。上面这种开发方式，就是当下火热的Agent模式。</p><p>以我个人的观点，这种开发模式中最重要的一点就是：给LLM配备工具。LLM本身是不会使用工具的，这和很多大家看到的能自适应一些环境的机器人不同。只有给LLM提供工具，并让LLM来选择使用什么工具、以何种方式使用工具，才有望让LLM真正为人类服务。现在我们再看LLM，你会发现，对话，也许只是它最最最简单的那个应用，Agent才是LLM的未来形态。</p><h1 id="未来：LLM，钉子何在？"><a href="#未来：LLM，钉子何在？" class="headerlink" title="未来：LLM，钉子何在？"></a>未来：LLM，钉子何在？</h1><p>关于LLM我一直有一些暴论，其中一个也许大多数人和我持有一样的观点：LLM的输出是不可信的。</p><p>这是一件相当重要的事情，LLM和我们过去见过的计算机或其他较为稳定的控制系统不同，它不是稳定的。我这里对于稳定的定义要相对简单一些：在任何情况下，当输入一致的时候，输出也应该一致。但很显然，就目前的观察而言，有相当多的案例下，LLM的输出是不稳定的。</p><p>这意味着，你无法让它像其他人类设计出来的自动控制系统一样，在一些工业场景下工作，更何况LLM的内部还是个黑盒。这一点相当程度上制约了它的应用，这是一个概率问题，如果人类设计的系统可用性是99.99%，那LLM也许是个未知的概率。</p><p>我尝试搜索了下，LLM的输出为何做不到稳定，是否是因为加入了某些seed或是其他的随机数机制呢？很遗憾，我似乎找不到我能看懂的答案，如果哪天有大佬看到了这个问题，我很愿意接受大佬的指导。但我确信的是，如果LLM的输出做不到绝对稳定的话，我们就没法直接把工具直接交给LLM。</p><p>但是反过来，我们也可以换个思路。既然LLM有如此强大的处理能力，不妨让LLM“给出建议”就好了，最终的决策，还是由人来完成好了。这也是我目前做LLM应用的思路。</p><p>关于未来，谁知道呢？最近看了一篇文章，其中的观点是现代的LLM其实还处于一个初级的阶段，所以需要大量的提示词工程来帮助从LLM中获得想要的答案，如果未来有一天LLM发展到了某个阶段，就不需要这么多提示词了，似乎听着像是那么回事。</p><p>不过有另一个好消息是，许多程序员也许不用担心失业了。LLM不会让程序员失业，相反，它需要更多优秀的程序员去建设它。未来的LLM应当是触手可及的、人人可以去建设的，而不是高高在上的、遥不可及的。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>RAG: <a href="https://python.langchain.com/v0.2/docs/tutorials/rag/">https://python.langchain.com/v0.2/docs/tutorials/rag/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>自动化的讽刺</title>
      <link href="/Auto/6b018282/"/>
      <url>/Auto/6b018282/</url>
      
        <content type="html"><![CDATA[<blockquote><p>译者注：本文是作者在看纪录片<em>空中浩劫S25: 三佛齐航空182号班机</em>时，关注到的一篇论文，发现全网没有中文翻译，所以翻译了一下。</p><p>本文使用元宝翻译，并进行了全文人工校对，如有纰漏，烦请指正。</p><p>感谢<em>ACICFG字幕组</em>对空中浩劫的翻译，b站视频链接 <a href="https://www.bilibili.com/video/BV1eSA4eNEZU">https://www.bilibili.com/video/BV1eSA4eNEZU</a></p><p>论文原文：<a href="https://ckrybus.com/static/papers/Bainbridge_1983_Automatica.pdf">https://ckrybus.com/static/papers/Bainbridge_1983_Automatica.pdf</a></p></blockquote><p>关键词：控制工程、计算机应用；人机系统；在线操作；过程控制；系统故障与恢复。</p><p>本文讨论了工业过程的自动化可能扩大而非消除人类操作员问题的方式。本文对在“经典”方法中减轻这些问题的方法进行了一些评论，即让操作员负责异常情况，并探讨了在人机协作中继续使用人类操作员进行在线决策的潜力。</p><ul><li><em>讽刺</em>：一种情况组合，其结果是预期直接相反的。</li><li><em>悖论</em>：看似荒谬但可能实际上有充分根据的陈述。</li></ul><p>自动化的经典目标是用人造设备和计算机取代人类的手动控制、规划和问题解决。然而，正如Bibby及其同事（1975）所指出的：“即使是高度自动化的系统，如电力网络，也需要人类进行监督、调整、维护、扩展和改进。因此可以得出一个悖论性的结论，即自动化系统仍然是人机系统，即技术因素和人为因素（译者注：对于自动化系统）都很重要。”本文认为，工程师对人为因素的比重增加反映了这样一个讽刺：控制系统越先进，人类操作员的贡献就越关键。</p><p>本文特别关注过程工业中的控制，尽管会从飞行甲板自动化（译者注：此处应当是指飞机飞控系统的自动化）中汲取一些例子。在过程工厂中，不同的操作模式可能在不同程度上实现自动化，例如正常操作和关闭可能是自动的，而启动和异常情况则是手动的。使用自动或手动控制的问题是过程行为可预测性的函数，无论操作模式如何。本文的前两部分讨论了在异常情况下期望人类操作员接管的自动在线控制，最后一部分介绍了在线控制中人机协作的一些方面。</p><h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h2><p>经典自动化方法的重要的讽刺在于系统设计者的期望，以及留给人类操作员执行的任务的性质。</p><p>设计者对人类操作员的看法可能是操作员不可靠且效率低下，因此应该从系统中消除。这种态度有两个讽刺之处。一个是设计错误可能是操作问题的主要来源。不幸的是，收集这些数据的人不愿意发表它们，因为实际数字很难解释。（有些类型的错误可能比其他类型更容易报告，而且关于它们的起源可能存在分歧。）第二个讽刺是试图消除操作员的设计者仍然让操作员去做设计者无法思考如何自动化的任务。正是这种方法导致了这里讨论的问题，因为它意味着操作员可能会被留下一系列任意的任务，而且很少有人考虑为他们提供支持。</p><h3 id="1-1-自动化后的任务"><a href="#1-1-自动化后的任务" class="headerlink" title="1.1. 自动化后的任务"></a>1.1. 自动化后的任务</h3><p>在自动化系统中留给操作员的一般有两类任务。他可能需要监控自动系统是否正确运行，如果不是，则可能需要呼叫更有经验的操作员或自己接管。我们将首先讨论手动接管的讽刺之处，因为所提出的观点也适用于监控。接管并稳定过程需要手动控制技能，诊断故障作为关闭或恢复的基础需要认知技能。</p><h4 id="1-1-1-手动控制技能"><a href="#1-1-1-手动控制技能" class="headerlink" title="1.1.1. 手动控制技能"></a>1.1.1. 手动控制技能</h4><p>几项研究（Edwards 和 Lees，1974）显示了经验丰富的和不经验的过程操作员在进行阶跃变化时的差异。经验丰富的操作员采取的动作最少，过程输出平稳快速地达到新水平，而不经验的操作员则围绕目标值振荡。不幸的是，当这些操作技能不被使用时，这些技能会退化，特别是面临增益和时机的微调时，这种情况更明显。这意味着，曾经经验丰富的操作员如果一直在监控自动化过程，现在可能变得像是没有经验一样。如果他接管控制过程，可能会使过程进入振荡。他可能需要等待反馈，而不是通过开环控制（译者注：指在没有反馈的情况下进行控制，与闭环控制相对，这里的环是指流程途中反馈和控制过程连接起来的“环”），而且他将难以解释反馈是否系统有问题，或者更简单地来说，他会误判他的控制动作。他不得不采取措施来抵消他的无效控制，这会增加他的工作量。当需要手动接管时，过程很可能出了问题，因此需要用不寻常的动作来控制它，所以可以说操作员需要比平均水平更高而不是更低的技能，以及更少而不是更多的工作量。</p><h4 id="1-1-2-认知技能。"><a href="#1-1-2-认知技能。" class="headerlink" title="1.1.2. 认知技能。"></a>1.1.2. 认知技能。</h4><ul><li><em>长期知识</em>：一个自行学习控制过程，而没有经过明确的培训的操作员会使用一组关于可能的过程行为的命题，从中生成策略来进行尝试（例如Bainbridge，1981）。类似的，操作员只有在具备足够的关于过程的知识时，才能为不寻常的情况生成成功的新策略。这对于“机器看护操作员”有两个问题。一个是有效检索长期记忆中的知识依赖于使用的频率（考虑你在学校考试通过的任何科目，自从以后就没有再想过）。另一个问题是这种知识的发展只能通过使用和对它的效果反馈来实现。在没有适当实践练习的情况下，在理论课堂上获得这种知识的人可能不会理解太多，因为它将不在一个使其有意义的框架内，他们也不会记住太多知识，因为它不会与与其他任务整合的检索策略相关联。人们担心的是，目前这一代由前手动操作员监控的自动化系统，是建立在他们的技能上的，而后来的一代操作员不可能拥有这些技能。</li><li><em>工作存储</em>：在线决策中认知技能的另一个重要方面是决策是在操作员对过程当前状态的知识背景下做出的。这是一种比存储电话号码这类有限容量短期存储更复杂的运行记忆形式。操作员存储在他头脑中的（Bainbridge，1975）不是过程状态的原始数据，而是关于过程做出预测和决策的结果，这些结果将在未来情况中有用，包括他未来的行动。这些信息需要时间来积累。手动操作员可能在他们接管控制之前十五分钟到半小时进入控制室，以便他们能够感受到过程正在做什么。这对从自动控制的工厂手动接管的含义是，必须迅速采取行动的操作员只能基于最少的信息这样做，他不能在检查并思考之前，基于对工厂状态的广泛知识做出决策。</li></ul><h4 id="1-1-3-监控"><a href="#1-1-3-监控" class="headerlink" title="1.1.3 监控"></a>1.1.3 监控</h4><p>似乎操作员仅被期望监控自动系统是否正确运行，并在它们不正确时呼叫主管，这样的任务相对简单，并没有引发上述复杂性。当然，它确实引发了一个复杂性，那就是如果主管没有回顾他的相关知识或练习关键的手动技能，他也无法接管。当问及监控是否能由非熟练操作员完成时，会出现另一个问题。</p><p>我们从许多“警戒”研究中（Mackworth，1950）知道，即使是非常有动力的人类也无法长时间保持对信息源的有效视觉注意力，如果信息源上几乎没有什么发生的话，超过大约半小时。这意味着人类不可能执行监控不太可能发生的异常的基本功能，因此必须由连接到声音信号的自动报警系统来完成。（手动操作员会注意到他们作为控制任务的一部分查看的变量的异常行为，但也可能同样不擅长注意到其他变量的变化。）这引发了谁会在报警系统不工作时注意到的问题。同样，如果自动系统已经长时间运行得令人满意，操作员也不会有效地监控自动系统。强制操作员注意稳态系统的一个经典方法是要求他做日志。不幸的是，人们可以在不注意他们在写什么的情况下写下数字。</p><p>一个更严重的讽刺是，自动控制系统之所以被引入，是因为它可以比操作员更好地完成这项工作，但操作员却被要求监控它是否有效工作。这里有两种问题。在复杂的操作模式下，监控需要知道过程应该如何正确运行，例如在批处理过程中，变量必须遵循特定的时间轨迹。这样的知识需要特殊培训或特殊的显示。</p><p>第二个问题是，如果决策可以完全清晰，那么计算机可以考虑到更多维度并使用比人类操作员更准确指定的标准，并更快地做出决策。也因此，人类操作员无法实时检查计算机是否正确遵循其规则。因此，我们只能期望操作员在某种元级别上监控计算机的决策，以决定计算机的决策是否“可接受”。那如果使用计算机来做决策是因为人类判断和直觉推理在这种背景下不够充分，那么（译者注：人类监控员如何判断）哪些决策是可以接受的？人类监控员被赋予了一个不可能完成的任务。</p><h3 id="1-2-操作员的态度"><a href="#1-2-操作员的态度" class="headerlink" title="1.2. 操作员的态度"></a>1.2. 操作员的态度</h3><p>我知道有一个自动化工厂，那里的管理层必须在夜班期间在场，否则操作员会将过程切换到“手动”。这引出了一个关于技能对个人的重要性的普遍问题。这种技能导致的一个结果是，操作员知道如果需要的时候，他可以充分接管。否则，这份工作（译者注：对于操作员而言）是最糟糕的类型之一，非常无聊但又非常需要负责，与此同时缺又没有机会获得或维持处理责任所需的品质。工人拥有的技能水平也是他在工作社区内外地位的主要因素。如果工作因减少到监控而被“去技能化”，这对涉及的个体来说很难接受。当去技能化但坚持高薪的工人的工作内容不再能够证明其工作内容与薪资水平匹配的时候，这也会导致不协调的薪酬差异的讽刺。</p><p>Ekkers及其同事（1979）发表了一项关于控制系统特征与操作员主观健康和成就感之间相关性的初步研究。简单来说：过程信息的高度连贯性、过程的高度复杂性和过程的可控性（无论是手动还是通过适当的自动控制）都与低水平的压力和工作负荷以及良好的健康相关，反之亦然；快速的过程动态和频繁的不能直接在界面上进行的动作与高压力和工作负荷以及不良的健康相关。高水平的过程可控性、良好的界面人体工程学和丰富的活动模式都与高成就感相关。许多研究表明，高水平的压力会导致错误，而糟糕的健康状况和低工作满意度会导致缺勤等高间接成本（e.g. Mobley及其同事，1979）。</p><h2 id="2-解决方案的方法"><a href="#2-解决方案的方法" class="headerlink" title="2. 解决方案的方法"></a>2. 解决方案的方法</h2><p>人们可以将这些问题表述为一个悖论。通过自动化过程，人类操作员被赋予了一个只有在线控制的人才能完成的任务。本节将讨论一些可能的解决方案，以解决如果期望操作员监控和接管控制，如何保持操作员的效率和技能的问题；下一节将介绍最近关于在计算机支持下保持人类操作员在线的提议。</p><p>解决这些问题涉及多维度的决策：这里将提出一些讨论建议。任何特定情况下的建议将取决于诸如过程规模和复杂性、过程变化的速率、过程或自动控制失败的频率、产品和环境的可变性、关闭的简单性和成本以及操作员的素质等因素。</p><h3 id="2-1-监控"><a href="#2-1-监控" class="headerlink" title="2.1. 监控"></a>2.1. 监控</h3><p>在任何情况下，如果必须快速注意到低概率事件，那么操作员必须得到人工辅助，必要时甚至是多重警报。在具有大量回路的过程中，如果没有警报，人类操作员无法快速到达工厂的正确部分，最好是还有某种形式的警报分析。不幸的是，闪烁的红灯泛滥会让人困惑而不是帮助。为人类操作员设计大型警报系统存在重大问题和讽刺（Rasmussen 和 Rouse，1981）。</p><p>显示器通过显示目标值可以帮助操作员监控自动控制性能。这对于单一容差带很简单，但如果容差在整个批处理过程中发生变化，就会变得更加复杂。一个可能的解决方案是通过软件生成在VDU（译者注：可视显示器）上显示当前适用的容差。这并没有真正解决问题，只是以不同的形式提出了同样的问题。如果计算机可以生成所需值，那么它也应该能够进行监控和警报。操作员如何监控计算机是否正确工作，或者在明显不正确时接管？对于高度习惯于使用计算机生成的显示器的操作员来说，如果这些显示器在紧急情况下不再可用，可能会引发重大问题。一个讽刺但合理的建议是，应使用直接有线显示器显示主要过程信息，而使用软件显示器显示定量细节（Jervis 和 Pope，1977）。</p><p>“灾难性”的故障中断相对容易识别。不幸的是，自动控制可以通过控制变量变化来“伪装”系统故障，使得趋势直到超出控制范围才变得明显。这意味着自动系统也应该监控不寻常的变量移动。“优雅降级”性能在“合适的列表”中作为人优于机器的优点被引用。这不是计算机应该追求的人类性能的一个方面，因为它会给故障监控带来问题（例如Wiener 和 Curry，1980）；自动系统应该明显失败。</p><p>如果人类操作员必须监控计算机决策的细节，那么讽刺的是，计算机必须使用方法和标准来做出这些决策，而且速度应该是操作员可以跟随的，即使这在技术上可能不是最高效的方法。如果不这样做，那么当操作员不相信或不认同计算机时，他将无法追溯系统的决策序列，看看他在多大程度上同意。</p><p>克服警觉问题的一个经常被建议的方法是人为增加信号率。然而，人为增加计算机故障率是一个错误，因为操作员随后将不再信任系统。Ephrath（1980）报告了一项研究，其中系统性能在使用计算机辅助时更差，因为操作员无论如何都会做出决策，而检查计算机增加了他的工作负荷。</p><h3 id="2-2-工作存储"><a href="#2-2-工作存储" class="headerlink" title="2.2. 工作存储"></a>2.2. 工作存储</h3><p>如果人类操作员不参与在线控制，他将没有系统的当前状态的详细知识。这决定了人类操作员可能会为了过程的稳定、关闭系统，或故障诊断对系统进行有效手动接管的操作限制。</p><p>当关闭简单且成本低时，直接关闭是一个简单的解决方案。问题出现在由于复杂性、成本或其他因素（例如空中的飞机）而必须稳定而不是关闭的过程中。这应该手动还是自动进行？如果过程动态可以在几分钟内保持不变，而操作员可以弄清楚发生了什么，那么手动关闭是可行的。对于非常快速的故障，几秒钟内（例如加压水核反应堆而不是飞机），由于没有来自先前变化的警告，所以在线的工作存储是无用的（译者注：这时操作员没有那么快介入，因此工作存储是无效的），这时无论需要多少投入，可靠的自动响应都是必要的，如果无法构造这样的自动响应系统，那么如果失败的成本就是不可接受的，就不应该构建这个过程。</p><p>对于较慢的故障，可能可以通过过度学习的手动响应来“争取时间”。这需要频繁地在高保真模拟器上进行练习，并且需要对系统故障有足够的理解，以确保覆盖所有类别的故障。如果对故障的响应需要比可用时间更多的单独动作，那么一些必须自动进行，其余的由高度熟练的操作员完成。</p><h3 id="2-3-长期知识"><a href="#2-3-长期知识" class="headerlink" title="2.3. 长期知识"></a>2.3. 长期知识</h3><p>前一节的要点清楚地表明，保持手动技能可能很重要。一种可能性是允许操作员在每个班次中短时间使用手动控制。如果这个建议听起来好笑，那么必须提供模拟器练习。足以教授过程基本行为的模拟器可以非常原始。准确的快速反应只能在保真度高的模拟器上学习，所以如果需要这样的反应，这种学习就是一个必要的成本。</p><p>关于调度和诊断的认知技能也可以提出类似的观点。简单的图形表示足以训练某些类型的故障检测（Duncan 和 Shepherd，1975），但前提是故障可以从控制面板的稳态外观中识别出来，并且等待稳态是可以接受的。如果故障检测涉及识别随时间的变化，那么就需要动态模拟器进行培训（Marshall 和 Shepherd，1981）。简单的识别培训也不足以发展处理未知故障或选择纠正措施的能力（Duncan，1981）。</p><p>使用任何模拟器来培训极端情况都存在问题。未知故障无法模拟，而对于可以预测但尚未经历的故障，系统行为可能未知。这意味着培训必须关注一般策略，而不是具体响应，例如模拟器可以用来给操作员体验低概率事件的经验，这些事件可能是教练员知道的，但不是受训者知道的。没有人能教操作员关于系统的未知属性，但他们可以教他们在已知信息内练习解决问题。仅仅期望操作员通过查阅操作程序来应对不熟悉的事件是不够的。这些程序无法涵盖所有可能性，因此操作员被期望监控它们并填补这些空白的可能情形。然而，培训操作员遵循指令，然后又把这些操作员（译者注：当作一种“智能”）放在系统中提供智能，这也很讽刺。</p><p>当然，如果一天中经常出现警报，这些警报将成为操作员工作中的一部分，那么操作员将从这些工作中拥有有大量的经验来控制和思考过程。也许最终的讽刺是，最成功的自动化系统，需要很少的手动干预，却需要最大的人力操作员培训投资。</p><h2 id="3-人机协作"><a href="#3-人机协作" class="headerlink" title="3. 人机协作"></a>3. 人机协作</h2><p>如果通过拿走自动化任务的简单部分，自动化可以使人类操作员任务的困难部分更加困难。几位作家（Wiener 和 Curry，1980；Rouse，1981）指出，“Fitts列表”方法来自动化，分配给人和机器他们最擅长的任务，已经不够了。它没有考虑人与计算机的集成，也没有考虑如何通过支持他的技能和动机来保持人类操作员的有效性。总是会有大量的人类参与自动化系统，因为除了效率之外，还涉及其他标准，例如当自动化某些操作模式的成本不被产品的价值所证明时，或者因为公众不会接受没有人类成分的高风险系统。这表明需要更全面地发展人机协作的方法。Dellner（1981）列出了自动化决策中人类干预的可能水平。本文将讨论计算机干预人类决策的可能性。这些包括指导或建议操作员、减轻他的错误、提供复杂的显示，以及在任务负载高时协助他。Rouse（1981）称这些为“隐蔽”的人机交互。</p><h3 id="3-1-指导和建议"><a href="#3-1-指导和建议" class="headerlink" title="3.1. 指导和建议"></a>3.1. 指导和建议</h3><p>如果操作员只是作为一个传感器行事，使用计算机给出指令是不合适的，因为计算机同样可以激活一个更可靠的传感器。Thompson（1981）列出了四种类型的建议，关于：根本原因、相对重要性、可用的替代行动，以及如何实施行动。在遵循建议时，操作员的反应会更慢，也不如他自己生成活动序列那样整合；并且他没有练习“智能”（译者注：这里是指相对于计算机）。关于程序信息的有效显示也存在问题。</p><h3 id="3-2-减轻人为错误"><a href="#3-2-减轻人为错误" class="headerlink" title="3.2. 减轻人为错误"></a>3.2. 减轻人为错误</h3><p>机器减轻人为错误的可能性范围从简单的硬件互锁到复杂的在线计算。除非必须遵循特定的操作顺序，否则将其放在操作的效应上更为合适，因为这不会假设用于达到此效应的策略。在手动控制下，人类操作员通常在几秒钟内就能获得足够的反馈来纠正他们自己的错误（Ruffell-Smith，1979），但Wiener 和 Curry（1980）给出了人类在没有得到足够反馈时，设置和监控自动化设备时犯同样类型错误的例子。这种情况也许应该被设计进去到系统里。Kreifeldt 和 McCarthy（1981）提供了关于显示的建议，以帮助在中途被打断的操作员。Rouse（1981）建议计算机监控人类的眼球运动，以检查仪器扫描是否合适，例如防止隧道视觉。</p><h3 id="3-3-软件生成的显示"><a href="#3-3-软件生成的显示" class="headerlink" title="3.3. 软件生成的显示"></a>3.3. 软件生成的显示</h3><p>VDU上软显示的日益普及提出了设计兼容特定任务中使用的具体知识和认知过程的显示的迷人可能性。这导致了如此丰富的创造性推测，指出实践中的困难似乎有点吝啬。</p><p>一种可能性是只显示与特定操作模式相关的数据，例如启动、常规操作或维护。然而，需要注意的是，一个界面对于正常条件可能是理想的，但可能会掩盖异常情况的发展（Edwards，1981）。</p><p>Goodstein（1981）讨论了与不同类型的操作员技能兼容的过程显示，使用Rasmussen（1979）建议的行为分类，即基于技能、基于规则和基于知识。使用不同类型的技能部分是操作员经验的功能，尽管这些类型可能并不简单地落在单一连续体上。Chafin（1981）讨论了界面设计建议如何取决于操作员是否是新手&#x2F;新手&#x2F;胜任&#x2F;专家。然而，他关注的是在没有时间压力的情况下人类访问计算机数据库。在时间压力下的人机交互提出了特殊的问题。知识型思维和“反射”反应之间的变化不仅仅是练习的功能，还取决于环境的不确定性，因此同样的任务元素可能在不同的时间使用不同类型的技能来完成。因此，给操作员一个仅与他整体技能水平相关的显示可能会混淆而不是帮助他。非时间压力下的操作员，如果他们发现自己有错误的显示类型，可能会自己请求不同级别的信息。这将增加某人做出由动态系统节奏决定的决策的工作量。Rouse（1981）因此建议计算机可能会识别操作员正在使用的技能类型，并改变显示（他没有说如何做到这一点）。我们不知道操作员对于不受他们自己控制的显示变化会感到多么困惑。Ephraph 和 Young（1981）评论说，操作员在不同活动模式之间切换，例如从监控到控制，即使这些是在他们的控制下，也需要时间，我们假设在显示模式变化时会出现同样的问题。当然，需要非常小心以确保不同的显示是兼容的。Rasmussen 和 Lind 最近的论文（1981）是关于操作员可能正在思考过程的不同抽象层次，这将定义要显示的知识库。同样，尽管操作员显然在不同的时间以不同的复杂性和抽象水平.</p><p>Rouse（1981）因此建议计算机可以识别操作员正在使用的技能类型，并改变显示（他没有说明如何做到这一点）。我们不知道操作员对于不受他们自己控制的显示变化会感到多么困惑。Ephraph 和 Young（1981）评论说，操作员在不同活动模式之间切换，例如从监控到控制，即使这些是在他们的控制下，也需要时间，我们假设在显示模式变化时会出现同样的问题。当然，需要非常小心以确保不同的显示是兼容的。Rasmussen 和 Lind 最近的论文（1981）是关于操作员可能正在思考过程的不同抽象层次，这将定义要显示的知识库。同样，尽管操作员显然在不同的时间以不同的复杂性和抽象水平进行思考，但不清楚他们在时间压力下是否能使用或选择许多不同的显示。</p><p>上面提到了一些关于操作员在异常情况下无法使用计算机生成的显示的问题。最近关于人类记忆的研究（Craik，1979）表明，数据接收到的意义处理越多，它被记住的效果就越好。这让人想知道，如果信息被如此成功地呈现，以至于操作员不需要思考就能接受，那么他将学到多少关于过程结构的知识。如果最终发现最兼容的显示并不是给操作员的最佳显示，这将是讽刺的！（通常在选择显示的决定中，这取决于要完成的任务。高度兼容的显示总是支持快速反应。这些观点推测它们是否也支持在异常条件下所需的知识和思维技能的获取。）</p><p>可以提出一些实用的建议。每种类型的信息至少应该有一个永久可用的信息来源，这些信息不能简单地映射到其他信息上，例如关于工厂的空间布局与其功能拓扑的信息。操作员不应该需要在显示之间翻页来获取关于他们当前未考虑的过程部分的异常状态的信息，也不应该在决策过程中需要的信息之间翻页。</p><p>关于复杂显示的研究应集中在确保它们之间的兼容性问题上，而不是寻找哪个独立显示最适合某个特定功能而不考虑与其他功能信息的关系。最后，乐观地说，软件显示提供了一些有趣的可能性，通过允许操作员设计自己的界面来丰富他的任务。</p><h3 id="3-4-减轻人类工作负荷"><a href="#3-4-减轻人类工作负荷" class="headerlink" title="3.4. 减轻人类工作负荷"></a>3.4. 减轻人类工作负荷</h3><p>计算机可以通过简化操作员的决策或接管一些决策来减轻人类工作负荷，这方面的研究显示这是一个复杂的问题。Ephrath 和 Young（1981）发现，单回路的手动控制总体控制性能更好，但在复杂的驾驶舱模拟器环境中，自动驾驶仪也更好。这表明辅助最好在高工作负荷时使用。然而，辅助类型的效果取决于工作负荷的类型。Johannsen 和 Rouse（1981）发现飞行员在自动驾驶仪下报告在异常环境条件下的计划深度较低，可能是由于自动驾驶仪在处理条件，但在紧急飞机条件下，他们建议自动驾驶仪使飞行员从在线控制中解放出来，以便他能考虑其他事情。Chu 和 Rouse（1979）研究了既有计算机辅助又有自动驾驶仪的情况。他们安排计算机在操作员手动控制时有一个其他任务项待处理时接管决策，或者在自动驾驶仪控制时有一个三个任务项的队列后接管。Enstrom 和 Rouse（1977）的研究清楚地说明了为什么Rouse（1981）评论说，只有在实时计算工作负荷的情况下，才能实现更复杂的在线方法来适应计算机辅助和人类工作负荷。（宣称辅助人类有限能力的目的是将计算推向其能力的极限是轻率的，因为技术有办法赶上这样的说法。）Enstrom 和 Rouse 还强调了人类必须知道计算机正在处理哪些任务以及如何处理，否则就会出现类似于人类团队中没有明确责任分配的问题。Sinaiko（1972）的评论强调了人类操作员对计算机能力的感知的重要性：“当负载较轻时，人们似乎愿意让计算机承担大部分任务责任；当负载较重时，人们更经常介入并超控（译者注：这里是指权限超过计算机）计算机”。显然，除了技术考虑之外，计算机辅助的设计是一个多维问题。</p><h2 id="4-结论"><a href="#4-结论" class="headerlink" title="4. 结论"></a>4. 结论</h2><p>上一节中回顾的巧妙建议表明，没有时间压力的工作的人类可以成为令人印象深刻的问题解决者。困难仍然在于他们在时间压力下解决问题的效果较差。我希望本文已经阐明了这样一个讽刺，即：自动化并不一定会消除困难，并且解决这些困难也许需要比经典自动化更大的技术创造力。</p>]]></content>
      
      
      <categories>
          
          <category> Auto </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>lock教程</title>
      <link href="/Tools/undefined/"/>
      <url>/Tools/undefined/</url>
      
        <content type="html"><![CDATA[<p>Mac输入法有一点非常讨喜，就是把平时不会用到的CapsLock按键，改为了中英文输入法切换。</p><p>于是研究了下win下是否也能支持类似的功能，发现还真行。刚好blog很久没更新了，顺便来更新下</p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>我的环境是win11，原理很简单：</p><ol><li>取消原来capslock的大小写切换功能</li><li>取消原来的shift切换输入法功能（这一步可选，但是建议和mac的体验保持一致）</li><li>把capslock的大小写切换功能绑定为输入法切换</li></ol><p>可以看到最有难度的地方其实是第3步，所以要先介绍下这里的工具：微软官方提供的<a href="https://learn.microsoft.com/en-us/windows/powertoys/">powertoys</a>。<br>这个工具直接支持了任意键位的修改，包括capslock。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="关系capslock大小写"><a href="#关系capslock大小写" class="headerlink" title="关系capslock大小写"></a>关系capslock大小写</h3><p>打开windows设置 <em>时间和语言 &gt; 输入 &gt; 高级键盘设置 &gt; 输入语言热键</em>，随后会弹出一个控制面板的菜单（没错，还是windoes祖传的控制面板菜单），把要关闭Caps Lock 的选项由默认的 <em>按CAPS LOCK键</em> 修改为 <em>按SHIFT键</em>。</p><p>这时候的键盘行为应该是，按下Caps Lock后，输入法会切换到大写。再次按下Caps Lock后，输入法无反应，此时按下shift，输入法会切换回小写。</p><h3 id="取消shift切换输入法功能"><a href="#取消shift切换输入法功能" class="headerlink" title="取消shift切换输入法功能"></a>取消shift切换输入法功能</h3><p>这一步在windows设置的 <em>时间和语言 &gt; 语言和区域 &gt; 微软拼音输入法 &gt; 按键</em> 里面。比较有意思的是这个设置虽然在设置里，直接从win11的设置按钮中并不能直接打开，得从windows菜单栏右下角状态栏输入法的右键菜单 <em>设置 &gt; 按键</em> 打开。</p><p>打开后取消 模式切换中的额 <code>shift</code>，但是注意要保留 <code>Ctrl + 空格键</code>，在下一步，我们会把<code>CapsLock</code>绑定到<code>Ctrl + 空格键</code>。</p><h3 id="3-下载PowerToys，绑定CapsLock为输入法切换"><a href="#3-下载PowerToys，绑定CapsLock为输入法切换" class="headerlink" title="3. 下载PowerToys，绑定CapsLock为输入法切换"></a>3. 下载PowerToys，绑定CapsLock为输入法切换</h3><p>先再贴一遍链接：<a href="https://learn.microsoft.com/en-us/windows/powertoys/">https://learn.microsoft.com/en-us/windows/powertoys/</a></p><p>下载完成后建议先重启下，笔者第一次安装后立刻使用，似乎碰到了一些未定义的行为，重启后就好了。</p><p>重启后选择左侧 <em>仪表盘 &gt; 输入&#x2F;输出 &gt; 键盘管理器</em>，点开 <em>按键 &gt; 重新映射键</em>，左侧点击 选择，然后键入 CapsLock，右侧点击 选择，然后键入 Ctrl + 空格键，点击 <em>添加</em>，然后点击 <em>应用</em>。这时候再按下CapsLock，输入法应该会切换了。</p><h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>又看了下刚刚装的这个Powertoys功能，比如<a href="https://learn.microsoft.com/zh-cn/windows/powertoys/mouse-without-borders">让鼠标在多台win之间流转</a>，或是对标bashrc的<a href="https://learn.microsoft.com/zh-cn/windows/powertoys/environment-variables">环境变量管理</a></p><p>这些留到以后再探索，今天先记录到这里，主要是很久没写blog了，浅更新下~</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>daily-2024-07-07</title>
      <link href="/Daily/41551188/"/>
      <url>/Daily/41551188/</url>
      
        <content type="html"><![CDATA[<p>时间过得真快，已经快一年没有更新博客了。中间其实有好几次告诉自己要来更新几篇博客，但总是因为这样或哪样的原因没有写成。<br>哪怕是最近写的tc，也是写到一半发现有更好玩的东西然后草草收尾了。<br>其实中间有不少的思考，但大多数时候，这些思考要么留存在脑海中，要么只能写下寥寥几句的简单idea。</p><p>今天是周六，在白天就早早的打开了博客的代码，配好了环境，准备更新了，但当手放到键盘上的时候却不知道该写点啥。<br>于是在浪了一个下午后，好好收拾了房间，然后出门去深圳湾走了走。<br>走的时候只感觉到好累，但回来后不知道怎么来了精神，先是找学弟激情讨论了下技术，然后开始打开博客开始更新了。<br>可以说写下来的东西毫无营养，也不像是给别人看的，但终归还是写下来好，也算是鞭策自己好好更新博客。</p><p>在写的时候，还是想起来 ARTHURCHIAO 大佬翻译的那篇 《<a href="https://arthurchiao.art/blog/writing-is-magic-zh/">长写作的魔力</a>》。希望能在未来写更多长文，好好收拾自己散乱的想法，去解决更多有挑战性的问题。</p><p>事已至此，先睡觉吧。</p>]]></content>
      
      
      <categories>
          
          <category> Daily </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>从tc开始的一次简单的内核网络栈探索</title>
      <link href="/Operation/Linux/47a3710b/"/>
      <url>/Operation/Linux/47a3710b/</url>
      
        <content type="html"><![CDATA[<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><p>本来只是在过<a href="https://github.com/xdp-project/xdp-tutorial">xdp-tutorial</a>的教程。<br><a href="https://github.com/xdp-project/xdp-tutorial/tree/master/advanced01-xdp-tc-interact">里面</a>提到了xdp并不是linux内核中唯一的ebpf network hook。另一个例子就是tc。还提到了有一种方法可以通过xdp讲metadata传递给tc。</p><p>于是顺便研究了下tc，发现这玩意是用来做流控的，而且和xdp有个很大的区别是，tc可以接管egress，这是xdp做不到的。<br>恰好这时候遇到了一堆机缘巧合，比如@dreamlike大力夸赞宇宙厂使用tc做透明流量劫持，比如CSIG面试官的听到xdp莫得反应，但是听到tc就兴奋地考我啥是net_cls（总之是一个我听了觉得满头问号的场景），比如偶遇了以为CSIG做网络的大佬，介绍了下业界目前前沿的网络方案。</p><p>恰好linux网络这一块一直没补上，深知自己太菜的我只能长叹一声：“彳亍，我看，我看还不行嘛”。</p><h1 id="从tc开始"><a href="#从tc开始" class="headerlink" title="从tc开始"></a>从tc开始</h1><h2 id="啥是tc？"><a href="#啥是tc？" class="headerlink" title="啥是tc？"></a>啥是tc？</h2><p>先看<a href="https://man7.org/linux/man-pages/man8/tc.8.html">https://man7.org/linux/man-pages/man8/tc.8.html</a></p><blockquote><pre><code>  Tc is used to configure Traffic Control in the Linux kernel.</code></pre></blockquote><p>这句话告诉我们，内核里其实实现了traffic control的功能，而tc其实是一个userspace的命令，只是个调整内核设置的工具。那现在就有了两个最简单的问题：</p><ol><li>tc命令咋用，能干啥？</li><li>内核里做了什么？如何能达到traffic control的目的？</li></ol><h2 id="tc能干啥？"><a href="#tc能干啥？" class="headerlink" title="tc能干啥？"></a>tc能干啥？</h2><p>如果只是使用，网上随便搜搜就有了，请读者自行搜索。这里列举一些目前观测到的用途：</p><ol><li>限流（老本行，发明出来就是干这个的）</li><li>模拟网络波动、延迟等糟糕的网络环境（只适用于调试用户态程序，不必多说）</li><li>透明代理（没错，cilium！）</li><li>网卡转发（没错，bpf！）</li></ol><h2 id="tc的核心概念"><a href="#tc的核心概念" class="headerlink" title="tc的核心概念"></a>tc的核心概念</h2><p>在进一步讨论tc的实现之前，似乎有必要停下来给完全没用过tc的同学（比如两个月前的我）介绍下tc的基本概念。</p><p>还是看<a href="https://man7.org/linux/man-pages/man8/tc.8.html">man page</a>。注意这里有三个概念：</p><ul><li>QDISCS</li><li>CLASSES</li><li>FILTERS</li></ul><p>专业的读者可以自行阅读这些概念，没用过的菜鸡（比如两个月前的我）可以先来看看我的解释。</p><h3 id="浅显的解释：尝试自己构建一个流控系统"><a href="#浅显的解释：尝试自己构建一个流控系统" class="headerlink" title="浅显的解释：尝试自己构建一个流控系统"></a>浅显的解释：尝试自己构建一个流控系统</h3><p>如果我们自己写一个流控系统，我们会怎么做？</p><p>众所周知，网络数据会以frame&#x2F;packet的形式进入linux的kernel。那我们要控制这些frame&#x2F;packet的速度该怎么做呢？没错，排队！于是我们设计出了一个很长很长的<strong>队列</strong>，然后给这个队列设计了相应的<strong>策略</strong>让进入的流量在里面排着队，然后慢慢悠悠但有条不紊的发送出去。然后我们碰到了另一个问题：所有流量都要排队嘛？</p><p>显然不是，如果我后台下载小电影的流量影响了我在游戏里乱杀，那我会气到把小电影都删掉的（这是虚构场景哈，我是指我没有在游戏里乱杀）。所以我们需要另一个概念：<strong>分类</strong>，把下载小电影的流量分类到受到限制的队列中，把游戏分到更加畅通的队列中。</p><p>接下来看看另一个问题，我们已经把游戏的流量和下载的流量区分开来，那让我们继续看看这个场景：游戏里的流量也是有分类的，有对战的流量，也有语音的流量。在一些网络环境不太好的情况下，这些流量也会互相干扰（一个更明显的案例是，网不好的时候会议软件不要开视频，不然声音会卡）。那我如何进一步对这些细分的流量做限制呢？当然，你完全可以直接再加一个分类。就像这样：</p><ul><li>电影</li><li>游戏语音</li><li>游戏对战</li></ul><p>不过树形的结构很显然要更合理一点：</p><ul><li>电影</li><li>游戏<ul><li>语音</li><li>对战</li></ul></li></ul><p>没错，理论上你应该允许分类规则<em>递归</em>处理这些数据，而不是把所有控制写到同一层里。</p><p>我们已经设计好了自己的tc，接下来我们看看linux的tc是怎么做的。</p><h3 id="详细的设计：tc的基本概念"><a href="#详细的设计：tc的基本概念" class="headerlink" title="详细的设计：tc的基本概念"></a>详细的设计：tc的基本概念</h3><p>tc把队列和策略合二为一，称为<code>qdisc</code>，即queueing discipline。接下来qdisc会被分成两类：<code>classful qdisc</code>和<code>classless qdisc</code>。前者本身不直接处理数据，而是通过<code>filter</code>讲数据转交给其他qdisc，这里的其他qdisc可以是直接处理数据的classless qdisc，也可以是又一个进行分类的classful qdisc。</p><p>关于分类，可以看看<a href="https://wiki.archlinux.org/title/advanced_traffic_control#Classful_Qdiscs">arch wiki</a></p><h2 id="tc命令的通信机制"><a href="#tc命令的通信机制" class="headerlink" title="tc命令的通信机制"></a>tc命令的通信机制</h2><p>虽然我计算机知识比较贫瘠，但好在C语言还是看的懂的。tc是<a href="https://github.com/iproute2/iproute2">iproute2项目</a>的一部分。我强调我计算机知识贫瘠是因为这是我头回了解<em>内核如何与用户进程通信</em>这个话题，我花了点时间才意识到tc其实是通过<code>netlink</code>来进行通信的。</p><p>一开始我用 strace 来追踪 tc qdisc show 这个命令，然后发现它打开了<code>/proc/net/psched</code>这个文件，我以为它是类似cgroup那样有一个虚拟fs之类的接口。后面仔细读了代码发现应该是netlink的socket进行的通信。于是这里又有了两个问题：</p><ol><li>&#x2F;proc&#x2F;net&#x2F;psched 这个文件里有啥？</li><li>如何通过netlink通信呢？接口是啥样？</li></ol><h3 id="proc-net-psched"><a href="#proc-net-psched" class="headerlink" title="&#x2F;proc&#x2F;net&#x2F;psched"></a>&#x2F;proc&#x2F;net&#x2F;psched</h3><pre><code class="highlight bash">$ <span class="built_in">cat</span> /proc/net/psched 000003e8 00000040 000f4240 3b9aca00</code></pre><p>直接读取可以看到里面有四个数，我们看看tc是怎么读它的：</p><pre><code class="highlight c"><span class="type">static</span> <span class="type">double</span> tick_in_usec = <span class="number">1</span>;<span class="type">static</span> <span class="type">double</span> clock_factor = <span class="number">1</span>;<span class="type">int</span> <span class="title function_">tc_core_init</span><span class="params">(<span class="type">void</span>)</span>&#123;FILE *fp;__u32 clock_res;__u32 t2us;__u32 us2t;fp = fopen(<span class="string">&quot;/proc/net/psched&quot;</span>, <span class="string">&quot;r&quot;</span>);<span class="keyword">if</span> (fp == <span class="literal">NULL</span>)<span class="keyword">return</span> <span class="number">-1</span>;<span class="keyword">if</span> (<span class="built_in">fscanf</span>(fp, <span class="string">&quot;%08x%08x%08x&quot;</span>, &amp;t2us, &amp;us2t, &amp;clock_res) != <span class="number">3</span>) &#123;fclose(fp);<span class="keyword">return</span> <span class="number">-1</span>;&#125;fclose(fp);<span class="comment">/* compatibility hack: for old iproute binaries (ignoring</span><span class="comment"> * the kernel clock resolution) the kernel advertises a</span><span class="comment"> * tick multiplier of 1000 in case of nano-second resolution,</span><span class="comment"> * which really is 1. */</span><span class="keyword">if</span> (clock_res == <span class="number">1000000000</span>)t2us = us2t;clock_factor  = (<span class="type">double</span>)clock_res / TIME_UNITS_PER_SEC;tick_in_usec = (<span class="type">double</span>)t2us / us2t * clock_factor;<span class="keyword">return</span> <span class="number">0</span>;&#125;</code></pre><p>我们可以看到tc其实只读了前三个数，赋值给了三个参数 t2us,us2t,clock_res，然后用这三个数去计算出了两个全局静态变量 clock_factor 和 tick_in_usec。这两个变量又被用在哪里呢？全局搜了下，被用在这几个函数里</p><pre><code class="highlight C"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">tc_core_time2tick</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> time)</span>&#123;<span class="keyword">return</span> time*tick_in_usec;&#125;<span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">tc_core_tick2time</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> tick)</span>&#123;<span class="keyword">return</span> tick/tick_in_usec;&#125;<span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">tc_core_time2ktime</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> time)</span>&#123;<span class="keyword">return</span> time * clock_factor;&#125;<span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">tc_core_ktime2time</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> ktime)</span>&#123;    <span class="comment">// ...</span>&#125;<span class="comment">// ...</span></code></pre><p>似乎是一些时间相关的函数，我们挑一个函数看看被用在哪里</p><pre><code class="highlight C"><span class="comment">// 调用链如下</span><span class="comment">// tc_core_time2tick &lt;- tc_cbq_calc_maxidl &lt;- cbq_parse_class_opt</span><span class="class"><span class="keyword">struct</span> <span class="title">qdisc_util</span> <span class="title">cbq_qdisc_util</span> =</span> &#123;.id= <span class="string">&quot;cbq&quot;</span>,.parse_qopt= cbq_parse_opt,.print_qopt= cbq_print_opt,.print_xstats= cbq_print_xstats,.parse_copt= cbq_parse_class_opt,.print_copt= cbq_print_opt,&#125;;</code></pre><p>到了cbq这里可能大家会有些疑惑了，这是个啥？让我们回到<a href="https://man7.org/linux/man-pages/man8/tc.8.html">官方文档</a>搜索CBQ。</p><blockquote><pre><code>  CBQ    Class Based Queueing implements a rich linksharing         hierarchy of classes.  It contains shaping elements as         well as prioritizing capabilities. Shaping is performed         using link idle time calculations based on average packet         size and underlying link bandwidth. The latter may be ill-         defined for some interfaces.</code></pre></blockquote><p>cbq是一种classful qdisc。也就是说所谓的open &#x2F;proc&#x2F;net&#x2F;psched只是为了取几个时间参数罢了。这几个时间参数后面会被用在创建一些类型的 qdisc 的时候，<strong>tc并不是通过fs来和内核通信的</strong>。</p><p>想知道这结果参数到底是啥？请自行阅读内核代码</p><pre><code class="highlight C"><span class="comment">// net/sched/sch_api.c</span><span class="type">static</span> <span class="type">int</span> <span class="title function_">psched_show</span><span class="params">(<span class="keyword">struct</span> seq_file *seq, <span class="type">void</span> *v)</span>&#123;seq_printf(seq, <span class="string">&quot;%08x %08x %08x %08x\n&quot;</span>,   (u32)NSEC_PER_USEC, (u32)PSCHED_TICKS2NS(<span class="number">1</span>),   <span class="number">1000000</span>,   (u32)NSEC_PER_SEC / hrtimer_resolution);<span class="keyword">return</span> <span class="number">0</span>;&#125;</code></pre><h3 id="Netlink"><a href="#Netlink" class="headerlink" title="Netlink"></a>Netlink</h3><p>先来看看<a href="https://docs.kernel.org/userspace-api/netlink/intro.html">官方文档</a>是怎么说的：</p><blockquote><p>Netlink is often described as an ioctl() replacement. It aims to replace fixed-format C structures as supplied to ioctl() with a format which allows an easy way to add or extended the arguments.</p></blockquote><p>好，看看<a href="https://man7.org/linux/man-pages/man2/ioctl.2.html">ioctl</a></p><blockquote><p>The ioctl() system call manipulates the underlying device<br>   parameters of special files.</p></blockquote><p>看不懂了，总之就是和长得像文件的硬件通信？等等，netlink是socket，那不就和别的socket差不多？比如ipv4的和v6的或者unix的？</p><p>算了，看点轻松的吧。这是我当时提出来的问题，如果tc不是通过fs这种方式和内核沟通，也完全看不到相关的syscall，那还有哪些方式呢？于是我 google 了下这个问题 <a href="https://stackoverflow.com/questions/20975566/what-is-the-best-way-to-communicate-a-kernel-module-with-a-user-space-program">What is the best way to communicate a kernel module with a user space program?</a></p><p>好家伙，原来还有种通信方式叫netlink，头回知道（狗头）。于是在源码里搜索栏下<code>AF_NETLINK</code>，可以确定tc命令就是通过netlink与内核模块进行通信的了。</p><h3 id="tc的一些有趣的功能"><a href="#tc的一些有趣的功能" class="headerlink" title="tc的一些有趣的功能"></a>tc的一些有趣的功能</h3><p>本来这里是打算花长篇大论描述一下tc子系统是如何实现的，尤其是各种队列的设置。但是在中间的学习过程中突然了解到现代的linux网络早就认为“基于排队的发送”已经过时了，更高效的方案是“基于时间的发送”，即EDT。同时我还发现tc只是整个网络栈中很小的一环，我已经等不及去探索更深的地方了。</p><p>因此我决定不要在这样一个小工具上花太多时间去给其他读者重复这些可能没有太多用途的东西。但是既然决定开始写一篇这样的博客，那就还是要有头有尾。<br>这里记录一些tc有趣的功能，如果读者感兴趣，不妨自己去探索。</p><ul><li><a href="https://man7.org/linux/man-pages/man8/tc-bpf.8.html">tc-bpf</a> 没错，可以把bpf代码注入到tc提供的hook中，这是一个比xdp靠后得多的位置。我们所熟知的cilium就是在这里做了一大堆工作。</li><li><a href="https://man7.org/linux/man-pages/man8/tc-pedit.8.html">tc-pedit</a> tc允许注入一个叫做<code>pedit</code>的action用于修改packet的内容。评价是不如ebpf，ebpf可以直接改。</li></ul><h3 id="一些关于tc的疑惑"><a href="#一些关于tc的疑惑" class="headerlink" title="一些关于tc的疑惑"></a>一些关于tc的疑惑</h3><p>快问快答：</p><h4 id="tc工作在哪一层？"><a href="#tc工作在哪一层？" class="headerlink" title="tc工作在哪一层？"></a>tc工作在哪一层？</h4><p>网络层，在netfilter前面，tap设备处理后面。因此，tc没有conntrack的相关功能。</p><h4 id="tc拿到的数据是啥样的？"><a href="#tc拿到的数据是啥样的？" class="headerlink" title="tc拿到的数据是啥样的？"></a>tc拿到的数据是啥样的？</h4><p>确切的说，是一个以太网的<code>帧</code>.有兴趣可以看看<a href="https://davidlovezoe.club/wordpress/archives/952">这篇文章</a>，写的相当清晰。其实写一个注入到tc中的ebpf代码没啥难的，只要你能理解如何用kernel header中的struct来解析网络协议中各层的header就行。</p><h4 id="tc的内核配置只能用tc命令实现嘛？"><a href="#tc的内核配置只能用tc命令实现嘛？" class="headerlink" title="tc的内核配置只能用tc命令实现嘛？"></a>tc的内核配置只能用tc命令实现嘛？</h4><p>当然不是，上面已经说过tc命令也是通过netlink通信，所以直接使用netlink通信就行了，可以模仿tc命令写c，也可以调用下别人的相关库，比如这个：<a href="https://github.com/florianl/go-tc">go-tc</a></p><h4 id="cilium怎么讲ebpf命令注入到tc内核模块中呢？"><a href="#cilium怎么讲ebpf命令注入到tc内核模块中呢？" class="headerlink" title="cilium怎么讲ebpf命令注入到tc内核模块中呢？"></a>cilium怎么讲ebpf命令注入到tc内核模块中呢？</h4><p>参考<a href="https://github.com/cilium/cilium/blob/ba6c6612645bee766e303570f346c9f7c48d1e52/pkg/datapath/loader/netlink.go#L207">源码</a>，cilium直接调用了第三方的netlink库来执行注入。可以说是非常好用。</p><h3 id="linux-RX"><a href="#linux-RX" class="headerlink" title="linux RX"></a>linux RX</h3><p>如我在上面所说，tc只是网络栈众多子系统中的一个，更大的世界等着我们去探索。下面这篇文章可以让我们对于整个RX有一个大概的认知，但想要了解整个linux网络栈的工作方式，要做的工作恐怕还有很多。</p><ul><li><a href="http://arthurchiao.art/blog/linux-net-stack-implementation-rx-zh/#736-tc-%E5%A4%84%E7%90%86">http://arthurchiao.art/blog/linux-net-stack-implementation-rx-zh/#736-tc-%E5%A4%84%E7%90%86</a></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://man7.org/linux/man-pages/man8/tc.8.html">https://man7.org/linux/man-pages/man8/tc.8.html</a></li><li><a href="https://wiki.archlinux.org/title/advanced_traffic_control#Classful_Qdiscs">https://wiki.archlinux.org/title/advanced_traffic_control#Classful_Qdiscs</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Operation </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> tc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给飞扬哥的博客上传指南</title>
      <link href="/Tools/35816fcf/"/>
      <url>/Tools/35816fcf/</url>
      
        <content type="html"><![CDATA[<p>本文旨在告诉飞扬哥如何修改自己的代码来将博客部署到自己的服务器上。</p><h1 id="成品效果"><a href="#成品效果" class="headerlink" title="成品效果"></a>成品效果</h1><p>在命令行中输入</p><pre><code class="highlight plaintext">hexo d</code></pre><p>博客会同时部署到 github 和服务器上。</p><p>访问地址： <code>http://******</code></p><h2 id="Docs-https-hexo-io-docs-one-command-deployment"><a href="#Docs-https-hexo-io-docs-one-command-deployment" class="headerlink" title="Docs: https://hexo.io/docs/one-command-deployment"></a>Docs: <a href="https://hexo.io/docs/one-command-deployment">https://hexo.io/docs/one-command-deployment</a></h2><h1 id="操作指南"><a href="#操作指南" class="headerlink" title="操作指南"></a>操作指南</h1><p>以下步骤都可以完整复制粘贴</p><p>首先把公钥找出来发给我</p><pre><code class="highlight plaintext"># 敲完第一个之后一路回车ssh-keygen</code></pre><pre><code class="highlight plaintext">cat ~/.ssh/id_rsa.pub</code></pre><p>这一步开始在你的博客目录那里进行</p><pre><code class="highlight plaintext">npm install hexo-deployer-rsync --save</code></pre><p>对<code>_config.yml</code>中以下内容做一些修改</p><pre><code class="highlight plaintext">deploy:  type: git  repo: https://github.com/CFY73/CFY73.github.io.git       # 你的repository地址（建议ssh）  branch: master  # 你的项目branch，默认是master  message: blog</code></pre><p>改成这样</p><pre><code class="highlight plaintext">deploy:  - type: git    repo: https://github.com/CFY73/CFY73.github.io.git       # 你的repository地址（建议ssh）    branch: master  # 你的项目branch，默认是master    message: blog  - type: rsync    host: ******    user: ******    root: ******    port: ******    delete: true    verbose: true    ignore_errors: false</code></pre><p>然后就可以尝试一下了</p><pre><code class="highlight plaintext">hexo d</code></pre><p>还没完，打开你的域名管理控制台。把域名的解析改为指向这个 ip 地址。</p><p>大功告成。</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Apollo2D项目回顾</title>
      <link href="/Auto/43a7b386/"/>
      <url>/Auto/43a7b386/</url>
      
        <content type="html"><![CDATA[<p>Robocup2D 的国赛终于结束了，虽然只拿到了第五，但对于我来说，成绩好像从来都不是什么很重要的事情。作为我整个大学生涯接触的第二长的项目，我想着是时候，也有必要写点什么，这样才不至于感到遗憾。</p><h2 id="序章"><a href="#序章" class="headerlink" title="序章"></a>序章</h2><p>故事得从某个疯狂的学期末开始，大一结束的那个暑假，我留在学校参加自动化院的夏令营。我花了 300 买了台古老的 IBM 服务器，在宿舍瞎折腾。那时还是 Apollo3D 组成员的室友看到了，问我要不要去他们 2D 组试试，说是那边人比较少，而且水平不太够。在我以菜为名，推脱了一下之后，好奇心终于战胜了面子，我决定去 2D 组试试运气，顺便弥补下大一没参加社团的遗憾。然后我就认识了某位李姓帅哥。</p><p>李总，Apollo 上任 2D 组组长，帅。他告诉了我这大概是个什么项目，要比什么，顺便发来了一份源码的压缩包。我记得我花了不少时间去装比赛环境，然后顺着 rcsc 项目的官网找更多的资料。但当我拿着官网资料找李总的时候，李总开始惊喜：“你从哪找到这个资料？”，我说：“官网呀”，“原来还有官网”。李总的英语并不是很好，他的资料大多数来自中文互联网——或者更准确一点：CSDN。我的资料搜索能力这似乎成为了一个不错的优势，李总在接下来的全组组会上把没到场的我推成了下任组长。就这样，一个最晚来的人，反倒成为了这支迷茫队伍的组长。</p><h2 id="新人与队友"><a href="#新人与队友" class="headerlink" title="新人与队友"></a>新人与队友</h2><p>虽然感觉很怪，但是这组长又不是不能当。我的第一个活就是给这支队伍招新。我跑到学校表白墙大肆宣传了一波，然后果然收获了不少年轻人的申请。可能是我刚经历过青柚的面试，我决定在 apollo 也搞一搞面试。我记得有个懂球的小伙子很我聊了很久，从技术到足球，再从足球到技术，我也从一开始的严肃到后面的随意，感觉这压根不是面试，就是纯粹聊天。也有个小伙子说是自己学的特别好，然后一考就一问三不知了。总之这就像是很随意的聊天，不过终归是招到了不少人。我的原则也很简单，先把人招进来再说。不过在不久的后来，我会为这个选择后悔的。</p><p>当大二生活开启的时候，我那 3D 组成员的室友已经成了整个 Apollo 的队长，他拉着我去跟他培养新生，然后在 2D 和 3D 联合培养的课堂上：会的已经会了，不用来也学的会，不会的还是不会，也压根没打算学会。这个时候我开始好好反思自己，是不是对他们的期望有点过高了。在我反省的同时，我终于见到了我的队友们，他们此前有的打过智能车比赛，有的是电子部大佬，当然也有的比较沉默。他们或多或少参与过这个项目的授课了——虽然只进行过一次，这是李总自己搞的，但总比哪都没去的“宿舍蹲”的我好。我很期待什么时候推进一下这些工作，但我想等一等林总，他在打电赛，我感觉他是这个项目的关键人物之一，后来也确实如此。</p><p>在和这些新人与队友交流的同时，我也尝试去看看能不能为整个项目做些什么，不过在此之前，我想是不是该做点准备工作。我首先把 Apollo 的源码丢到了 gitlab 上面，然后教会了其他人怎么用 git，我还记得大我一届的李总看到 git 之后的惊喜表情。然后我把所有资料收到了一份表格中，这个时候林总也回来了，我们把项目理了一遍，其实到这里，整个项目的架构在我心中已经很清晰了，只是细节不太清晰，导致不知道从哪开始修改。不过感觉等等队友也不是什么糟糕的选择，结果这一等，就等到了期末，大二的第一个学期很快就结束了。</p><h2 id="DIY"><a href="#DIY" class="headerlink" title="DIY"></a>DIY</h2><p>经历完痛苦的期末考试之后，我决心一定要在这个寒假里做点什么。我们的目标定的很高，打算让所有新人看一遍代码，然后把整个底层从 10 年来没变过的 agent2d 迁移到 helios-base，其中对 librcsc 的适配更是重中之重。我精细地划分了任务，制定了阶段计划并指定了责任人，然后在中期发现根本没有人在看代码！至于我的那部分，我在第一天就看完了，顺便还帮某位队友看完了他的部分。当这个寒假快结束的时候，我已经为整个项目的升级做好了准备，我研究了 CMake 与 Makefile，了解了 rcssserver、monitor 和其他的比赛周边环境，学习了 librcsc 的架构。但就是没有去做真正的迁移，所以在还有一周就开学的时候，我想，为啥不干脆我自己来呢？</p><p>我找了一份 helios-base，然后写了一套 CMakeList，替换掉原来的 autoconf。然后把原来的源码文件一个文件一个文件复制粘贴过来，我还写了个脚本，用于在 vscode 中快速对比原来的文件与 helios-base 中的文件的区别，如果新的 更好，我会选择直接用新的，在所有 100 多个文件都复制过来之后，我尝试编译整个项目，当出现报错的时候，我就去看看这个函数或是变量是否被更名或是被更改了类的结构。这里还得感谢 helios-base 的作者秋山教授，在 git 还没有流行开来的那几年，他用 CHANGELOG 记录了他的所有变更。vscode 的全局替换功能能帮我解决不小的麻烦，为了更精准地替换，我还补了不少正则表达式的知识。我一次又一次地编译这个工程，一次又一次替换那些出错的函数，一次又一次修改写错的 CMakeLists。在我做出自己来这个决定的第二天晚上，这个使用新 librcsc 库的 Apollo 源码成功通过了编译。</p><p>我记得那天我非常激动地向群里的队友们说我一个人就把迁移完成了，然后好像没有人理我哈哈哈。其实事情到这里还没完全结束，接下来我尝试了运行新的球队，并和老的球队进行比赛，看看更换底层是否会影响到球队的表现。然后就发现一方面球队的阵型文件已经过时了，另一方面球队的罚球（因为没有点球，用的是那种老式的点球方式）会出现跑不起来之类的 bug。于是我又花了不少时间去重新看看 librcsc 的 CHANGELOG,发现了 librcsc 自带的几个小工具，然后还问了问秋山教授他当年怎么处理数据转换的，他说这玩意很简单，让我自己手写，所以我就手写了一个，这样就解决了阵型格式文件不一致的问题。而罚球也是一样，我先是找到了一个合理方案，然后请教了秋山教授，确认这个方案没得问题后写了上去。</p><p>在出发去学校前的倒数第二天，我终于完成了所有的升级任务，新的球队似乎和老的并没有太大差距。至此，一项伟大的任务完成了。</p><h2 id="选拔与-HFO"><a href="#选拔与-HFO" class="headerlink" title="选拔与 HFO"></a>选拔与 HFO</h2><p>当大二的第二个学期开始的时候，我想做的第一件事就是开启选拔。我当然不能期望每一个接触过这个项目的人最终都能成为一个合格的队员，毕竟每个人都有自己的生活，哪怕是我，也没有把最多的精力放在这个项目上，不过当我们需要推进一些工作的时候，我还是希望能有一些靠谱的队友来一起完成一些工作。</p><p>恰好之前接触过 HFO 这个项目。这个项目把半场攻防作为主要目的，研究在半场攻防情况下双方的攻防情况。一开始我是想学习隔壁 3D 项目，让新人们自己写一只球队然后互相进行半场攻防，然后根据结果选拔的，结果发现没有哪个人能自己写球队。恰好 HFO 这个项目也有一堆缺陷，首先是 HFO 与某个 rcssserver 版本绑定了，当 rcssserver 升级后，HFO 并没有跟着升级。另一方面 HFO 所需要的环境和新版本的 rcssserver 版本是冲突的，对于我来说这倒不是什么问题，但是对于一些新人来说，光是解决这些环境问题就已经够麻烦的了。所以，我做了一些突破性的尝试，我把 HFO 中魔改的 rcssserver 中的 HFO referee 部分改写成了我们球队中的 trainer，我对这个全新的 trainer 做了大量的设计，这很考验我的 Cpp 功底，不过好在对 rcssserver 和 librcsc 的代码都足够了解，这个 trainer 很快写成了，一开始，这个 trainer 被用于模拟 HFO 场景，后来我突发奇想，不如让新队员写一个最简单的追球动作吧。于是我改出了一份专门用于“发球”的 trainer，这个 trainer 会按照设置把球往某个角度以某个速度发射出去，然后会自动计算球员追到球所需花费的时间。接下来我把这个 trainer 打包到 helios-base 中，并设置了一系列角度和速度的情况，然后我写了几个脚本方便编译和测试并附上了长长的 README 来说明选拔的要求和规则。最后我还找到了隔壁 3D 组要了 5 台老旧的服务器，将其中 4 台用于比赛，另一台用于收集和实时展示数据。</p><p>这次选拔只进行了半个月多一点的时间，我在前面几天说明了情况，然后各位同学就开始各显神通了。其实追球是一个相当简单的动作，一方面你可以手写一下重新实现追球这个动作，另一方面你可以直接调用底层库 librcsc 中的内容。最终拿下前二的两位同学就是这两个思路的代表。鸡米花同学发挥了他扎实的算法功底，把追球的时间压缩到了最低，拿到了绝大多数情况下的第一，但是在剩下的一些情况中，他的写法会导致追不到球。而刘总在选拔开始的第二天就写完了代码，而且再也没改过。他在几乎所有情况下都拿下了第二，而他的代码只有短短 5 行，因为他直接调用了某个底层库提供的函数。剩下的同学有的也有不错的优化，被我中途拉进来的小小于依靠不赖的算法能力拿到了第三，少数情况下还拿了几个第一。这些同学后来真正成为了能改变这支球队的力量。</p><p>值得一提的是，还有一些同学选择了放弃比赛。这其实是一件在正常不过的事情，光靠这样一个比赛去说明一个人的能力或是做出一些评价并不是一件公平的事情。但对于我自己来说，我学到的很重要的一件事情就是，并不是每个人都和你自己一样会甘心为了达成同一个目的而努力的，这和你为这些目的或这些人付出了什么是完全没有关系的。每个人都活在自己的世界，因此永远不要以己度人，拿着自己的条件去评价别人的是非。这并不是什么牢骚，仅仅是一些举办这样一次选拔这样之后的感慨。</p><h2 id="比赛"><a href="#比赛" class="headerlink" title="比赛"></a>比赛</h2><p>我还记得新队员选拔出来之后，我们雄心勃勃地开始安排接下来的工作。在一开始我们也推进了一些工作，林总和刘总苦读了好几篇论文，鸡米花开始研究足球的评分系统，后来还提出了 XG 等一些列我看不懂的概念，我也写出了用于进行大量测试球队表现的 autogame，接总也改好了 loganalyzer，接入了我的 autogame。但随着时间的推进，大家都各忙各的去了，林总去打电赛了，鸡米花继续他的 icpc 生涯，接总也开始了他的无人机比赛，我也开始了自己的青柚生涯。似乎过了很长时间，我们没有管 apollo 了,这个时候大家的心态似乎都发生了一些变化，没有人在乎这场比赛了。巴西赛我们也不怎么重视，本打算拿老的代码上去随便跑跑，然后提交代码的时候无论怎么搞，巴西人那边就是跑不起来，最后只能垫底收场。然后很快又开始国赛了，这次我们提前了二十多天开始准备，刘总写好了一份守门员优化的代码，林总和后面加入的薛总写了个计算 XG 的函数。哪怕好好打了个包交上去。然后开始了等死之旅。</p><p>因为基本没啥准备，说是等死也不为过，一开始我的心态是很好的，毕竟知道自己确实没有什么特别大的进步，小组赛出线就是胜利了。但真的看起比赛直播了，还是感觉我们这比赛比隔壁的卡塔尔世界杯刺激多了。很多时候我们只能眼睁睁地看着对面踢球，只能对着看到球到处飞却没有作为的守门员无能狂怒——当然，这也怪不了别人，毕竟代码确实是自己的，没有改好是我们自己的问题。组里面就中南大学和南京大学略有竞争力，一开始以为南大很强，结果踢平了，后面以为中南也能平，结果 2：3 小败了。比较意外的是，被我们暴打的南华大学居然能和南京大学踢平。虽然很魔幻，但总归是小组第二出线了。在第一天比赛的晚上，还有一场技术挑战赛，比赛内容就是每个队上去讲讲过去一年里有什么改进。我们上去讲了讲 HFO 和 autogame，最后的提问环节中南的同学还问了一下我们 librcsc 升级的问题，这个时候我略带嚣张地回答：“我在 github 上回答过这个问题了，你们可以自己去翻”。虽然介绍的时候自己的表现一塌糊涂，但总归是段不错的经历。</p><p>第二天的比赛是排位赛，小组赛表现勇猛的中南突然就谁都踢不过了，甚至我们逼平了去年的世界第四合肥师范，比较令人惊奇的是合肥学院 MT 表现亮眼，我记得这个队是因为赛前 apollo 队长对我们的要求是：“你们起码得踢赢 MT 吧”。结果在第三天的最终天梯赛，我们打败了中南的云麓，守住了前一天拿下的第五的排名，然后 MT 在和连续三年的世界关于 Yushan 的一二名排名赛中，依靠 7500 回合（相当于足球比赛中的加时还有 15 分钟结束）打入的一粒进球绝杀了 Yushan，拿下了这届世界杯的冠军。这个时候，我倒是心态平稳了，毕竟确实小组赛出现了，想要重现去年第二的奇迹也确实没有那么好的运气和实力。在赛后的 apollo 大合照环节，我因为差点忘记这回事而错过。</p><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>故事写到这里，流水账写的也差不多了。很多时候，我觉得自己是不是对这个项目太不上心了。因为我的敷衍，巴西赛没有打成，有的新人没有留下来，甚至 apollo 的合影也差点错过，包括最后看比赛的时候，偶尔也会想一想，如果早先优化了某个技术点，刚刚这个球说不定能进&#x2F;能守住呢？在我写这篇文章的时候，我想象了一下，如果当年我拒绝了室友的邀请，这个项目会怎么样呢？</p><p>首先鸡米花和刘总也许不会加入团队，因为他俩是我在表白墙上发招新拉进来的，林总也许会当上 2D 的组长，也许会从他的电子部招几个人过来。这样的话，这份代码还是会以“u 盘传 u 盘”的方式传递下去，不会上 gitlab。也不会有 HFO trainer，不会有 autogame。也许没人知道 rcssserver 的版本升级和 librcsc 的通信协议格式升级。这份代码仍然会使用 10 年未变的古老 agent2D 格式。我们还是打不上世界杯，因为我们既没有成绩也没有钱交报名费。我甚至想过，2D 组也许会死掉，3D 的同学会过来几个人，然后报名拿几个奖。当然，比赛最终的成绩好像也不会有太大变化，毕竟确实也没啥高效的修改。</p><p>这样想想的话，感觉好像一切都不算太糟，毕竟 2D 现在还活着，至少也能招到几个大一的同学，鸡米花、刘总和薛总会继续带着这个团队走下去，陷入考研泥潭的李总不久也会回来帮帮忙。但对于我来说，我的故事应该就到这里了。我曾经很迷恋 cpp 这门语言，因为似乎没有 cpp 写不出来的东西，哪怕花很多时间似乎也是值得的。但在见识了更为广阔的世界之后，我选择了不拘泥于 cpp 去探索更广阔的世界，这也是为什么从某个时期开始，我没有再推进 apollo 的相关工作了。我已经从这个项目中学到了足够多的知识，我的奉献虽然帮不上什么大忙，但也不至于一点没有。作为一个大三的当代老年人，我只能祝福下一代 2D 团队用自己的力量和我们这些老年人留下的东西去写出更好的球队。至于我自己，也要走到未来的道路上了。</p><p>The life cycle of <code>NewApolloBase v0.0.1</code> has reached the end of life.</p>]]></content>
      
      
      <categories>
          
          <category> Auto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> apollo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ESP,GRUB与BTRFS</title>
      <link href="/Operation/Linux/8f58554d/"/>
      <url>/Operation/Linux/8f58554d/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>上一次装 arch 时我做的一个决定，让我爽到了现在。</p></blockquote><p>我用 linux 已经多久了？我已经记不清了。我在这台 arch 机器上折磨了自己无数次，但这次我遇到了真正的问题。我的 Apollo 项目大量运行比赛进行测试的时候，会产生大量日志数据，而因为此前的双系统安装方式，给 linux 留下的空间很快被吃完了，虽然看上去不过是 140g 的磁盘被日志吃了 70g，但我眼馋本来属于 windows 和老的 manjaro（没错，我还留着这玩意）的另外 300 多 g 磁盘空间呐。</p><p>于是，一场波澜壮阔的探索之旅开始了。</p><h1 id="初探-BTRFS"><a href="#初探-BTRFS" class="headerlink" title="初探 BTRFS"></a>初探 BTRFS</h1><blockquote><p>无论是现在还是将来，我都会推荐你使用 btrfs 作为你的主力文件系统</p></blockquote><h2 id="btrfs-扩容"><a href="#btrfs-扩容" class="headerlink" title="btrfs 扩容"></a>btrfs 扩容</h2><p>我依然记得我选 btrfs 的若干理由：</p><ol><li>COW</li><li>快照</li><li>多设备</li><li>软 RAID</li></ol><p>说实话，除了一开始那次挂载 subvol 有点印象，后面的功能我都不是很了解。于是这次我决定来体验一下。</p><p>我首先清空了 windows 和 manjaro（一点不带手抖的，早该删了），然后将这两个分区重建为一个新的分区（fdisk 无脑冲）。接下来用<code>mkfs.btrfs</code>非常轻松的建立了 btrfs。然后用<code>btrfs device add</code>把新的卷加到<code>/</code>上。这时候用<code>btrfs filesystem show</code>就可以看到<strong>整个 btrfs</strong>可用的磁盘空间一下变大了好多。当然，这还没完，我还要<code>btrfs filesystem resize</code>来确保<strong>btrfs 子卷</strong>能分配到足够的空间。最后，要确保数据能被均匀地分配，还要跑一跑<code>btrfs balance</code>。</p><p>可以说，这样我的问题基本解决了，空间确实够大，但还有几个无关紧要的小问题。</p><ol><li><p>卷标是 p5,因为此前双系统的缘故，我的 arch 被安装在 nvme01n1p5。而新的卷为 nvme01n1p2，中间的 3 和 4 都是不存在的。</p></li><li><p>OS 被安装在磁盘中间靠后的位置。如下图所示：</p><blockquote><p>理想的样子：|&#x3D;esp&#x3D;|&#x3D;&#x3D;OS&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|</p><p>实际的样子：|&#x3D;esp&#x3D;|&#x3D;&#x3D;&#x3D;data&#x3D;&#x3D;&#x3D;|&#x3D;&#x3D;OS&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|</p></blockquote></li></ol><p>虽然但是，这样确实可以用了，于是就这么用吧。</p><h2 id="btrfs-快照"><a href="#btrfs-快照" class="headerlink" title="btrfs 快照"></a>btrfs 快照</h2><p>接下来我尝试的功能是快照，因为有 COW 的存在，创建快照并没有太大的性能负担（不会全量备份）。一个简单的<code>btrfs subvolume snapshot</code>就足够创建快照了。但是我玩的更花里胡哨一些，我找到了这个：<a href="https://github.com/Antynea/grub-btrfs">grub-btrfs</a></p><p>这个工具可以在 grub 启动界面把此前对整个系统做的 snapshot 作为启动项，这意味着我可以随时将整个系统回滚至之前的某个状态。这个工具还提供了某种联动，允许定时创建快照并自动更新 grub 启动菜单。我这里想用 systemd.path 提供的功能来完成这种联动，当然除了 systemd,还有 timeshift 和 snapper 等一系列方案。</p><p>但是用 systemd 方案有一些 prerequest。systemd.path 会监控某个路径中的文件是否有变化，若有，则执行相关的操作。而为了偷懒，我是打算用默认的配置文件的。默认的配置文件又有一个特殊需求，它要求 snapshot 被挂载到&#x2F;.snapshots 这个挂载点中。也就是我得创建一个 subvolume，并挂载到这个位置才行。</p><p>创建 subvolume 并不是什么难事，但挂载却有大麻烦，先是提示我 mount point didn’t exist，后是辛辛苦苦挂上后会显示一个丑陋的<code>@</code>符号。之前建@var 和@home 子卷的时候就没有这些问题。btrfs 的挂载应该是这样的，首先挂载@到&#x2F;，这时候查看&#x2F;的话，会先是有@var 和@home 这两个目录，当你把@var 和@home 挂进去之后，这两个目录就不存在了，而是变成&#x2F;var 和&#x2F;home。但是这次挂载@snapshots 不知道为啥就会显示一个丑陋的@snapshots。除此之外，我只能通过指定 subvolid 的方式来在挂载这个子卷，subvol 无法指定。</p><p>虽然各种各样奇奇怪怪的问题太多了，不过这样其实也可以用了，至少从@snapshot 和&#x2F;.snapshots 都可以访问到这个 subvolume。因为没有用 timeshift 这样的软件，我把自动备份的任务交给<a href="https://github.com/systemd-cron/systemd-cron">systemd-cron</a>。这个工具运行我用 cron 的语法创建 systemd-timer。当然，我也写了个简单好用的 alias 来手动做 snapshots：</p><pre><code class="highlight bash"><span class="built_in">sudo</span> btrfs subvolume snapshot / /.snapshots/$(<span class="built_in">date</span> +%F-%T)</code></pre><p>systemd.path 监听到这个目录有变化之后就会触发 grub-mkconfig 重新生产 grub 的入口。这时候重启能看到此前的快照，并且可以进入并正常操作。</p><h1 id="初探-ESP"><a href="#初探-ESP" class="headerlink" title="初探 ESP"></a>初探 ESP</h1><blockquote><p>一个稍微大了一丢丢的 initramfs 引发的惨案</p></blockquote><p>事情的起因是一些小问题。我想跑一个 ebpf 程序，但是这玩意是拿 python 写的，跑的时候报了个错，结果发现是某个内核参数没开。这下事情就“严重”起来了，因为除了编译内核好像没有别的解决办法。编译内核也许要单开一篇文章，这里先略过了。总之内核编译完了，把内核（bzImage）丢到 efi 分区里去也没啥问题，但是创建 initramfs 这步开始有麻烦了，它提示我的 efi 分区空间不足。也是，efi 分区就 100MB。我当时一开始想的是：“那就给 efi 分区扩容扩容吧”，随即因为扩容太难并且被大多数人说：“没有必要”而作罢。这时候，我有了一个（让我后悔的）惊天大发现：btrfs 可以直接占领整个磁盘！也就是说 btrfs 也可以做引导盘吧，不需要引导分区啦（大误）。在经历一部分尝试后，终于在 arch wiki 上看到了那句：占领整个硬盘之后记得把引导分区装到其他盘上哦。还好没把 esp 分区删了，不然恢复难度就更上一层楼了。</p><p>在经历了一些混乱的思考后，我靠着官方文档和一些论坛理清了思路：efi 分区中只需要有 grub 来做引导就 ok 了。但是我的 esp 挂载到了&#x2F;boot，而 linux 内核以及 initramfs 都会默认生成在这个位置。因此我做了一个重大的决定：把 esp 重新挂载到&#x2F;boot&#x2F;efi 这个位置上。接下来重新生成 initramfs，重新写入 grub.cfg。这样内核的存储位置就不必受到限制了，同时在这个过程中，我对 initramfs 是用来干啥的，fallback 内核又是用来干啥的有了进一步了解。</p><h1 id="再探-BTRFS"><a href="#再探-BTRFS" class="headerlink" title="再探 BTRFS"></a>再探 BTRFS</h1><p>这是一项浩瀚的工程。我决定让整块硬盘只留下两个分区：一个 esp,一个 btrfs。为了达成这个目标，一开始我做了个有点创意的尝试，我首先建立了一个新的 btrfs 分区，然后加入到原有的 btrfs 分区，让数据分布在两个分区中。然后我删除了原来的分区，根据 btrfs 的说明，删除某个设备后，数据会被移动到仍然存在的设备，也就是另一个分区中。然后我发现原来的分区确实被 umount 了，lsblk 显示所有数据都存在于新的分区中。但打开 fdisk 后发现，这些数据在磁盘中的位置并没有发生变化，仅仅是卷标变了而已。看样子，还是逃不了一次巨大无比的 mv 或 cp 来把数据手动移动到磁盘靠前的位置了。</p><p>所以我重新做了计划：</p><ol><li>建立一个跟随在 esp 后面的分区</li><li>把原来的 btrfs 从磁盘的中间部分移动到上述分区</li><li>回收原来的 btrfs，并分配给上述分区</li></ol><h2 id="重新规划分区"><a href="#重新规划分区" class="headerlink" title="重新规划分区"></a>重新规划分区</h2><p>在分出来一块足够大的分区之后，我们先把它变成 btrfs，然后规划一下子卷。子卷有相当多的好处，比如可以只针对 VFS 中的某一部分做快照，或是做磁盘配额。我这里还是沿用以前的规划：</p><ol><li>@ -&gt; &#x2F;</li><li>@var -&gt; &#x2F;var</li><li>@home -&gt; &#x2F;home</li><li>@snapshots -&gt; &#x2F;.snapshots</li></ol><p>还记得初探 btrfs 中，我说过不管我怎样操作，系统都会多一个丑陋的&#x2F;@snaphsots 吗，这其实跟挂载的方式有关。当我们创建 btrfs 子卷的时候，我们的挂载方式是直接<code>mount /dev/nvme01n1p2 /mnt</code>，而我们使用的时候，实质上是将<code>@</code>子卷挂载到了<code>/</code>位置。也就是说，想要解决这个问题，就不应该在挂载好@子卷的操作系统中进行子卷的创建和挂载，而是将整个分区挂载至某个位置后再进行子卷的创建和挂载。</p><h2 id="迁移的小技巧"><a href="#迁移的小技巧" class="headerlink" title="迁移的小技巧"></a>迁移的小技巧</h2><p>迁移也是一件有点小技巧的事，我们要解决一些小问题。</p><p>首先是哪些目录需要迁移？众所周知，linux 中的一些目录其实是虚拟出来的 API。我记得我的第一次尝试就卡在了 cp &#x2F;proc 下的某个目录。这里尝试列出一些不用迁移的 api 目录。</p><ul><li>&#x2F;boot&#x2F;efi （这是我的 efi 分区，有的人可能是&#x2F;boot，这些目录到时候会被挂载，所以自然不用复制一遍）</li><li>&#x2F;dev （linux 会负责挂载，实质上好像是 systemd 在干这个）</li><li>&#x2F;mnt （这个目录理论上应当是空的，把它加进来是因为我们操作的时候往往会把源目录挂载到这里）</li><li>&#x2F;proc（应该没人会想着对这个目录下手吧）</li><li>&#x2F;run （同上）</li><li>&#x2F;sys （同上）</li><li>&#x2F;tmp （这个会自动挂载 tmpfs）</li></ul><p>在所有数据都移动后，我发现我没法 chroot 到这个目录下，因为它没有挂载&#x2F;proc 之类的目录。这个地方手动处理感觉比较麻烦，所以我选择了简单但高效的<code>pacstrap /mnt base</code>。在能够 chroot（我更推荐 arch-chroot）进入这个迁移完的目录后，我们得重新生成 initramfs 来让 linux 引导进入我们这个新的文件系统。在此之前还要改一改&#x2F;etc&#x2F;fstab，保证挂载的是新的子卷，而不是原来的，注意 subvol 和 subvolid 都需要修改。其实也可以简单一点<code>pacstrap /mnt base linux</code>就完事了。</p><p>重启之后能进入到新的文件系统，并且查看后能看到所有文件都在，那就 ok 了。</p><h2 id="回收原来的分区"><a href="#回收原来的分区" class="headerlink" title="回收原来的分区"></a>回收原来的分区</h2><p>回收本身并没有什么难度，fdisk 之后敲个 d 就好了，有点点挑战性的是给新建立的分区扩容，注意，是分区扩容，而不是像之前一样建立一个新的 btrfs 并加入到这个分区中来。</p><p>查了下资料之后，步骤大致如下：</p><ol><li>fdisk 进去</li><li>首先 d 删除那个新建好的分区，注意，这里只要不敲 w，删除这个操作并不会真实执行，所以可以放心地敲。</li><li>再 n 新建分区，选择范围时保证开头与原来分区的开头一致，结尾可以扩大到比原来的结尾更远的位置，我这里是直接选到了磁盘的末尾。</li><li>敲个 w 保存，注意它提示你是否要删除原来分区上已有的 btrfs 标记时，要选择 n。不然你就得到了一个全新的磁盘，所有的数据都会丢失。</li><li>这个过程中的任何一步都可以执行 p 来查看当前的分区状态。</li></ol><p>我觉得最精彩的操作就是最后的不选择删除 btrfs 标记，这样保证了分区的扩容，又不影响已经存在的文件系统。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>在经历了长达两天的折腾之后，我得到了什么？</p><ol><li>一个干净的 esp，里面只有 grub 的相关配置。</li><li>一个干净的 btrfs 大分区，并且这个分区紧跟在 esp 后面，没有浪费一点空间。</li><li>一个快捷的 btrfs 快照创建与恢复机制。</li><li>一个多内核的 linux，我的 kernel 和 initramfs 都存储在 btrfs 中，不会被 esp 分区大小限制。</li><li>成就感</li></ol><p>当然，除了上面这些，这次也算是搞清楚了 how arch linux is boot。下一步的话，我希望下次能用一套脚本来构建这一整套系统，而不是靠我手动 Operation。</p>]]></content>
      
      
      <categories>
          
          <category> Operation </category>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>记录一次有趣的答辩经历</title>
      <link href="/Auto/c687b02a/"/>
      <url>/Auto/c687b02a/</url>
      
        <content type="html"><![CDATA[<p>好久没更新了，来写一写博客。</p><p>前天的时候被 Apollo 的学弟喊去参加自动化院的挑战杯答辩，答辩是线上进行的。本来的打算是到时间了我喊学弟上来准备，但听了第一组的答辩之后，事情的性质发现了一点变化。怎么来答辩的项目都这么高端？怎么答辩的 ppt 这么精致这么多？怎么答辩的人真的能答出来啊？</p><p>于是我打开学弟准备的那份套模板的 ppt——没错，是刚刚下载打开的那种，发现里面不知道写了个什么玩意。不对齐什么的我都觉得还好了，好歹把句子写通顺吧。读起来大概的画风就是：我在进行一个文字的写。</p><p>Apollo 毕竟是自动化院的项目，这么出去丢人现眼还是不太秒呀。于是我告诉学弟我来答辩算了，他倒挺干脆，睡午觉去了，我开始改这份 PPT。首先是把大段文字拆成分论点。然后把一些观点换成自己的，期间还因为模板的 ppt 没法修改，导致很多地方没有办法大改。另外也是运气好，我们是最后一组答辩的，我的准备时间充裕。结果到了倒数第二组的时候，他们的答辩跟个光速一样，这时候我想起来我的 linux 笔记本的麦克风是坏的，尝试了一下发现还真就用不了。这时候也没有办法了，只能换回 windows 电脑（我有两台笔记本）。但新的 PPT 已经来不及拷过来了，只能打开原来那份语句不通顺的 PPT 硬上了。</p><p>介绍项目的时候，我一开始就从宏观的点开始扯，先说 Apollo 是个大项目，然后开始介绍 Apollo 是个啥，然后引出我那个 Apollo 自动化测试平台的主题。然后中间的概念都是快速盘点然后掠过，大段文字那几页 PPT 全都快速掠过。最后对着唯一一张成果图开始输出，从 cgroup 到 k8s 扯了一圈，最后拿对 Apollo 的美好未来的期望收了个尾。</p><p>由于我将的很懵逼，答辩的老师也很懵逼，于是老师提出了一个“这玩意到底是个啥的问题”。我说这是用于高性能测试的软件。老师又问：“以前没这个吗”，我说有，但是没我这个强。然后从 shell 脚本开始扯到 go，又扯到 k8s。（这个我确实熟吧哈哈哈）最后应该是触及到一点老师的盲区了，终于没有接着问了，不过再问我也不是不能扯，因为已经扯到我自己的领域了哈哈哈。</p><p>最后两位老师还是提出了一些宝贵的意见，一个是他们觉得我讲的还不错，但是没有放到 PPT 里去（那确实没有哈哈哈），另一个是我这个项目一看就知道是哪个老师做的，但是实质上又和这位老师的工作没有太多直接联系，我取这个题目容易误导答辩老师。事后答辩的老师通过院科协的兄弟找我要了一份 PPT，我肯定是把改好的那份发了过去。事后院科协告诉我，我们这个项目拿了一等奖。15 个项目里有 4 个一等奖，我们排第三，也是蛮惊喜哈哈哈。</p><p>现在回过头来看的话，一方面还是有一种“woc，这也能拿奖？”的诧异，另一方面也确实感慨，有点真本事到哪里都是有点小优势的。虽然在这个项目本身的积淀不够，但是在通识方面富裕的知识有效的弥补了一部分这方面的缺失。最后，还是要感谢一下自动化院的老师，确实还是给出了很多宝贵意见的。</p>]]></content>
      
      
      <categories>
          
          <category> Auto </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>建立linux下完善的个人备份系统</title>
      <link href="/Operation/Linux/63fa7eb5/"/>
      <url>/Operation/Linux/63fa7eb5/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>众所周知，linux的桌面版非常的“易碎”。比如我在过去几个月里，多次经历kde崩溃。kde崩溃毕竟是小事，换个tty用kstart重启一下又能接着用，但python脚本能把我卡到tty都换不了，这就多多少少有点抽象了。虽然说大多数桌面系统的不稳定都是因为我这样的用户“菜且作死”，虽然说我没有以前刚开始使用双系统linux的时候那么菜了，虽然说我以后肯定会好好学的，但我觉得备份和日志这两件事现在还是要好好做一做了。</p><p>这篇文章的主要目的就是记录下对各种东西的备份过程，并不打算一口气写完，打算是边备份边记录。</p><h1 id="备份策略"><a href="#备份策略" class="headerlink" title="备份策略"></a>备份策略</h1><p>我的备份打算分为三部分：本地、云端、硬件。</p><h2 id="本地"><a href="#本地" class="headerlink" title="本地"></a>本地</h2><p>在本地端，对极短时间内的操作进行备份，主要防止偶发的极端失误操作。</p><p>具体方案很简单，使用timeshift每隔1个小时对整个系统进行1次备份，只保留5次备份（可保证在误操作之后立刻回退）。相对应的还有每天1次备份（防止夜晚关机后按小时回退的文件丢失）保留最近两天的备份，每周1次备份（保证短期内的回退），保留最近两周的备份。</p><h2 id="云端"><a href="#云端" class="headerlink" title="云端"></a>云端</h2><p>云端备份为备份的重点。主要目的是保证物理媒介全部丢失后，可在一台全新的机器上快速完成环境配置，要求要能完整适应各种个人使用习惯并保证所有重要文件和大部分个人文件存活。</p><p>云端备份主要是针对配置文件，因此<a href="https://wiki.archlinux.org/title/Dotfiles">dotfile项目</a>是这种做法的不二之选。</p><p>因为已经看了很多教程了，所以就简单暴力一点好了，直接在家目录下建git仓库。然后敲一个<code>git status</code>，把里面的文件复制到<code>.gitignore</code>里，从而快速排除掉不需要的文件。</p><p>然后就是第一次使用<code>git add .</code>来添加所有文件。后面就要用<code>git add -u</code>来保证不添加没有变动的文件，如果有个别文件要添加，就直接add该文件。</p><p>下面是一些特殊的操作。</p><h3 id="nvim配置文件"><a href="#nvim配置文件" class="headerlink" title="nvim配置文件"></a>nvim配置文件</h3><p>我的nvim配置文件在<code>~/.config/nvim/</code>下，因此我需要将整个文件夹添加到我家目录的git追踪之下。我的nvim配置其实是从别人的配置那里魔改过来的，所以其实是可以直接用submodule的，但因为平时使用频率不那么高，但又偶尔要用，所以我简单暴力地把.git文件删掉，直接将该文件加入到了我的家目录git管理下。</p><h3 id="各种软件"><a href="#各种软件" class="headerlink" title="各种软件"></a>各种软件</h3><p>确实，有时候会记不得自己到底装了什么软件，虽然说确实可以“想起来再装”，但是有个记录总是好的，于是我决定写个脚本记录下自己都装了啥。那脚本放在哪里呢？我决定在家目录下建一个<code>.backup/</code>的文件夹，然后写入脚本。</p><p>关于yay的跳过回复，可以参考<code>https://github.com/Jguer/yay/issues/1033</code>。</p><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>有的文件可能是会更新的，随时更新是一方面，但有的文件是软件安装好后自动生成的，而我需要对这个生成好的文件对一些修改。这里我打算用linux自带的patch来做。</p><h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h2><p>硬件备份除了备份普通文件，如我看的书，还有一大重点就是各种私钥。这些都是只能通过硬件来备份的。</p><p>先写到这里，想起来再加</p>]]></content>
      
      
      <categories>
          
          <category> Operation </category>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>用树莓派搭建一个简单的跳板机</title>
      <link href="/Operation/Network/ace6f1b7/"/>
      <url>/Operation/Network/ace6f1b7/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>众所周知，学校的网络是要登录的，不过在工作室是有自己的路由器的。虽然工作室的路由器用的很爽，但是有的东西是不得不连学校的网，比如各类报名系统以及一些学校的资料。</p><p>在两个网络之间切换其实本来也不是啥难事，但是难就难在校园网要登录，虽然我有脚本，但我已经懒到点一下脚本都觉得懒了。刚好手上有树莓派，所以就来尝试着搭了一个。</p><h1 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h1><p>树莓派4B确实是有两个网卡的，一个有线一个无线。现在树莓派是以有线的方式连接到了工作室的路由器上，然后无线网卡就空了出来。所以方案就很简单了。有线网卡连工作室内网，无线网卡连接校园网。然后配置下路由表，保证需要连接学校的内容都是通过无线网卡进行发送就行了。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="使用指令添加路由表"><a href="#使用指令添加路由表" class="headerlink" title="使用指令添加路由表"></a>使用指令添加路由表</h2><p>因为一开始找到的是<code>route</code>指令，所以这里是基于这个指令实现的，实际上还有<code>ip</code>,<code>ip-routes</code>之类一堆实现方式。</p><p>连上树莓派，然后敲下面的指令</p><pre><code class="highlight bash"><span class="built_in">sudo</span> route add -net [dest] netmask [netmask] dev [device] gw [gateway]<span class="built_in">sudo</span> route add -net 10.0.0.0 netmask 255.0.0.0 dev wlan0 gw 10.162.255.254</code></pre><p>其中，<code>dest</code>可以是一个范围，但是需要<code>netmask</code>与之配合，这里就涉及到了子网掩码的相关计算，这里顺便复习了一下，不过估计以后还是会拿计算器算。</p><p>然后<code>device</code>可以用<code>ifconfig</code>查看，网卡是有命名规范的，我记得鸟哥讲过。最后的gateway就是路由表了，这里可以通过<code>route</code>直接查看，用<code>route -n</code>可以跳过名称解析，比直接敲快一点。</p><p>这里我感觉只指定dev就够了，不过还是写上了<code>gateway</code>。</p><p>敲完之后进行测试是没有问题的。</p><h2 id="设置静态路由表"><a href="#设置静态路由表" class="headerlink" title="设置静态路由表"></a>设置静态路由表</h2><p>再然后就是一个重启的问题，重启后路由表会被清空。我能找到的大部分资料是关于ubuntu和centos如何设置重启后依然生效的，而我是archlinux的树莓派。即使是arch的<a href="https://wiki.archlinux.org/title/Network_configuration_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">官方wiki</a>也只是提了下用<code>ip</code>指令设置静态路由表。</p><p>查阅的过程中我了解到我这种想法叫做<code>add static route</code>。顺着这条线索，我找到了一些论坛，他们指示我在<code>/etc/systemd/network</code>中修改相关文件。然后我进来发现只要个有线网的<code>eth0.network</code>文件。这时候arch的<a href="https://wiki.archlinux.org/title/Systemd-networkd_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">另一篇wiki</a>终于起作用了。</p><p>原来他们是用<code>systemd-networkd</code>管理网络的。配置文件是可以自己写的，参考其他的说明，我写了个<code>wlan0.network</code></p><pre><code class="highlight bash">[Match]Name=wlan0[Network]DHCP=<span class="built_in">yes</span>DNSSEC=no[Route]Gateway=10.162.255.254Destination=123.456.78.0/24[Route]Gateway=10.162.255.254Destination=10.0.0.0/8</code></pre><p>然后重启网络</p><pre><code class="highlight bash"><span class="built_in">sudo</span> systemctl restart systemd-networkd</code></pre><p>完成</p>]]></content>
      
      
      <categories>
          
          <category> Operation </category>
          
          <category> Network </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>折磨的ROS-in-arch（manjaro）</title>
      <link href="/Auto/b84eee2e/"/>
      <url>/Auto/b84eee2e/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>太痛了！</p><p>ROS官方推荐的是拿Ubuntu装ros，但是用过arch系的应该都回不去了吧（笑），刚好arch官方也有ROS的文档，ROS也有arch的推荐位，所以，拿我的manjaro装好啦。</p><p><a href="https://wiki.archlinux.org/title/ROS">官方文档</a></p><p>上面说有aur源，那只要一键安装就好了。</p><pre><code class="highlight bash">yay -Sy ros-melodic-desktop-full</code></pre><p>然后选一选就完了，好了，这篇文章水完了。</p><p>真要这么简单我就不至于写一篇文章来说这个了。记录下安装过程中的各种问题。</p><p>首先是ROS的发行版选择，说实话，我个人目前看不出来各个发行版有什么不同，至少不会有ubuntu和centos那样很明显的不同，而Arch提供了两个发行版<code>noetic</code>和<code>melodic</code>，对于ROS2，则只有一个<code>galactic</code>。这里讨论的是ROS1的安装，所以2就忽略了。我上面写的是melodic是因为当初在Ubuntu虚拟机上学ROS的时候就用的它，而且melodic其实也是个蛮好听的单词（狗头）。<strong>然后就出事了</strong>。</p><h1 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h1><h2 id="第一个坑，记不清了"><a href="#第一个坑，记不清了" class="headerlink" title="第一个坑，记不清了"></a>第一个坑，记不清了</h2><pre><code class="highlight bash">-- found pythoninterp: /usr/bin/python3 (found suitable version <span class="string">&quot;3.10.4&quot;</span>, minimum required is <span class="string">&quot;2&quot;</span>)</code></pre><p>后面还有两句，说是找不到python3.9的库，年代久远，找不到记录了。</p><p>这时候我尝试了更换python为3.9的版本，但是完全没有用，我也记不得咋解决的，就挺糟糕的。</p><p>写到这里的时候我想到要去把终端的输出存成日志，然后就发现了<code>script</code>这个命令，可以把终端的所有输出都存进文件。看样子记不起来的东西也能教会我什么，哈哈哈。</p><p>贴上<code>script</code>自动存储输出的代码片段，贴到zsh最下面就能跑了</p><pre><code class="highlight bash"><span class="keyword">if</span> [ ! -d ~/.local/log ];<span class="keyword">then</span>        <span class="built_in">mkdir</span> -p ~/.local/log<span class="keyword">fi</span><span class="comment"># make sure run in login-shell</span><span class="keyword">if</span> <span class="built_in">test</span> -t 0 ;<span class="keyword">then</span>        <span class="keyword">if</span> [ $(ps <span class="variable">$PPID</span> | grep -c script ) -eq 0 ];<span class="keyword">then</span>                <span class="built_in">local</span> name=~/.local/log/$(<span class="built_in">date</span> +%Y-%M-%d-%H-%M-%S$(<span class="built_in">tty</span> | sed <span class="string">&#x27;s/\//-/g&#x27;</span>))                script -q -t 2&gt;<span class="variable">$name</span>.<span class="keyword">time</span> -a <span class="variable">$name</span>.<span class="built_in">command</span>                <span class="built_in">exit</span>        <span class="keyword">fi</span><span class="keyword">fi</span></code></pre><h2 id="log4cxx的奇怪问题"><a href="#log4cxx的奇怪问题" class="headerlink" title="log4cxx的奇怪问题"></a>log4cxx的奇怪问题</h2><pre><code class="highlight bash">/usr/include/log4cxx/boost-std-configuration.h:10:18: error: ‘shared_mutex’ <span class="keyword">in</span> namespace ‘std’ does not name a <span class="built_in">type</span></code></pre><p>说是log4cxx的问题，官方bug，没有修好，解决方案在aur源评论区里：<a href="https://bugs.archlinux.org/task/71847">https://bugs.archlinux.org/task/71847</a></p><pre><code class="highlight cpp"><span class="comment">// change:</span><span class="meta">#<span class="keyword">define</span> STD_SHARED_MUTEX_FOUND 1</span><span class="meta">#<span class="keyword">define</span> Boost_SHARED_MUTEX_FOUND 0</span><span class="comment">// to:</span><span class="meta">#<span class="keyword">define</span> STD_SHARED_MUTEX_FOUND 0</span><span class="meta">#<span class="keyword">define</span> Boost_SHARED_MUTEX_FOUND 1</span></code></pre><p>然后编译就过了，具体讨论看上面网址。</p><h2 id="siq的语法错误"><a href="#siq的语法错误" class="headerlink" title="siq的语法错误"></a>siq的语法错误</h2><p>应该是python sip的版本问题</p><pre><code class="highlight bash">sip: /usr/lib/python3.10/site-packages/pyqt5/bindings/qtcore/qtcoremod.sip:23: syntax error</code></pre><p>aur源中对pyqt5的依赖为<code>python-pyqt5-sip4</code>，而不是直接的<code>python-pyqt5</code>。也就是之前<code>pip</code>安装过的<code>pyqt5</code>是用不了的。得用pip卸了先，然后让yay去处理依赖。</p><p>我在这里搜了一大堆教程，告诉我以后装python包不要用pip，要用yay之类的工具，这对于我这种pip习惯用户来说一开始有点不习惯。不过翻阅了arch的python文档之后，发现官方的要求是，所有pip安装的包都要加上<code>--usre</code>来确保不会与系统安装的包冲突。论看官方wiki的重要性。</p><h2 id="无效的python3-add-library"><a href="#无效的python3-add-library" class="headerlink" title="无效的python3_add_library"></a>无效的python3_add_library</h2><pre><code class="highlight bash">cmake error at /usr/lib64/cmake/pybind11/pybind11newtools.cmake:207 (python3_add_library):unknown cmake <span class="built_in">command</span> <span class="string">&quot;python3_add_library&quot;</span>.</code></pre><p>上面写的好像是<code>building pybinding interfaces</code>啥的。这里有个描述上来说非常完美相符的东西，但是没有给解决方案:<a href="https://github.com/OpenChemistry/avogadrolibs/issues/612">https://github.com/OpenChemistry/avogadrolibs/issues/612</a></p><p>然后我在这里卡了很久，因为<code>unknown command</code>的原因是之前需要定义一个什么python::python还是module，不过最后还是定位到正确的cmake文件应该在<code>/usr/lib/python3.10/site-packages/PyQt5/Qt5/lib</code>里面，斯，那为什么找到了<code>/usr/lib64</code>里面的<code>.cmake</code>文件。然后发现是之前手动装过<code>pybind11</code>这个包，这个包导致寻找文件的时候优先到<code>/usr/lib64</code>里去寻找了，所以把这个包删了，先让它去另一个位置里找链接库，然后后面再自动装回来就行了。</p><h2 id="gazebo对ffmpeg4的依赖"><a href="#gazebo对ffmpeg4的依赖" class="headerlink" title="gazebo对ffmpeg4的依赖"></a>gazebo对ffmpeg4的依赖</h2><p><a href="https://github.com/osrf/gazebo/issues/3180">https://github.com/osrf/gazebo/issues/3180</a>和这个描述一致，原因是系统默认使用了ffmpeg5而ROS要用ffmpeg4.4，这个issue下面有人提出了如何短暂使用ffmpeg4.4来保证编译顺利进行，其核心思想是跳过依赖检查，从而使得依赖能被顺利安装</p><pre><code class="highlight bash"><span class="built_in">sudo</span> pacman -Rd --nodeps ffmpeg <span class="comment"># (and any other ffmpeg you have installed, like the git version)</span><span class="built_in">sudo</span> pacman -S ffmpeg4.4yay -S gazebo<span class="built_in">sudo</span> pacman -S ffmpeg</code></pre><h2 id="opencv3-opt对ffmpeg4的依赖"><a href="#opencv3-opt对ffmpeg4的依赖" class="headerlink" title="opencv3-opt对ffmpeg4的依赖"></a>opencv3-opt对ffmpeg4的依赖</h2><p>编译melodic的过程中，发现它对一个叫<code>opencv3-opt</code>的老版本库有依赖，而这个库写的依赖是<code>ffmpeg</code>，但实际上需要的却是<code>ffmpege4.4</code>，当时我还没有碰到上面gazebo的那个问题，也没有意识到可以跳过依赖检查，当时索性就删掉了melodic已安装的包，换成了noetic。感觉上来说noetic有些包的依赖似乎却是比melodic处理地更好一些。这个问题的解决方法其实和上面那个是一样的。</p><h2 id="编译资源占用过多"><a href="#编译资源占用过多" class="headerlink" title="编译资源占用过多"></a>编译资源占用过多</h2><pre><code class="highlight bash">cc: fatal error: killed signal terminated program cc1</code></pre><p>如果你用的中文互联网搜索这个问题，那答案都是告诉你如何建立swap分区加内存。我也加了，但是编译还是通过不了。这个报错的核心是资源占用过多，导致编译所需资源过多时操作系统内核会把编译进场杀掉。一开始我也去看了ulimit之类的资源限制，但是其实已经给的很高了，我这好歹是16线程16G内存的电脑，不至于内存不够用吧。使用<code>free</code>和<code>top</code>监控资源后发现，大部分时间内存占用量根本不到2G。我想起来<code>makepkg</code>会默认使用所有的cpu core去编译文件，查了下<code>/etc/makepkg.conf</code>，发现还真是。我手动给它设置成了8核编译，虽然慢一点，但好歹能确保编译通过了。</p><pre><code class="highlight bash"><span class="comment">#MAKEFLAGS=&quot;-j$(($(nproc)+1))&quot;</span>MAKEFLAGS=<span class="string">&quot;-j8&quot;</span></code></pre><h2 id="python找不到链接符号"><a href="#python找不到链接符号" class="headerlink" title="python找不到链接符号"></a>python找不到链接符号</h2><p>历经千辛万苦加一次完全卸载（使用<code>yay -R $(yay -Qmq | grep ros)</code>+<code>yay -c</code>一次性删除所有ROS相关的包），最后一次安装堪称完美，一次</p><pre><code class="highlight bash">yay -S ros-noetic-desktop-full</code></pre><p>直接成功，跑<code>gazebo</code>好像也没问题</p><p>然后一跑<code>rosrun rqt_console rqt_console</code>就发现它报</p><pre><code class="highlight plaintext">python: symbol lookup error: /usr/lib/python3.10/site-packages/pyqt5/qt5/plugins/platforms/../../lib/libqt5waylandclient.so.5: undefined symbol: _zdlpvm, version qt_5</code></pre><p>这个问题当时在melodic也出现过，各种答案告诉我，你丫pyqt5没装对，不能用pip装。但是这回是真的用了yay了。又是一段漫长的折磨后，我突然想到，这玩意是运行时动态链接的，那是不是说明它没有被加载到动态链接库里去。于是我先是尝试写了个<code>/etc/ld.conf.d/qt.conf</code>的文件，然后刷新动态库，情况有一点点变化了，但是这个报错还在（意思就是在这个报错之上又多了点报错）。于是我又上网查，找到了一个添加<code>LD_LIBRARY_PATH</code>的方法，不过我找不到这个想法的来源了，有点难受。最后的解决方法我写在了这里<a href="https://stackoverflow.com/questions/62384480/symbol-lookup-error-after-updating-qt-package/71925946#71925946">https://stackoverflow.com/questions/62384480/symbol-lookup-error-after-updating-qt-package/71925946#71925946</a></p><p>核心思想就是把那个地址加入到动态库里</p><pre><code class="highlight bash"><span class="built_in">export</span> LD_LIBRARY_PAH=/usr/lib/python3.10/site-packages/PyQt5/Qt/lib:<span class="variable">$LD_LIBRARY_PATH</span></code></pre><p>然后我把这行写进了进入ros环境的脚本里（<code>/opt/ros/noetic/setup.sh</code>，注意，不是zsh，虽然zsh对于zsh用户来说也能用），就保证每次都能正常启动了。</p><h2 id="一点小小的优化"><a href="#一点小小的优化" class="headerlink" title="一点小小的优化"></a>一点小小的优化</h2><p>进入ros的指令是写死的</p><pre><code class="highlight bash"><span class="built_in">source</span> /opt/ros/noetic/setup.zsh</code></pre><p>为了进一步简化，我在<code>.zshrc</code>里加了一行</p><pre><code class="highlight bash"><span class="built_in">alias</span> <span class="string">&#x27;rosnow&#x27;</span>=<span class="string">&#x27;source /opt/ros/noetic/setup.zsh&#x27;</span></code></pre><p>这样就方便多啦。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>如果仔细想想，其实很多官方包的各种冲突还真不是官方的问题，这里面一部分要甩锅给manjaro，一部分是给自己。在配这份环境之前，我一直没有体会到manjaro和原生arch的区别，这下我是体会到了manjaro“为用户做选择”所带来的一些问题，我在这个过程中也一度想把manjaro删掉了换成arch（还好忍住了）。另一部分就是自己没有好好看arch wiki，导致有些冲突问题。除此之外，这次配环境也是在催促我要赶紧把备份系统搞上来，我居然还不敢来一场系统说换就换的旅行（）</p><p>反过来，也是学到了点东西，比如动态库的小知识，比如script这个好东西，还有献出了在<code>stackoverflow</code>上的首答。也许所有arch的用户都是这样吧，一边折磨自己，一边享受这份该死的自由。（这句话是不是要写个manjaro用户除外？，但我现在仍然是是manjaro用户，哈哈）</p>]]></content>
      
      
      <categories>
          
          <category> Auto </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>APUE（2）</title>
      <link href="/Language/Cpp/a113ba1f/"/>
      <url>/Language/Cpp/a113ba1f/</url>
      
        <content type="html"><![CDATA[<h1 id="Chapter4"><a href="#Chapter4" class="headerlink" title="Chapter4"></a>Chapter4</h1><p>这章主要讲文件和目录，上一章针对的是普通文件的I&#x2F;O，这章是各种奇奇怪怪的文件I&#x2F;O。</p><h2 id="各种stat"><a href="#各种stat" class="headerlink" title="各种stat"></a>各种stat</h2><pre><code class="highlight c"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span><span class="type">int</span> <span class="title function_">stat</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *<span class="keyword">restrict</span> pathname,<span class="keyword">struct</span> stat *<span class="keyword">restrict</span> buf)</span>;<span class="type">int</span> <span class="title function_">fstat</span><span class="params">(<span class="type">int</span> fd,<span class="keyword">struct</span> stat *buf)</span>;<span class="type">int</span> <span class="title function_">lstat</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *<span class="keyword">restrict</span> pathname,<span class="keyword">struct</span> stat *<span class="keyword">restrict</span> buf)</span>;<span class="type">int</span> <span class="title function_">fstatat</span><span class="params">(<span class="type">int</span> fd,<span class="type">const</span> <span class="type">char</span>* <span class="keyword">restrict</span> pathname,<span class="keyword">struct</span> stat *<span class="keyword">restrict</span> buf,<span class="type">int</span> flag)</span>;</code></pre><p>主要是会取得一个记录了各种信息的struct stat</p><h2 id="permission"><a href="#permission" class="headerlink" title="permission"></a>permission</h2><p>测试顺序</p><ol><li>uid是否为0</li><li>uid与owner符合，判断owner permission</li><li>gid与group owner符合，判断group permission</li><li>判断other permission</li></ol><h2 id="access"><a href="#access" class="headerlink" title="access"></a>access</h2><pre><code class="highlight c"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span><span class="type">int</span> <span class="title function_">access</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* pathname,<span class="type">int</span> mode)</span>;<span class="type">int</span> <span class="title function_">faccessat</span><span class="params">(<span class="type">int</span> fd,<span class="type">const</span> <span class="type">char</span>* pathname,<span class="type">int</span> mode,<span class="type">int</span> flag)</span>;</code></pre><p>return true if accessed</p><h2 id="umask"><a href="#umask" class="headerlink" title="umask"></a>umask</h2><pre><code class="highlight c"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span><span class="type">mode_t</span> <span class="title function_">umask</span><span class="params">(<span class="type">mode_t</span> cmask)</span>;</code></pre><p>return mode_t is the previous umask</p><h2 id="各种chmod"><a href="#各种chmod" class="headerlink" title="各种chmod"></a>各种chmod</h2><pre><code class="highlight c"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span><span class="type">int</span> <span class="title function_">chmod</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* pathname,<span class="type">mode_t</span> mode)</span>;<span class="type">int</span> <span class="title function_">fchmod</span><span class="params">(<span class="type">int</span> fd,<span class="type">mode_t</span> mode)</span>;<span class="type">int</span> <span class="title function_">fchmodat</span><span class="params">(<span class="type">int</span> fd,<span class="type">const</span> <span class="type">char</span> *pathname,<span class="type">mode_t</span> mode,<span class="type">int</span> flag)</span>;</code></pre><p>To change the permission bits of the file,the effective ID of the process must be equal to the owner ID of the file,or the process must have superuser permissions.</p><h2 id="各种chown"><a href="#各种chown" class="headerlink" title="各种chown"></a>各种chown</h2><pre><code class="highlight c"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span><span class="type">int</span> <span class="title function_">chown</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* pathname,<span class="type">uid_t</span> owner,<span class="type">git_t</span> group)</span>;<span class="type">int</span> <span class="title function_">fchown</span><span class="params">(<span class="type">int</span> fd,<span class="type">uid_t</span> owner,<span class="type">git_t</span> group)</span>;<span class="type">int</span> <span class="title function_">fchownat</span><span class="params">(<span class="type">int</span> fd,<span class="type">const</span> <span class="type">char</span>* pathname,<span class="type">uid_t</span> owner,<span class="type">git_t</span> group,<span class="type">int</span> flag)</span>;<span class="type">int</span> <span class="title function_">lchown</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* pathname,<span class="type">uid_t</span> owner,<span class="type">git_t</span> group)</span>;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
          <category> Cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 专栏：APUE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>维护自己的AUR源</title>
      <link href="/Operation/Linux/8d703467/"/>
      <url>/Operation/Linux/8d703467/</url>
      
        <content type="html"><![CDATA[<p>问：arch系和其他linux distribution最大的区别在哪？</p><p>答：arch有超棒的社区</p><p>其实也可以换个思路，arch系怕是只有社区，哈哈哈哈。当然，本文重点要提到的是arch的aur仓库。包管理工具家家都有，RHEL系的yum，deb系的apt，arch系同样也有pacman。但这种仓库一般都是官方维护，如果要添加自己的包的话，就有不少麻烦，之前了解过apt的自建ppa源，但是那玩意还要自己搭服务器，还有一堆认证，给我人整麻了。</p><p>这里就得看看aur了，aur有一个官方维护的<a href="https://aur.archlinux.org/">网站</a>。允许用户注册并上传自己的aur包。我在官网上查了查我的robocup2d项目，发现有人提过相关的包，比如核心组件<a href="https://aur.archlinux.org/packages/rcssserver">rcssserver</a>。但是看它的版本是15.5的版本，而现在rcssserver已经迭代到17了。这个包在官网上最新的comment是2015年，这个包最后一次更新在2018年，在2020年被标记为过期。然后这种包是通过二进制代码直接更新的，因此就要求更新人员每次更新都手动去下载新的包，这也让我萌生了去维护一个自己的源的想法。</p><p>翻了翻arch wiki，然后开干。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>先从“表面工作”开始吧，首先注册好arch账号然后登录，然后上传自己的ssh公钥。然后clone自己希望的包的地址，比如我想维护的包取名，就可以填<a href="ssh://aur@aur.archlinux.org/rcssserver-git.git">ssh://aur@aur.archlinux.org/rcssserver-git.git</a>。后面那个名字可以自己取，不过还是注意规范，因为我这个包是打算通过git自动更新的，所以就以<code>-git</code>结尾，这点在arch wiki上是有规范的。</p><p>clone成功的话，应该会得到一个空仓库，然后就是建立一个<code>PKGBUILD</code>文件。</p><h2 id="构建软件包"><a href="#构建软件包" class="headerlink" title="构建软件包"></a>构建软件包</h2><p>可以说任何一个aur源，甚至pacman源，都是通过这个叫<code>PKGBUILD</code>的文件定义的，官网wiki:<a href="https://wiki.archlinux.org/title/PKGBUILD_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">https://wiki.archlinux.org/title/PKGBUILD_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</a>。可以说是非常详细了，挑几个要点说明一下，以下是rcssserver-git的pkgbuild文件：</p><pre><code class="highlight bash"><span class="comment"># This is an example PKGBUILD file. Use this as a start to creating your own,</span><span class="comment"># and remove these comments. For more information, see &#x27;man PKGBUILD&#x27;.</span><span class="comment"># NOTE: Please fill out the license field for your package! If it is unknown,</span><span class="comment"># then please put &#x27;unknown&#x27;.</span><span class="comment"># The following guidelines are specific to BZR, GIT, HG and SVN packages.</span><span class="comment"># Other VCS sources are not natively supported by makepkg yet.</span><span class="comment"># Maintainer: Your Name &lt;youremail@domain.com&gt;</span>pkgname=rcssserver-git <span class="comment"># &#x27;-bzr&#x27;, &#x27;-git&#x27;, &#x27;-hg&#x27; or &#x27;-svn&#x27;</span>pkgver=17.0.1pkgrel=1pkgdesc=<span class="string">&quot;Robocup 2D simulator.&quot;</span><span class="built_in">arch</span>=(<span class="string">&#x27;any&#x27;</span>)url=<span class="string">&quot;https://github.com/rcsoccersim/rcssserver&quot;</span>license=(<span class="string">&#x27;GPL&#x27;</span>)<span class="built_in">groups</span>=(<span class="string">&#x27;rcss&#x27;</span>)depends=(<span class="string">&#x27;boost-libs&gt;=1.44&#x27;</span> <span class="string">&#x27;bison&#x27;</span> <span class="string">&#x27;flex&#x27;</span>)makedepends=(<span class="string">&#x27;git&#x27;</span>) <span class="comment"># &#x27;bzr&#x27;, &#x27;git&#x27;, &#x27;mercurial&#x27; or &#x27;subversion&#x27;</span>provides=(<span class="string">&quot;<span class="variable">$&#123;pkgname%-VCS&#125;</span>&quot;</span>)conflicts=(<span class="string">&quot;<span class="variable">$&#123;pkgname%-VCS&#125;</span>&quot;</span>)replaces=()backup=()options=()install=<span class="built_in">source</span>=(<span class="string">&#x27;rcssserver-git::git+https://github.com/rcsoccersim/rcssserver.git&#x27;</span>)noextract=()md5sums=(<span class="string">&#x27;SKIP&#x27;</span>)<span class="comment"># Please refer to the &#x27;USING VCS SOURCES&#x27; section of the PKGBUILD man page for</span><span class="comment"># a description of each element in the source array.</span><span class="function"><span class="title">pkgver</span></span>() &#123;<span class="built_in">cd</span> <span class="string">&quot;<span class="variable">$srcdir</span>/<span class="variable">$&#123;pkgname%-VCS&#125;</span>&quot;</span><span class="comment"># Git, tags available</span><span class="built_in">printf</span> <span class="string">&quot;%s&quot;</span> <span class="string">&quot;<span class="subst">$(git describe --tags | sed &#x27;s/rcssserver-//&#x27;)</span>&quot;</span>&#125;<span class="function"><span class="title">build</span></span>() &#123;<span class="built_in">cd</span> <span class="string">&quot;<span class="variable">$srcdir</span>/<span class="variable">$&#123;pkgname%-VCS&#125;</span>&quot;</span>./bootstrap./configure --prefix=/usrmake&#125;<span class="function"><span class="title">check</span></span>() &#123;<span class="built_in">cd</span> <span class="string">&quot;<span class="variable">$srcdir</span>/<span class="variable">$&#123;pkgname%-VCS&#125;</span>&quot;</span>make -k check&#125;<span class="function"><span class="title">package</span></span>() &#123;<span class="built_in">cd</span> <span class="string">&quot;<span class="variable">$srcdir</span>/<span class="variable">$&#123;pkgname%-VCS&#125;</span>&quot;</span>make DESTDIR=<span class="string">&quot;<span class="variable">$pkgdir</span>/&quot;</span> install&#125;</code></pre><p>先谈下怎么创建这个文件，如果是arch系用户，比如我是manjaro用户，在<code>/usr/share/pacman/</code>下有一堆模板文件，都可以看看。尤其对于我这种打算从VCS(version control system,like <code>git</code>)构建的，可以直接套<code>PKGBUILD-vsc.proto</code>，然后照着模板一步一步来就是了。然后注意这个文件的语法遵循bash语法，所以脚本人表示写的很开心。</p><p>指定多个依赖时，注意用空格隔开，因为这是奇奇怪怪没有脑袋的bash语法。就像这样<code>(&#39;git&#39; &#39;svn&#39;)</code></p><p>重点要提到的是版本号的问题，现在都推荐使用pkgver函数来更新版本了，只要在pkgver里想办法print出version number就行了。至于要print出什么样的版本号，那就可以自由发挥了，官方给的例子是使用<code>git describe --long</code>，但我实际写起来用了<code>git describe --tags</code>或者直接搜索<code>configure.ac</code>和<code>CMakeLists.txt</code>中的版本号。还有就是使用VCS模板的话，上面的<code>$&#123;pkgname%-VCS&#125;</code>是不用动的，会自动替换。</p><p>然后就是构建过程，有几个预定义的函数，用于在构建的不同阶段做不同的事情，只要其中有一步有error，整个构建过程都会结束，关于构建过程中的工作目录问题，建议自己看看wiki，有讲到各种目录的切换，以及目录的变量名。</p><h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><p>写好<code>PKGBUILD</code>之后就可以试试能不能编译过了，和<code>PKGBUILD</code>文件搭配的是<code>makepkg</code>指令。啥都不想的话，直接敲<code>makepkg</code>就完事了。<code>makepkg</code>有几个参数可以一块用一用。</p><p>然后就是makepkg会“假装”执行安装这一步，这步很精彩，建议细读wiki。makepkg会伪造一个root环境，然后把包安装进去，此时包并没有真正被安装到系统中去，而是被打包成了一个<code>.pkg.tar.zst</code>文件。接下来使用<code>sudo pacman -U *.pkg.tar.zst</code>就可以真正地把包安装到系统中去。这样安装的包是受<code>pacman</code>管理的。</p><h2 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h2><p>上传到aur仓库之前需要自己读一读arch wiki，看满足要求没有。这里写一写简洁的上传流程。</p><p>首先是使用<code>makepkg --printsrcinfo &gt; .SRCINFO</code>。这个<code>.SRCINFO</code>是上传必须的，也是由<code>makepkg</code>读<code>PKGBUILD</code>自动生成的。如果你听了上面说的，用pkgver来自动更新版本号的话，你还得先跑一跑<code>makepkg -si</code>来调用pkgver更新<code>PKGBUILD</code>中的版本号，然后再生成<code>.SRCINFO</code>文件。接下来就可以<code>git add PKGBUILD .SRCINFO</code>然后<code>commit</code>并push，如果条件都满足，自然会上传成功的。如果失败，无非就那么几个原因：</p><ul><li>ssh公钥</li><li><code>.SRCINFO</code>格式</li><li>git add了奇奇怪怪的东西</li></ul><p><em>注意：<code>.SRCINFO</code>必须存在于每一次commit（尤其是第一次commit）里。</em></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>aur的收录速度应该是非常快的，很快就可以用aur工具，比如yay来更新自己的包了，就像我现在只需<code>yay -S rcssserver-git</code>就可以安装或者更新这款软件了。在aur官网上，你也可以看看别人提交了什么好玩的包，并给别人留下评论，或是给某个好用的社区包投票（vote），也可以看看别人的<code>PKGBUILD</code>是怎么写的，看看别人的规范，甚至可以绕过pacman，参考<code>PKGBUILD</code>来直接构建软件。更多社区包的机制可以参考arch wiki，比如投票够多就可以从aur选入community之类的</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>贴上我的aur包，如果有使用arch系来运行Robocup2D项目的小伙伴（应该没有，哈哈哈），欢迎使用下面这些包：</p><pre><code class="highlight bash">yay -S librcsc-git rcssserver-git rcssmonitor soccerwindow2-git fedit2-git</code></pre><p>都是git源码构建，所以安装的时候再看看版本号好了，总之永远都是最新的，不打算做回滚。</p><p>最后感慨一句，aur真好用，我反正已经将我的所有软件都用pacman管理起来了，这样升级也好，卸载也好，都很方便。这次只是拿冷门项目练练手，以后如果有自己的软件要认真维护的话，还要考虑更新日志和自动更新之类的一系列功能。</p>]]></content>
      
      
      <categories>
          
          <category> Operation </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> aur </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebSoccerMonitor</title>
      <link href="/Auto/93340145/"/>
      <url>/Auto/93340145/</url>
      
        <content type="html"><![CDATA[<p>之前看到了一个巴西小伙（也有可能是大哥？）的<a href="https://github.com/robocin/WebSoccerMonitor">项目</a></p><p>目的是做一个浏览器上的robocup 2d的monitor。他用的是ts写成的后端，掺了点py。目前已经完成的功能有通过拖拽录像文件来播放比赛的回放。打开它的issue发现，作者希望能实现一个实时的前端，我这里搭好node环境之后试用了一下，感觉ui还挺漂亮，就是没有实时功能确实有点难受。聊完之后作者表示希望这是个纯前端项目，最好只要个浏览器就能跑。当时解析rcssserver的monitor协议是个比较难受的问题，然后刚好server即将支持json格式，所以就一直在等。</p><p>等到rcssserver出version17的时候（它刚出两个小时我就更新了，然后发现了俩头文件的缺失……，提了issue后又过了两个小时出了个补丁版本），终于有json格式的协议了。然后我就开始写demo啦。然后我就发现了一个史诗级的困难。rcssserver只支持udp协议，并且和代码结合的挺深，虽然有tcp的类，但是没法用。而浏览器则是完全没法用udp，于是我就开始尝试找一个能用的协议，顺便把问题提给了巴西小伙。一天之后我们出奇地达成了一致，就是让rcssserver支持WebRTC协议，巴西小伙比较猛，直接找rcssserver的维护者秋山大神对线。秋山大神说还是写个proxy比较好，这点我也发现了，甚至写好了第一个proxy的demo。但这还远远不够，因为浏览器还需要各种各样的应用层协议。我也问了秋山能不能他直接把proxy集成到rcssserver里，秋山表示这样的代价太大了，没有必要，不如另外开发一款软件，以让rcss系统的软件更加“模块化”。</p><p>所以我就先开写啦，项目在<a href="https://github.com/kawhicurry/WebSoccerMonitor-plain">这里</a>。</p><p>我的思路是先将udp转成tcp协议，然后在应用层使用WebSocket协议将数据转发至浏览器。语言选择的是python，因为想要“快速开发”，但python真的是个***********的语言。写了三个版本之后终于有一个勉强能用的了：</p><pre><code class="highlight python"><span class="comment">#!/usr/bin/env python3</span><span class="keyword">import</span> asyncio<span class="keyword">import</span> websockets<span class="keyword">import</span> socket<span class="keyword">import</span> _threadudp = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)init_message = <span class="string">&#x27;(dispinit version 5)&#x27;</span>udp.sendto(init_message.encode(<span class="string">&#x27;utf-8&#x27;</span>), (<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">6000</span>))<span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">web</span>(<span class="params">websocket</span>):    msg = <span class="keyword">await</span> websocket.recv()<span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">serve</span>(<span class="params">websocket</span>):    <span class="keyword">while</span> <span class="literal">True</span>:        message = udp.recv(<span class="number">40960</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)[:-<span class="number">1</span>]        <span class="keyword">await</span>(websocket.send(message))<span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():    <span class="keyword">async</span> <span class="keyword">with</span> websockets.serve(serve, <span class="string">&#x27;localhost&#x27;</span>, <span class="number">7000</span>):        <span class="keyword">await</span> asyncio.Future()<span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:    asyncio.run(main())</code></pre><p>主要是websockets相关的api和函数比较令人难受，但手动实现也有各种各样奇怪的问题，终究是有点难受。然后async&#x2F;await的协程其实也挺痛苦，因为我是想写多线程……，这个proxy，与其说是proxy，不如说是另一个server（好像所有proxy都是某个server？）。总之代理这边搞定了，然后就是web前端，同样是为了快速开发，直接一个html把所有东西都include了。主要的js代码如下</p><pre><code class="highlight javascript">socket = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&#x27;ws://localhost:7000&#x27;</span>);   socket.<span class="property">onopen</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;connect success&#x27;</span>);   &#125;   socket.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;     <span class="comment">//console.log(&#x27;message received&#x27;, event.data);</span>     <span class="keyword">const</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(event.<span class="property">data</span>)     <span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;pitch&#x27;</span>)     <span class="keyword">if</span> (data.<span class="property">type</span> == <span class="string">&quot;show&quot;</span>) &#123;       <span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>)       <span class="comment">//clear</span>       <span class="comment">//ctx.height = ctx.height</span>       ctx.<span class="property">globalCompositeOperation</span> = <span class="string">&quot;copy&quot;</span>;       <span class="title function_">pitch</span>()       <span class="comment">//ball</span>       ctx.<span class="title function_">beginPath</span>();       ctx.<span class="title function_">arc</span>(data.<span class="property">ball</span>.<span class="property">x</span> * rate + canvas.<span class="property">width</span> / <span class="number">2</span>, data.<span class="property">ball</span>.<span class="property">y</span> * rate + canvas.<span class="property">height</span> / <span class="number">2</span>, <span class="variable constant_">BALL_SIZE</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="title class_">Math</span>.<span class="property">PI</span>, <span class="literal">true</span>);       ctx.<span class="property">fillStyle</span> = <span class="string">&quot;#FF0000&quot;</span>       ctx.<span class="title function_">fill</span>()       ctx.<span class="title function_">closePath</span>();       <span class="comment">//player</span>       <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.<span class="property">players</span>.<span class="property">length</span>; i++) &#123;         ctx.<span class="title function_">beginPath</span>();         ctx.<span class="title function_">arc</span>(data.<span class="property">players</span>[i].<span class="property">x</span> * rate + canvas.<span class="property">width</span> / <span class="number">2</span>, data.<span class="property">players</span>[i].<span class="property">y</span> * rate + canvas.<span class="property">height</span> / <span class="number">2</span>, <span class="variable constant_">PLAYER_WIDGET_SIZE</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="title class_">Math</span>.<span class="property">PI</span>, <span class="literal">true</span>)         <span class="keyword">if</span> (data.<span class="property">players</span>[i].<span class="property">side</span> == <span class="string">&quot;l&quot;</span>) &#123;           ctx.<span class="property">fillStyle</span> = <span class="string">&quot;#FFFF00&quot;</span>         &#125; <span class="keyword">else</span> &#123;           ctx.<span class="property">fillStyle</span> = <span class="string">&quot;#00FFFF&quot;</span>         &#125;         ctx.<span class="title function_">fill</span>()         ctx.<span class="title function_">closePath</span>();       &#125;     &#125;   &#125;   socket.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;socket error&quot;</span>);   &#125;   socket.<span class="property">onclose</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;websocket 断开: &#x27;</span> + e.<span class="property">code</span> + <span class="string">&#x27; &#x27;</span> + e.<span class="property">reason</span> + <span class="string">&#x27; &#x27;</span> + e.<span class="property">wasClean</span>)     <span class="variable language_">console</span>.<span class="title function_">log</span>(e)   &#125;</code></pre><p>首先是websocket，让它网页打开时自动和proxy建立链接。其实一开始想的是点击按钮实现链接，发现好难用，还是网页加载时直接链接好一点。</p><p>然后就是解析json格式，果然这就到了js最擅长的地方，直接一个<code>JSON.parse()</code>就带走了。</p><p>再然后就是绘制球场，这里参考了原来的<code>WebSoccerMonitor</code>项目，用了canvas（不过好像canvas确实是最好的选择了？）。首先是用canvas画一个足球场，先在网上找了个模板，然后拿下来魔改了一下，然后把<code>rcssserver</code>的C++代码里的各种场地边线的数据copy进来，改成js格式，最后把整个球场的绘图函数丢到一个单独的函数里，在网页打开时就绘制好。然后把球员和球的绘图代码丢到WebSocket的onmessage事件监听handler里，这样就能动态更新球和球员的位置。</p><p>好像这么多就够了，代码能跑了（bushi</p><p>记录下学到的各种奇奇怪怪的东西吧</p><ol><li>协程究竟是个啥玩意</li><li>python的协程async&#x2F;await机制</li><li>websocket协议，尤其是Ack-key的机制</li><li>JS的事件机制</li><li>python的多线程</li><li>canvas真好玩</li></ol><p>写了这么久python和JS，感觉还是想拿Cpp试试，毕竟cpp是真的啥都能写。话说回去，拿python也没能手动实现WebSockets协议，只能说缺的不是一点cpp能力，计网和OS的能力也很缺。又又又是任重道远的一天。</p>]]></content>
      
      
      <categories>
          
          <category> Auto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> robocup </tag>
            
            <tag> front </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>APUE（1）</title>
      <link href="/Language/Cpp/b3a615f1/"/>
      <url>/Language/Cpp/b3a615f1/</url>
      
        <content type="html"><![CDATA[<h1 id="3-File-I-O"><a href="#3-File-I-O" class="headerlink" title="3 File I&#x2F;O"></a>3 File I&#x2F;O</h1><p>直接从第三章开始好了，文件I&#x2F;O</p><p>本章的任务是，用各种各样的方式来读写文件</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><code>File Descriptor</code>：non-negative integer, managed by kernel</p><ul><li>0 : stdin</li><li>1 : stdout</li><li>2 : stderr</li></ul><h2 id="open"><a href="#open" class="headerlink" title="open"></a>open</h2><p>open函数和它的flag们在<code>&lt;fcntl.h&gt;</code>里，话说这个头文件为啥叫这个。</p><p>open有俩参数，一个path，一个是oflag，但那个flag是vary argument。</p><p>oflag有5个必选参数和一堆option。</p><p>os会保证open和openat获得的fd尽可能小。</p><h3 id="openat"><a href="#openat" class="headerlink" title="openat"></a>openat</h3><p>那openat是干啥的。openat的第一个参数是个fd，后面都一样。使用openat有三种情况（possibility）：</p><ul><li>指定path时使用了绝对路径，这时候fd会被忽略，fd有跟没有一样，at跟没at一样。</li><li>指定path时使用了相对路径，fd指定了从哪里开始计算文件的最终位置。即：从一个拥有的fd开始，加上相对路径来得到最终文件的位置</li><li>指定path时使用了相对路径，并且fd使用了一个特殊值<code>AT_FDCWD</code>。这个时候，文件名会从当前工作目录开始计算。除此之外和open没有区别。即，从工作目录开始，加上相对路径，得到最终文件位置。</li></ul><p>话说这个宏的展开是什么？</p><p>openat主要用来解决两个问题，一个是多线程下的相对路径引用问题，一个是time-of-check-to-time-of-use errors。（表示不是很理解这个问题，哪天再看到再来补充）</p><h3 id="filename-and-pathname-truncation"><a href="#filename-and-pathname-truncation" class="headerlink" title="filename and pathname truncation"></a>filename and pathname truncation</h3><p>其实就是文件名过长时，os怎么处理的问题，无非两种方法：</p><ul><li>抛个异常</li><li>返回一个截断的文件名</li></ul><p>这玩意要看os怎么想，但是posix给了个<code>_POSIX_NO_TRUNC</code>的宏来判断其行为。这个macro在<code>&lt;unistd.h&gt;</code>里</p><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><pre><code class="highlight c"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;    <span class="type">int</span> fd  = open(<span class="string">&quot;3.txt&quot;</span>, O_RDONLY);    <span class="type">int</span> fd2 = openat(AT_FDCWD, <span class="string">&quot;3.txt&quot;</span>, O_RDONLY);    <span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>, fd, fd2);    <span class="keyword">return</span> <span class="number">0</span>;&#125;</code></pre><h2 id="creat"><a href="#creat" class="headerlink" title="creat"></a>creat</h2><p>首先，这是<code>creat</code>不是<code>create</code>。然后，这玩意好像可以用来实现一个touch指令诶。</p><p>creat也在<code>&lt;fcntl.h&gt;</code>里。它和open的<code>O_WRONLY</code>,<code>O_CREATE</code>,<code>O_TRUNC</code>这几个flag等价。以前的open不能打开不存在的文件，所以才有了这个函数，不然为啥不直接上open呢。</p><p>creat的第一个参数为路径，第二个为模式，与权限相关。</p><p>用open吧，别看了，反正作者也没写（</p><h2 id="close"><a href="#close" class="headerlink" title="close"></a>close</h2><p>众所周知，文件有开有关</p><p>close在<code>&lt;unistd.h&gt;</code>下，woc，为啥和open不在一个头文件？</p><p>close只接受一个fd参数。如果ok，return 0.不过就算不手动调用，os也会在程序结束的时候自动回收fd的，除非想写daemon。</p><h2 id="lseek"><a href="#lseek" class="headerlink" title="lseek"></a>lseek</h2><p>每个打开的文件都会有的<code>current file offset</code>，也是个non-negative integer。都是相对于<code>beginning of the file</code></p><pre><code class="highlight c"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span><span class="type">off_t</span> <span class="title function_">lseek</span><span class="params">(<span class="type">int</span> fd,<span class="type">off_t</span> offset,<span class="type">int</span> whence)</span>;</code></pre><p>whence:from what place or source.有三种</p><ul><li>SEEK_SET 文件开头+offset</li><li>SEEK_CUR 当前位置+offset，offset可正可负</li><li>SEEK_END 文件尾+offset，offset可正可负</li></ul><p>lseek里面的l是long integer的意思，因为以前lseek的return是个long integer，后来有了struct off_t</p><h3 id="hole"><a href="#hole" class="headerlink" title="hole"></a>hole</h3><p>可以把offset移动到比文件大小更大的地方，然后进行写操作，中间空缺的部分会用0补齐</p><pre><code class="highlight c"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span><span class="meta">#<span class="keyword">define</span> err_sys perror</span><span class="type">char</span> buf1[] = <span class="string">&quot;abcdefghij&quot;</span>;<span class="type">char</span> buf2[] = <span class="string">&quot;ABCDEFGHIJ&quot;</span>;<span class="type">int</span>  <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;    <span class="type">int</span> fd;    <span class="keyword">if</span>((fd = creat(<span class="string">&quot;file.hole&quot;</span>, O_RDWR)) &lt; <span class="number">0</span>) err_sys(<span class="string">&quot;creat error&quot;</span>);    <span class="keyword">if</span>(write(fd, buf1, <span class="number">10</span>) != <span class="number">10</span>) err_sys(<span class="string">&quot;buf1 write error&quot;</span>);    <span class="comment">/* offset now = 10 */</span>    <span class="keyword">if</span>(lseek(fd, <span class="number">16384</span>, SEEK_SET) == <span class="number">-1</span>) err_sys(<span class="string">&quot;lseek error&quot;</span>);    <span class="comment">/* offset now = 16384 */</span>    <span class="keyword">if</span>(write(fd, buf2, <span class="number">10</span>) != <span class="number">10</span>) err_sys(<span class="string">&quot;buf2 write error&quot;</span>);    <span class="comment">/* offset now = 16394 */</span>    <span class="built_in">exit</span>(<span class="number">0</span>);&#125;</code></pre><pre><code class="highlight bash">$ gcc hole.c$ ./a.out$ <span class="built_in">ls</span> -l file.hole-rwxr--r-x 1 kawhicurry kawhicurry 16394 Apr  6 13:48 file.hole$ <span class="built_in">od</span> -c file.hole0000000   a   b   c   d   e   f   g   h   i   j  \0  \0  \0  \0  \0  \00000020  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0*0040000   A   B   C   D   E   F   G   H   I   J0040012</code></pre><p>offset 有两种模式，32位和64位，有一堆POSIX的宏可以用来指定模式</p><h2 id="read"><a href="#read" class="headerlink" title="read"></a>read</h2><pre><code class="highlight c"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span><span class="type">ssize_t</span> <span class="title function_">read</span><span class="params">(<span class="type">int</span> fd,<span class="type">void</span> *buf,<span class="type">size_t</span> nbytes)</span>;</code></pre><p>当需要的bytes比实际读到的bytes多的时候，有几种情况</p><ul><li>提前碰到EOF，返回实际读到的bytes数</li><li>从terminal读入，多于一行的bytes被读入</li><li>从网络I&#x2F;O读入，buffer中内容比实际需要的少</li><li>从pipe或FIFO读入</li><li>从record-oriented device读入</li></ul><p>以前的prototype长这样</p><pre><code class="highlight c"><span class="type">int</span> <span class="title function_">read</span><span class="params">(<span class="type">int</span> fd, <span class="type">char</span> *buf, <span class="type">unsigned</span> nbytes)</span>;</code></pre><ul><li>char* 后来按照ISO标准被替换为void*，用来接受各种pointer</li><li>返回值被换为ssize_t，就是signed size_t</li><li>第三个参数后来就是size_t了,这玩意用来跨平台，不过一般是unsigned int的typedef</li></ul><h2 id="write"><a href="#write" class="headerlink" title="write"></a>write</h2><pre><code class="highlight c"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span><span class="type">ssize_t</span> <span class="title function_">write</span><span class="params">(<span class="type">int</span> fd,<span class="type">const</span> <span class="type">void</span> *buf,<span class="type">size_t</span> nbytes)</span>;</code></pre><p>只有return value等于size_t的时候，才算正常write</p><p>write会在文件的current offset开始写</p><h2 id="I-O-Efficiency"><a href="#I-O-Efficiency" class="headerlink" title="I&#x2F;O Efficiency"></a>I&#x2F;O Efficiency</h2><p>其实这是个考虑buffer长度的topic，读大文件（或者其他输入）的时候，多大的buffer比较合适？</p><p>然后作者没给答案，说是晚点回来看看。不过从数据来看，buffer开大点好，因为cpu有read-ahead to improve performance。当buffer超过4096（实际上是st_blksize的值）时，提升就不大了。</p><h2 id="File-Sharing"><a href="#File-Sharing" class="headerlink" title="File Sharing"></a>File Sharing</h2><ol><li>每个process有个process table entry，记录了自己持有的fd</li><li>kernel持有所有open file的file table，内容包括</li></ol><ul><li>status flag: read,write,append,sync,nonblocking</li><li>current file offset</li><li>pointer to the v-node table entry for the file</li></ul><ol start="3"><li>每个open file都有个v-node structure，包括</li></ol><ul><li>type of file</li><li>pointer to functions that operate on the file</li><li>对于大多数文件，还有个i-node</li></ul><h2 id="Atomic-Operation"><a href="#Atomic-Operation" class="headerlink" title="Atomic Operation"></a>Atomic Operation</h2><p>The operation that requires only one function calls(steps)</p><p>这一节是用来描述，多个process不适用append来进行文件追加的后果</p><p>一些atomic operation：</p><ul><li>open with O_APPEND</li><li>pread and pwrite : substitute lseek followed by read</li><li>open with both O_CREATE and O_EXCL : substitute simply creat</li></ul><h2 id="dup-and-dup2"><a href="#dup-and-dup2" class="headerlink" title="dup and dup2"></a>dup and dup2</h2><pre><code class="highlight c"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span><span class="type">int</span> <span class="title function_">dup</span><span class="params">(<span class="type">int</span> fd)</span>;<span class="type">int</span> <span class="title function_">dup2</span><span class="params">(<span class="type">int</span> fd,<span class="type">int</span> fd2)</span>;</code></pre><p>new descriptor returned by dup is guaranteed to be the lowest-numbered available fd.</p><p>dup2可以用fd2指定一个复制后你想要得到的fd参数，如果fd2打开了，fd2会被关掉，如果fd等于fd2，dup2会返回fd2。除此之外，fd2的FD_CLOEXEC宏会被清楚，以让fd2保持open。（除此之外后面的看不懂了，后面回来看看）</p><p>dup是fcntl函数的某种特例，后面回来看看。</p><pre><code class="highlight c"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;    <span class="type">char</span> buf[<span class="number">1024</span>];    <span class="type">int</span>  newfd = dup(<span class="number">1</span>);    read(<span class="number">0</span>, buf, <span class="number">10</span>);    write(newfd, buf, <span class="number">10</span>);&#125;</code></pre><h2 id="sync-fsync-fdatasync"><a href="#sync-fsync-fdatasync" class="headerlink" title="sync fsync fdatasync"></a>sync fsync fdatasync</h2><pre><code class="highlight c"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span><span class="type">int</span> <span class="title function_">fsync</span><span class="params">(<span class="type">int</span> fd)</span>;<span class="type">int</span> <span class="title function_">fdatasync</span><span class="params">(<span class="type">int</span> fd)</span>;<span class="type">void</span> <span class="title function_">sync</span><span class="params">(<span class="type">void</span>)</span>;</code></pre><p>强制写入磁盘</p><h2 id="fcntl"><a href="#fcntl" class="headerlink" title="fcntl"></a>fcntl</h2><blockquote><p>The fcntl function can change the properties of a file that is already open.</p></blockquote><pre><code class="highlight c"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span><span class="type">int</span> <span class="title function_">fcntl</span><span class="params">(<span class="type">int</span> fd,<span class="type">int</span> cmd,...)</span>;</code></pre><p>purpose:</p><ol><li>duplicated an existing descriptor(cmd&#x3D;F_DUPFD or F_DUPFD_CLOEXEC)</li><li>get&#x2F;set fd flags(cmd&#x3D;F_GETFD or F_SETFD)</li><li>get&#x2F;set file status flags(cmd&#x3D;F_GETFL or F_SETFL)</li><li>get&#x2F;set asynchronous I&#x2F;O ownership(cmd&#x3D;F_GETOWN or F_SETOWN)</li><li>get&#x2F;set recode locks(cmd&#x3D;F_GETLK,F_SETLK or F_SETLKW)</li></ol><h2 id="ioctl"><a href="#ioctl" class="headerlink" title="ioctl"></a>ioctl</h2><pre><code class="highlight c"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span><span class="type">int</span> <span class="title function_">ioctl</span><span class="params">(<span class="type">int</span> fd,<span class="type">int</span> request,...)</span>;</code></pre><p>Terminal I&#x2F;O</p><h2 id="dev-fd"><a href="#dev-fd" class="headerlink" title="&#x2F;dev&#x2F;fd"></a>&#x2F;dev&#x2F;fd</h2><p>open the file in <code>/dev/fd</code> is equivalent to duplicating descriptor n,assuming that descriptor n is open</p>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
          <category> Cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 专栏：APUE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>APUE（0）</title>
      <link href="/Language/Cpp/b1a7294/"/>
      <url>/Language/Cpp/b1a7294/</url>
      
        <content type="html"><![CDATA[<h1 id="开坑！"><a href="#开坑！" class="headerlink" title="开坑！"></a>开坑！</h1><p>用task的方式看（啃）完这本书</p>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
          <category> Cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 专栏：APUE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于学习C++</title>
      <link href="/Language/Cpp/eb74c786/"/>
      <url>/Language/Cpp/eb74c786/</url>
      
        <content type="html"><![CDATA[<p>记录下最近遇到的麻烦。</p><p>最近开始啃effective和apue。看effective的感觉就是，哇，好有道理，然后忘记。看apue的感觉就像是，嗷，有这么个api，然后忘记。</p><p>果然不写代码还是要出问题，还是得找点东西来写写。试一试好了。用设置task的方法来看看apue，至于effective，应该写着写着就会了吧（笑）</p>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
          <category> Cpp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>effective（8）</title>
      <link href="/Language/Cpp/dd90e0f4/"/>
      <url>/Language/Cpp/dd90e0f4/</url>
      
        <content type="html"><![CDATA[<h1 id="49-了解new-handler的行为"><a href="#49-了解new-handler的行为" class="headerlink" title="49 了解new-handler的行为"></a>49 了解new-handler的行为</h1><ul><li>set_new_handler允许客户指定一个函数，在内存分配无法获得满足时被调用</li><li>Nothrow new是一个颇为局限的工具，因为它只适用于内存分配，后继的构造函数调用还是可能抛出异常</li></ul><h1 id="50-了解new和delete的合理替换时机"><a href="#50-了解new和delete的合理替换时机" class="headerlink" title="50 了解new和delete的合理替换时机"></a>50 了解new和delete的合理替换时机</h1><ul><li>为了检测运用错误</li><li>为了收集动态分配内存之使用统计信息</li><li>为了增加分配和归还的速度</li><li>为了降低缺省内存管理器带来的空间额外开销</li><li>为了弥补缺省分配器中的非最佳齐位</li><li>为了将相关对象成簇集中</li><li>为了获得非传统行为</li></ul><h1 id="51-编写new和delete时需固收常规"><a href="#51-编写new和delete时需固收常规" class="headerlink" title="51 编写new和delete时需固收常规"></a>51 编写new和delete时需固收常规</h1><ul><li>看不懂了，再学学计算机体系再来</li></ul><h1 id="52-略"><a href="#52-略" class="headerlink" title="52 略"></a>52 略</h1>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
          <category> Cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
            <tag> 专栏：effective c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>effective（7）</title>
      <link href="/Language/Cpp/85f3f0a2/"/>
      <url>/Language/Cpp/85f3f0a2/</url>
      
        <content type="html"><![CDATA[<h1 id="本章为模板编程内容，等决定要好好学模板了再来看看"><a href="#本章为模板编程内容，等决定要好好学模板了再来看看" class="headerlink" title="本章为模板编程内容，等决定要好好学模板了再来看看"></a>本章为模板编程内容，等决定要好好学模板了再来看看</h1>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
          <category> Cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
            <tag> 专栏：effective c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>effective（6）</title>
      <link href="/Language/Cpp/3d4f97c7/"/>
      <url>/Language/Cpp/3d4f97c7/</url>
      
        <content type="html"><![CDATA[<h1 id="32-确定你的public继承塑膜出is-a关系"><a href="#32-确定你的public继承塑膜出is-a关系" class="headerlink" title="32 确定你的public继承塑膜出is-a关系"></a>32 确定你的public继承塑膜出is-a关系</h1><ul><li>public继承意味着<code>is-a</code>。适用于base classes身上的每一件事情一定也适用于derived classed身上，因为每一个derived classes对象也都是（is-a）一个base class对象</li></ul><h1 id="33-避免遮掩继承而来的名称"><a href="#33-避免遮掩继承而来的名称" class="headerlink" title="33 避免遮掩继承而来的名称"></a>33 避免遮掩继承而来的名称</h1><ul><li>derived classes内的名称会遮掩base classed内的名称。在public继承下从来没有人希望如此</li><li>为了让被遮掩的名称再见天日，可使用using声明式或转交函数（forwarding functions）</li></ul><h1 id="34-区分接口继承和实现继承"><a href="#34-区分接口继承和实现继承" class="headerlink" title="34 区分接口继承和实现继承"></a>34 区分接口继承和实现继承</h1><ul><li>接口继承和实现继承不同。在public继承之下，derived classes总是继承base class的接口</li><li>pure virtual函数只具体指定接口继承</li><li>简朴的（非纯）impure virtual函数具体指定接口继承及缺省实现继承</li><li>non-virtual函数具体指定接口以及强制性实现继承</li></ul><h1 id="35-考虑virtual函数以外的其他选择"><a href="#35-考虑virtual函数以外的其他选择" class="headerlink" title="35 考虑virtual函数以外的其他选择"></a>35 考虑virtual函数以外的其他选择</h1><p>几个方案</p><ul><li><p>使用non-virtual interface（NVI）手法，那是Template Method设计模式的一种特殊形式。它以public non-virtual成员函数包裹较低访问性（private或protected）的virtual函数</p></li><li><p>将virtual函数替换为“函数指针成员变量”，这是strategy设计模式的一种分解表现形式</p></li><li><p>以tr1:function成员变量替换virtual函数，因而允许使用任何可调用物（callable entity）搭配一个兼容于需求的签名式。这也是Strategy设计模式的某种形式</p></li><li><p>将继承体系内的virtual函数替换为另一个继承体系内的virtual函数，这是Stragegy设计模式的传统实现手法</p></li><li><p>virtual函数的替代方案包括NVI手法及Strategy设计模式的多种形式。NVI手法自身是一个特殊形式的Template Method设计模式</p></li><li><p>将机能从成员函数转移到class外部函数，带来的一个缺点是，非成员函数无法访问class的non-public成员</p></li><li><p>tr1::function对象的行为就像一般函数指正。这样的对象可接纳“与给定之目标签名式（target signature）兼容”的所有可调用物（callable entities）</p></li></ul><h1 id="36-绝不重新定义继承而来的non-virtual函数"><a href="#36-绝不重新定义继承而来的non-virtual函数" class="headerlink" title="36 绝不重新定义继承而来的non-virtual函数"></a>36 绝不重新定义继承而来的non-virtual函数</h1><ul><li>绝对不要重新定义继承而来的nono-virtual函数</li></ul><h1 id="37-绝不重新定义继承而来的缺省参数值"><a href="#37-绝不重新定义继承而来的缺省参数值" class="headerlink" title="37 绝不重新定义继承而来的缺省参数值"></a>37 绝不重新定义继承而来的缺省参数值</h1><ul><li>绝对不要重新定义一个继承而来的缺省参数值，因为缺省参数值都是静态绑定，而virtual函数–你唯一应该覆写的东西，却是动态绑定</li></ul><h1 id="38-通过符合塑膜出has-a或根据某物实现出"><a href="#38-通过符合塑膜出has-a或根据某物实现出" class="headerlink" title="38 通过符合塑膜出has-a或根据某物实现出"></a>38 通过符合塑膜出has-a或根据某物实现出</h1><ul><li>符合（composition）的意义和public继承完全不同</li><li>在应用域（application domain），符合意味着has-a（有一个）。在具体域（implementation domain），复合意味着is-implemented-in-terms-of（根据某物实现出）</li></ul><h1 id="39-明智而审慎地使用private继承"><a href="#39-明智而审慎地使用private继承" class="headerlink" title="39 明智而审慎地使用private继承"></a>39 明智而审慎地使用private继承</h1><ul><li>private继承意味着is-implemented-in-terms-of。它通常比复合的程度低。但是当derived class需要访问protected base class的成员，或需要重新定义继承而来的virtual函数时，这么设计是合理的</li><li>和复合不同，private继承可以造成empty base最优化。这对致力于“对象尺寸最小化”的程序库开发者而要，可能很重要</li></ul><h1 id="40-明智而审慎地使用多重继承"><a href="#40-明智而审慎地使用多重继承" class="headerlink" title="40 明智而审慎地使用多重继承"></a>40 明智而审慎地使用多重继承</h1><ul><li>多重继承比单一继承复杂。它可能导致新的歧义性，以及对virtual继承的需要</li><li>virtual继承会增加大小、速度、初始化（及赋值）复杂度等等成本。如果virtual base clased不带任何数据，将是最具实用价值的情况</li><li>多重继承的确有正当用途。其中一个情节设计“public继承某个interface class”和“private继承某个协助实现的class”的两相组合</li></ul>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
          <category> Cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
            <tag> 专栏：effective c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>effective（5）</title>
      <link href="/Language/Cpp/2ffa3829/"/>
      <url>/Language/Cpp/2ffa3829/</url>
      
        <content type="html"><![CDATA[<h1 id="26-尽可能延后变量定义式的出现时间"><a href="#26-尽可能延后变量定义式的出现时间" class="headerlink" title="26 尽可能延后变量定义式的出现时间"></a>26 尽可能延后变量定义式的出现时间</h1><ul><li>如题</li></ul><h1 id="27-尽量少做转型动作"><a href="#27-尽量少做转型动作" class="headerlink" title="27 尽量少做转型动作"></a>27 尽量少做转型动作</h1><ul><li>如果可以，尽量避免转型，特别是在注重效率的代码中避免dynamic_casts。如果有个设计需要转型动作，试着发展无需转型的替代设计</li><li>如果转型是必要的，试着将它隐藏于某个函数背后，客户随后可以调用该函数，而不需要将转型放进他们自己的代码内</li><li>宁可使用C++sytle转型，不要使用就是转型。前者很容易辨识出来，而且也比较有着分门别类的职掌</li></ul><h1 id="28-避免返回handles指向对象内部成分"><a href="#28-避免返回handles指向对象内部成分" class="headerlink" title="28 避免返回handles指向对象内部成分"></a>28 避免返回handles指向对象内部成分</h1><ul><li>避免返回handles（包括references、pointer、iterator）指向对象内部。最受这个条款可增加封装性，帮助const成员函数的行为像个const，并将发生“dangling handles”的可能性降至最低</li></ul><h1 id="29-为异常安全而努力是值得的"><a href="#29-为异常安全而努力是值得的" class="headerlink" title="29 为异常安全而努力是值得的"></a>29 为异常安全而努力是值得的</h1><ul><li>异常安全函数（Exception-safe functions）即使发生异常也不会泄露资源或允许任何数据结构败坏。这样的函数区分为三种可能的保证：基本型、强烈型、不抛异常型</li><li>“强烈保证”往往能以copy-and-swap实现出来，但“强烈保证”并非对所有函数都可实现或具备现实意义</li><li>函数提供的“异常安全保证”通常最高值等于其所调用之各个函数的“异常安全保证”中的最弱者。</li></ul><h1 id="30-透彻了解inlining的里里外外"><a href="#30-透彻了解inlining的里里外外" class="headerlink" title="30 透彻了解inlining的里里外外"></a>30 透彻了解inlining的里里外外</h1><ul><li>将大多数inlining限制在小型、被频繁调用的函数身上。这可使日后的调试过程和二进制升级更容易，也可使潜在的代码膨胀问题最小化，使程序的速度提升机会最大化</li><li>不要只因为function templates出现在头文件，就将它们声明为inline</li></ul><h1 id="31-将文件间的编译依存关系降至最低"><a href="#31-将文件间的编译依存关系降至最低" class="headerlink" title="31 将文件间的编译依存关系降至最低"></a>31 将文件间的编译依存关系降至最低</h1><ul><li>支持“编译依存性最小化”的一般思想是：相依于声明式，不要相依于定义式。给予次构想的两个手段是Handle classes和Interface classes</li><li>程序库头文件应该以“完全且仅有声明式”（full and declaration-only forms）的形式存在。这种做法不论是否涉及templates都适用</li></ul>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
          <category> Cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
            <tag> 专栏：effective c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>effective（4）</title>
      <link href="/Language/Cpp/97465f4c/"/>
      <url>/Language/Cpp/97465f4c/</url>
      
        <content type="html"><![CDATA[<h1 id="18-让接口容易被正确使用，不容易被误用"><a href="#18-让接口容易被正确使用，不容易被误用" class="headerlink" title="18 让接口容易被正确使用，不容易被误用"></a>18 让接口容易被正确使用，不容易被误用</h1><ul><li>好的接口很容易被正确使用，不容易被误用。你应该在你的所有接口中努力达成这些性质</li><li>促使正确使用的办法包括接口的<em>一致性</em>，以及与内置类型的行为兼容</li><li>阻止误用的办法包括建立新类型、限制类型上的操作，舒服对象值，以及消除客户的资源管理责任</li><li>tr1::shared_ptr支持定制型删除器（custom deleter）。这可防范dll问题，可被用来自动解除互斥锁。</li></ul><h1 id="19-设计class犹如设计type"><a href="#19-设计class犹如设计type" class="headerlink" title="19 设计class犹如设计type"></a>19 设计class犹如设计type</h1><p>需要考虑的内容包括</p><ul><li>新type的对象应该如何被创建和销毁</li><li>对象的初始化和赋值应该有什么样的差别</li><li>新type的对象如果被pass by value，意味着什么</li><li>什么是新type的合法值</li><li>你和新type需要配合某个继承图系吗</li><li>你的新type需要什么样的转换</li><li>什么样的操作符和函数对此新type而言是合理的</li><li>什么样的标准函数应该驳回</li><li>谁该取用type的成员</li><li>什么是新type的未声明接口</li><li>新type有多么一般化</li><li>真的需要一个新type吗</li></ul><h1 id="20-宁以pass-by-reference-to-const-替换pass-by-value"><a href="#20-宁以pass-by-reference-to-const-替换pass-by-value" class="headerlink" title="20 宁以pass by reference to const 替换pass by value"></a>20 宁以pass by reference to const 替换pass by value</h1><ul><li>尽量以pass-by-reference-to-const替换pass-by-value。前者通常比较搞笑，并可避免切割问题（slicing problem）</li><li>以上规则并不适用于内置类型，以及STL的迭代器和函数对象。对它们而言，pass-by-value往往比较适当</li></ul><h1 id="21-必须返回对象时，别妄想返回reference"><a href="#21-必须返回对象时，别妄想返回reference" class="headerlink" title="21 必须返回对象时，别妄想返回reference"></a>21 必须返回对象时，别妄想返回reference</h1><ul><li>绝对不要返回pointer或reference只想一个local stack对象，或返回reference指向一个heap-allocated对象，或返回pointer或reference指向一个local static对象而有可能同时需要多个这样的对象。</li></ul><h1 id="22-将成员变量声明为private"><a href="#22-将成员变量声明为private" class="headerlink" title="22 将成员变量声明为private"></a>22 将成员变量声明为private</h1><ul><li>切记将成员变量声明为private。这可赋予客户访问数据的一致性、可细微划分访问控制、允诺约束条件获得保证、并提供class坐着以充分的实现弹性</li><li>protected并不比public更具封装性</li></ul><h1 id="23-宁以non-member、non-friend替换member函数"><a href="#23-宁以non-member、non-friend替换member函数" class="headerlink" title="23 宁以non-member、non-friend替换member函数"></a>23 宁以non-member、non-friend替换member函数</h1><ul><li>宁可那non-member non-friend函数替换member函数。这样做可以增加封装性、包裹弹性和机能扩充性（可以同namespace而不同class）</li></ul><h1 id="24-若所有参数皆需要类型转换，请为此采用non-member函数"><a href="#24-若所有参数皆需要类型转换，请为此采用non-member函数" class="headerlink" title="24 若所有参数皆需要类型转换，请为此采用non-member函数"></a>24 若所有参数皆需要类型转换，请为此采用non-member函数</h1><ul><li>如果需要为某个函数的所有参数（包括被this所指的那个隐喻参数）进行类型转换，那么这个函数必须是个non-member</li></ul><h1 id="25-考虑写出一个不抛异常的swap函数"><a href="#25-考虑写出一个不抛异常的swap函数" class="headerlink" title="25 考虑写出一个不抛异常的swap函数"></a>25 考虑写出一个不抛异常的swap函数</h1><ul><li>当std::swap效率不高时，提供一个swap成员函数，并确定这个函数不抛出异常</li><li>如果你提供一个member swap，也应该提供一个non-member swap用来调用前者。对于classes（而非template），也请特化std::swap</li><li>调用swap时应针对std::swap使用using声名式，然后调用swap并且不带任何“命名空间修饰符”</li><li>为用户定义类型进行std template全特化是好的，但千万不要尝试在std内加入某些对std全新的东西</li></ul>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
          <category> Cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
            <tag> 专栏：effective c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Apollo2D未来的一些思考</title>
      <link href="/Auto/a8ec5d07/"/>
      <url>/Auto/a8ec5d07/</url>
      
        <content type="html"><![CDATA[<p>新队员终于选拔出来了，现在大二五个人，大一两个。按照林总的想法也推了些进度，不过总感觉哪里怪怪的。所以今天趁着安排了时间来做apollo相关的东西，决定来捋一捋哪里不对。</p><h1 id="主要问题"><a href="#主要问题" class="headerlink" title="主要问题"></a>主要问题</h1><h2 id="主要问题-1"><a href="#主要问题-1" class="headerlink" title="主要问题"></a>主要问题</h2><p>感觉是人员的分配问题。</p><p>现在林总拉着几个人去看论文，我拉着几个人搞penaltyKick。但是人员的流动性略有点麻烦，主要有以下几种情况：</p><ol><li>任务安排后没有及时完成（拖延情况）</li><li>上个任务安排完成后，没有安排后续任务（无任务情况）</li><li>有其他比赛需要安排时间（中断情况）</li></ol><h2 id="次要问题"><a href="#次要问题" class="headerlink" title="次要问题"></a>次要问题</h2><p>队员对代码的熟悉程度问题。</p><p>果然只要我不催，就没人看代码，但不看肯定不行。之前安排鸡米花和陈总去写penaltykick的对攻，结果我不催，两个人都没动。今天翻看了一下之前列出来的一大堆issue，果然任务不止远方的机器学习，还有苟且的基本代码问题。下一步按我的想法的话，试着除一除编译器的issue好了。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>首先是对人员的分管，之前的想法是让林总把握大权，自由安排任务，但他自己有比赛在身，所以还是得我这个闲人来盯一盯。既然是我来的话，那首先还是不再对人员进行分管了，直接把任务安排到人，而不是分组进行，毕竟组里总共也没几个人。这样的话就得安排一下工具了，初步决定是用表格（因为我用libreoffice，就不叫excel了）制作gantt图，也要顺便去复习一下pert图，看看哪个更合适。然后就是对任务量的把控，这个还是得跟林总商量一下，尽可能制定一个长远的计划，然后我来负责实施。最后是鸡米花提的一个想法，抽个时间坐到一起来推进度，这样确实有助于提高效率。</p>]]></content>
      
      
      <categories>
          
          <category> Auto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> apollo </tag>
            
            <tag> robucup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>effective（3）</title>
      <link href="/Language/Cpp/a9167f5/"/>
      <url>/Language/Cpp/a9167f5/</url>
      
        <content type="html"><![CDATA[<h1 id="13-以对象管理资源"><a href="#13-以对象管理资源" class="headerlink" title="13 以对象管理资源"></a>13 以对象管理资源</h1><ul><li>Resource Acquisition Is Initialization(RAII)</li><li>为了防止资源泄露，使用RAII对象，他们在构造函数中获取资源并在析构函数中释放资源</li><li>两个最常使用的RAII classed分别是tr1::shared_ptr和auto_ptr。前者通常是最佳选择，因为其copy行为比较直观。若选择auto_ptr，复制动作会使被复制对象指向null。</li></ul><h1 id="14-在资源管理器类中小心copying行为"><a href="#14-在资源管理器类中小心copying行为" class="headerlink" title="14 在资源管理器类中小心copying行为"></a>14 在资源管理器类中小心copying行为</h1><ul><li>RAII对象必须一并复制它所管理的资源，所以资源的copying行为决定RAII对象的copying行为</li><li>普遍而常见的RAII class copying行为是：抑制copying、施行引用计数法</li></ul><h1 id="15-在资源管理类中提供对原始资源的访问"><a href="#15-在资源管理类中提供对原始资源的访问" class="headerlink" title="15 在资源管理类中提供对原始资源的访问"></a>15 在资源管理类中提供对原始资源的访问</h1><ul><li>APIs往往要求访问原始资源，所以每个RAII class应该提供一个“取得所管理的资源”的办法。</li><li>对原始资源的访问可能经由显示转换或隐式转换。一般而言前者比较安全，后者对客户比较方便</li></ul><h1 id="16-成对使用new和delete时要采取相同形式"><a href="#16-成对使用new和delete时要采取相同形式" class="headerlink" title="16 成对使用new和delete时要采取相同形式"></a>16 成对使用new和delete时要采取相同形式</h1><ul><li>如果在new表达式中使用[]，必须在相应的delete表达式中也使用[]。如果在new表达式中不使用[]，一定不要在相应的delete表达式中使用[]</li></ul><h1 id="17-以独立语句将newed对象置入智能指针"><a href="#17-以独立语句将newed对象置入智能指针" class="headerlink" title="17 以独立语句将newed对象置入智能指针"></a>17 以独立语句将newed对象置入智能指针</h1><ul><li>以独立语句将newed对象存储于（置入）智能指针内。如果不这样做，一旦异常被抛出，有可能导致难以察觉的资源管理。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
          <category> Cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
            <tag> 专栏：effective c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>又一次加入manjaro大家庭</title>
      <link href="/Daily/512f04dd/"/>
      <url>/Daily/512f04dd/</url>
      
        <content type="html"><![CDATA[<p>没错，是又一次，之前装过一次manjaro了，然后好像是某次系统暴毙之后，再也没有抢救回来。</p><p>今天有个大一的姑娘装ubuntu环境，apt出问题了，来问我。我想起来，大概是一年前的这个时候，我也在宿舍兴奋地装着各种各样的发行版，从最开始常见的Ubuntu到后面roc推荐的manjaro。现在还记得当时多么喜欢Ubuntu的apt（虽然现在看来apt明明很难受），多么热衷于装各种各样好看的桌面（从xfce转到gnome再到kde），多么期待云服务器打折（也确实买了台）。</p><p>这次想换Linux是因为windows在某些方面的不方便实在忍受不了了，比如不能方便的随时开终端，不能轻松的用vim，以及确确实实有点卡了。总之就像是一个在城里呆久了的人，下定决心要去乡下转转。</p><p>选manjaro感觉也是情理之中，Ubuntu的gnome太丑，红帽系就没打算做桌面，suse其实不错，不过想要更free一点，arch系还是更舒服一点。原生的arch毕竟还是太复杂了，如果我是大一的话，也许还会拿arch的安装来学习学习安装过程，但现在，我想躺着要一个高度可用且可自由定制的环境。</p><p>换的时候也没啥激动的，好像也碰到啥问题。把镜像丢进ventoy，顺手用win的磁盘管理器划一块区出来，安装的时候再顺便格式化了，分区挂载也懒得分开了，lvm和加密什么的也没啥必要了。就这么看着进度条慢慢跑完，然后等着kde默认的桌面弹出来。翻了翻arch的wiki，看了看pacman的日常安装操作，一开始有点不适应，不过很快也能习惯了。对了，yay真好用。然后就是下各种常用库，顺便把robocup2d的环境配了。现在会编译源码了，很多东西不用包管理器也行了，源码也知道要丢到&#x2F;usr&#x2F;local&#x2F;src底下了。win的文件系统和移动柜盘也知道怎么自动挂载了。</p><p>当然也不是完全没有问题，比如code的登录按钮就坏了，不过因为有roc的clash加持，很快就在github的某个issue里找到了解决方案，我一个kde用户居然要下gnome配件，也是挺怪的。还有双屏显示下，kde窗口的menu会错位，据说是qt的锅，源码层面的解决不了了，不过测试了一下发现也不是不能用。适当调整一下就行。中间还收件乱装了个驱动，导致重启之后kde进不去了，不过也没啥担心的，换tty2把驱动删了就完事了。以及今天登录的时候手贱输错了几次密码，发现kde卡死了，一查发现不是卡了，是密码输错的太多的保护机制，上&#x2F;etc&#x2F;secure把限制改了，然后重启就完事了。</p><p>其实一开始拿到kde还挺开心，又像半年前的自己一样，开始整各种花里胡哨的窗口风格，特效和骚气的壁纸。不过总觉得配起怪怪的。最后猛然发现，其实新版kde plasma 5的默认壁纸和style就已经很棒了。尤其是这张壁纸，可能是年纪大了，看这种画总觉得里面有点故事的感觉。</p><p>又一次加入manjaro了，这次装环境没有了当初的那份激情，一切似乎都变得理所应当，就像它本来的样子一样。但还是很开心，这个过程中的每一步都在我的把握之中，我清楚我所做的每一步的后果，就像它也相信我能自己做出正确的判断。</p><p>最后的最后，附上这张图，下起大雨了，得赶紧回去了。</p><p><img src="https://cdn.jsdelivr.net/gh/kawhicurry/picgo/scenery/bamboo0.png" alt="bamboo"></p>]]></content>
      
      
      <categories>
          
          <category> Daily </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Apollo2D组选拔测试系统（上）</title>
      <link href="/Auto/99ae6e60/"/>
      <url>/Auto/99ae6e60/</url>
      
        <content type="html"><![CDATA[<h1 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h1><p>关于如何选拔2D正式成员的方案，之前就想过了。但毕竟2D和3D不一样，3D那选进来的都是底子还不错而且积极性蛮强的，2D这边水平有点参差不齐，但也确实有的人有潜力。此前刚好写完了HFO-trainer，对trainer的开发有了不错的理解，后面调试trainer的时候突发奇想，想到了用编写某个固定动作的方法来测试成员的水平。于是就有了一个大致的方案：</p><h1 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h1><blockquote><p>让足球从某个点以某个速度飞向某个方向，然后编写球员追球的动作，并评估球员追到球所花费的时间来判断球员代码的质量，进而选拔正式成员。</p></blockquote><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="核心：get-ball-trainer"><a href="#核心：get-ball-trainer" class="headerlink" title="核心：get ball trainer"></a>核心：get ball trainer</h2><p>接下来是实现，首先是需要一个trainer，为了偷懒，索性就直接从之前改好的HFO-trainer那里copy一份过来，加上了一条接到球就重置的判断，顺便取消了球出界和球离开<code>HFO area</code>（就是半场）的判断。让球可以在球场上到处乱跑。然后把HFO的重置输出时间改为自定义的时间格式，我这里选的是用<code>@</code>符号作为分隔符，因为HFO-trainer的输出不完全受我控制，有的输出被写死到了<code>librcsc</code>中，用<code>@</code>特殊符号便于我用<code>grep</code>直接筛选。格式为：<code>次数@花费时间@开始时间</code>。</p><p>然后有一个指定球的位置的问题，仔细review了HFO-trainer的源码，发现它为了搞球的随机位置搞了一大堆东西，球的初速度也被写死成（0，0）。这里注释了一大堆代码，然后在HFO-Param中加入了一些指定球、球员的位置和速度的参数，最后在参数处理那里参照样例写好参数处理函数。trainer基本就完成了。</p><p>本来是有球的速度和位置共四个参数，外加球员的位置的两个参数的。后面实战过程中遇到了一些问题，后面再谈。</p><h2 id="面向参与者：第一个版本"><a href="#面向参与者：第一个版本" class="headerlink" title="面向参与者：第一个版本"></a>面向参与者：第一个版本</h2><p>光有上面这个trainer还不够，还得有一份基本的代码给参加选拔的同学们写，于是这里选择了经典的<code>HELIOS-BASE</code>。然后以模仿其<code>bhv_go_to_static_ball</code>的文件加了个<code>bhv_go_to_moving_ball</code>的cpp&#x2F;h文件，CMake里当然也不能忘了加（遥想一个月之前，我还不会写cmake）。顺便把上面的HFO-trainer单个文件夹一块打包过来，然后CMake直接<code>add_subdirectory</code>。因为之前HFO-trainer的CMakeLists写的挺好的，所以这部分还挺轻松。</p><p>还有一个问题是，我希望代码只做追球这一个动作，但不能让球员执行决策树中的其他动作，但同时要允许在追球这个动作中调用其他的动作。最后的做法是在<code>sample_player</code>的<code>actionImpl</code>函数中做了个“截断”：</p><pre><code class="highlight cpp"><span class="built_in">Bhv_GoToMovingBall</span>().<span class="built_in">execute</span>(<span class="keyword">this</span>);<span class="keyword">return</span>;</code></pre><p>再然后就是要考虑参加选拔的同学们了，首先是编译，因为很多人还真不会cmake，所以索性写了个<code>build.sh</code>的脚本，用于自动编译。而cmake和其他的环境，如果使用我之前写的自动安装脚本的话，应该是装好了cmake的，所以环境应该问题不大。后面优化的时候，还给这个脚本加上了判断内核个数来加速编译过程。挺简洁的，贴一下也好。</p><pre><code class="highlight bash"><span class="keyword">if</span> [ ! -d build ]; <span class="keyword">then</span>    <span class="built_in">mkdir</span> build<span class="keyword">fi</span><span class="built_in">cd</span> buildcmake ..core=$(<span class="built_in">cat</span> /proc/cpuinfo | grep -c processor)make -j<span class="variable">$core</span></code></pre><p>然后就是运行，第一个版本写了个<code>run.sh</code>。</p><p>在设计上，显示把脚本分成了两块，一部分指定参数，另一部分跑指令。参数这一块，当然是要有启动HFO-trainer时的参数，以及用于观测的monitor的相关参数。然后就是执行，因为要启动包括server、monitor、trainer、player四个executable binary，输出全导到终端的话会很难受， 所以肯定要做个重定向。</p><p>首先是可有可无的monitor，写了个对monitor判空的if，这样如果该行留空monitor就不会启动了，然后monitor的重定向也是可有可无的，所以干脆就导到<code>/dev/null</code>了。再然后是server，因为server里的输出也用不上，所以操作就同monitor了。接下来trainer会在终端里输出接到球的时间，所以要重定向到一个用来存结果的文件里，后面也要对这个文件做处理，这里随手取了个<code>raw_result.log</code>的文件名。然后是player的输出，考虑到写代码的时候，大家有可能要手动debug，一般会用终端输出的方法，所以就讲player的输出导出到<code>player.log</code>，然后在文档中告诉他们输出去哪了。</p><p>最后是做了个可视化的运行界面，因为测试的时候终端是没有输出的（都被重定向走了），所以决定要加点输出，一开始只有个简单的Running，然后想到了用<code>grep -c</code>以轮询的方式从<code>raw_result.log</code>中读取当前处理的次数，然后运用<code>echo &quot;-r&quot;</code>来实现不换行输出，从而大致展示一种进度条的效果。这个while循环中也加入了一个sleep来避免过大的性能损耗。大致效果如下：</p><pre><code class="highlight bash">Preparing...Running...123/1000</code></pre><p>除此之外，设计的时候也考虑到了后续可能会有大量数据要测试，所以预留了一个命令行处理的脚本，当然，非常简陋，但是够用的那种，当命令行参数符合要求（数量要求）时，就会弃用脚本中指定的参数，使用命令行参数中的参数。</p><pre><code class="highlight bash"><span class="meta">#!/bin/bash</span><span class="comment"># set -x</span><span class="built_in">echo</span> <span class="string">&quot;Preparing...&quot;</span><span class="comment"># 监控参数</span>monitor=<span class="string">&quot;rcssmonitor&quot;</span> <span class="comment"># &quot;soccerwindow2&quot; or &quot;rcssmonitor&quot;</span>synch=off             <span class="comment"># 启用加速功能 off为关闭</span>trials=100            <span class="comment"># 最大训练次数,0为不开启,注意第一次是无效的</span><span class="comment"># 球和球员的参数</span>ball_pos_x=<span class="string">&quot;-20.0&quot;</span>ball_pos_y=<span class="string">&quot;20.0&quot;</span>ball_vel_x=<span class="string">&quot;0.0&quot;</span>ball_vel_y=<span class="string">&quot;-2.0&quot;</span><span class="comment"># player_pos_x=&quot;0.0&quot; # 现在不建议修改球员的位置</span><span class="comment"># player_pos_y=&quot;0.0&quot;</span><span class="comment"># 执行部分，不建议修改----------------------------------------------------</span><span class="keyword">if</span> [ <span class="variable">$#</span> -eq 5 ]; <span class="keyword">then</span>    synch=on    ball_pos_x=<span class="variable">$1</span>    ball_pos_y=<span class="variable">$2</span>    ball_vel_x=<span class="variable">$3</span>    ball_vel_y=<span class="variable">$4</span>    <span class="comment"># player_pos_x=$5</span>    <span class="comment"># player_pos_y=$6</span>    trials=<span class="variable">$5</span><span class="keyword">fi</span><span class="function"><span class="title">func_exit</span></span>() &#123;    <span class="built_in">kill</span> -2 $(pidof rcssserver) &amp;&gt;/dev/null    <span class="built_in">kill</span> -9 $(<span class="built_in">echo</span> <span class="variable">$&#123;monitor&#125;</span> | xargs pidof) &amp;&gt;/dev/null    <span class="built_in">sleep</span> 1    <span class="built_in">rm</span> *.rcg *.rcl    ./parse.sh    <span class="built_in">echo</span> <span class="string">&quot;Game Done&quot;</span>    <span class="built_in">exit</span>&#125;<span class="built_in">trap</span> <span class="string">&quot;func_exit&quot;</span> SIGINT SIGTERM SIGHUPopt=<span class="string">&quot;--ball-pos-x=<span class="variable">$&#123;ball_pos_x&#125;</span> --ball-pos-y=<span class="variable">$&#123;ball_pos_y&#125;</span>&quot;</span>opt=<span class="string">&quot;<span class="variable">$&#123;opt&#125;</span> --ball-vel-x=<span class="variable">$&#123;ball_vel_x&#125;</span> --ball-vel-y=<span class="variable">$&#123;ball_vel_y&#125;</span>&quot;</span>opt=<span class="string">&quot;<span class="variable">$&#123;opt&#125;</span> --player-pos-x=<span class="variable">$&#123;player_pos_x&#125;</span> --player-pos-y=<span class="variable">$&#123;player_pos_y&#125;</span>&quot;</span><span class="keyword">if</span> [ <span class="variable">$&#123;trials&#125;</span> -gt 0 ]; <span class="keyword">then</span>    opt=<span class="string">&quot;<span class="variable">$&#123;opt&#125;</span> --trials=<span class="variable">$&#123;trials&#125;</span>&quot;</span><span class="keyword">fi</span>rcssserver server::coach=on server::synch_mode=<span class="variable">$&#123;synch&#125;</span> &amp;&gt;/dev/null &amp;<span class="keyword">if</span> [ ! $(pidof <span class="variable">$&#123;monitor&#125;</span>) ]; <span class="keyword">then</span>    <span class="variable">$monitor</span> -c &amp;&gt;/dev/null &amp;<span class="keyword">fi</span><span class="built_in">sleep</span> 1./build/helios-base_hfo_trainer <span class="variable">$&#123;opt&#125;</span> &amp;&gt;./raw_result.log &amp;<span class="built_in">sleep</span> 1./build/src/sample_player --config_dir=./build/src/formations-dt &amp;&gt;./player.log &amp;<span class="built_in">echo</span> <span class="string">&quot;Running...&quot;</span><span class="built_in">echo</span> <span class="string">&quot;Use [Ctrl]+c to stop at any time&quot;</span><span class="keyword">while</span> <span class="literal">true</span>; <span class="keyword">do</span>    <span class="keyword">if</span> [ ! $(pidof helios-base_hfo_trainer) ]; <span class="keyword">then</span>        func_exit    <span class="keyword">fi</span>    <span class="built_in">echo</span> -en <span class="string">&quot;<span class="subst">$(grep -c @ raw_result.log)</span>/<span class="variable">$&#123;trials&#125;</span>\r&quot;</span>    <span class="built_in">sleep</span> 0.1<span class="keyword">done</span></code></pre><p>最后就是结果的处理了，一开始也是准备了一个<code>parse.sh</code>脚本。里面肯定起手就是一行<code>grep @</code>，从<code>raw_result.log</code>中先把有效数据提出出来，然后用<code>awk</code>来做进一步处理，这里需要由平均时间取得最小值，平均值，最大值三个数据，直接贴一下源码好了：</p><pre><code class="highlight bash">grep -E <span class="string">&#x27;@&#x27;</span> ./raw_result.log | awk -F <span class="string">&quot;@&quot;</span> <span class="string">&#x27;BEGIN &#123;max=0;min=65536&#125; NR!=1&#123;sum+=$2;if($2&gt;max)max=$2;if($2&lt;min)min=$2&#125; END &#123;print &quot;Times: &quot; NR-1 &quot;\tAverage: &quot; sum/(NR-1) &quot;\tMax: &quot; max &quot;\tMin: &quot; min&#125;&#x27;</span></code></pre><p>发现<code>-E</code>的参数好像不需要，这里grep不需要正则。这里的输出是直接到终端的。原先的方案比这复杂很多，是现在<code>run.sh</code>中把<code>raw_result.txt</code>中的数据先导出到<code>result.txt</code>，然后再由<code>parse.sh</code>做处理。因为考虑到了大量参数数据的情况下，raw_result.txt不会留存的情况。</p><p>本来还有个<code>kill.sh</code>脚本用来终止比赛的，因为要考虑到训练次数允许被设置为无限大。后面利用bash脚本的信号处理机制，也就是<code>trap</code>指令，写了个退出处理的函数并集成到了<code>run.sh</code>中。这个kill脚本就没有留了。</p><h2 id="面向参与者：第二个版本"><a href="#面向参与者：第二个版本" class="headerlink" title="面向参与者：第二个版本"></a>面向参与者：第二个版本</h2><p>在第一个版本的<code>run.sh</code>使用过程中，也注意到了一些问题。</p><p>一个是当我尝试更新仓库中的某些脚本时，因为run.sh中有一些参数也被我改掉了，当其他参与者试图用git pull来更新脚本时，会有文件冲突问题，所以有聪明的参赛选手向我提出将<code>run.sh</code>中的参数部分与执行部分分开来，在此前的环境安装脚本中，我也确实是这么做的，但考虑到第二个版本里要做对大量参数的处理，加上<code>run.sh</code>中确实有些地方可以优化，所以就选择了抛弃<code>run.sh</code>，重写一个<code>autotest.sh</code>的脚本。</p><p>另一个问题就是，在HELIOS-BASE的源码中，当比赛模式被设置为before-kick-off时，球员会默认球在（0，0）位置。为了确保公平，我的做法是，将球员一开始的位置固定为（0，0），然后让球员在比赛开始时找球，因为我认为找球也应当成为考察内容的一部分。但如果是想将追求将问题的范围限制在“只是把看得到的球追到手”这个范围内的话，那应该将球固定在（0，0），然后改变球员的位置。所以这里开始脚本中删除了player位置相关的参数。</p><p>第二个版本最重要的内容就是引入了<code>para.csv</code>文件，该文件以CSV格式指定了trainer所需要的参数，使得大量数据的测试成为了可能。然后在<code>autotest.sh</code>脚本中，我将<code>run.sh</code>copy了进来并改造为一个函数，毕竟启动比赛的过程不需要大改。 </p><p>然后就是从CSV文件中读取参数并传给run函数执行。这里也是再次用到了awk，并使用了网上的awk传参大法。并且顺手更新了下输出信息，说明了下当前在测的是哪组数据。</p><p>最后是退出时，我一开始的想法是保留比赛的log（在第一个版本中，日志会被直接删除），所以使用tar指令讲比赛日志也打包到日志文件夹下，后面想起来在启动rcssserver时直接指定log位置也许是个更好的做法。不过因为后面查看日志不是特别需要的功能，也没啥人会去翻看日志，所以下个版本里索性再次砍掉了日志。</p><pre><code class="highlight bash"><span class="meta">#!/bin/bash</span><span class="comment"># set -x</span>monitor=soccerwindow2default_trials=100<span class="keyword">if</span> [ ! -d <span class="built_in">log</span> ]; <span class="keyword">then</span>    <span class="built_in">mkdir</span> <span class="built_in">log</span><span class="keyword">fi</span><span class="keyword">if</span> [ ! -d <span class="built_in">log</span>/gameLog ]; <span class="keyword">then</span>    <span class="built_in">mkdir</span> <span class="built_in">log</span>/gameLog<span class="keyword">fi</span><span class="built_in">log</span>=./log/$(<span class="built_in">date</span> +%Y%m%d%H%M%S).<span class="built_in">log</span>raw_log=./log/$(<span class="built_in">date</span> +%Y%m%d%H%M%S).raw.log<span class="function"><span class="title">func_exit</span></span>() &#123;    <span class="built_in">kill</span> -9 $(<span class="built_in">echo</span> <span class="variable">$&#123;monitor&#125;</span> | xargs pidof) &amp;&gt;/dev/null    tar -cvzf ./log/gameLog/$(<span class="built_in">date</span> +%Y%m%d%H%M%S).rcg.tar.gz ./*.rcg --remove-files &amp;&gt;/dev/null    tar -cvzf ./log/gameLog/$(<span class="built_in">date</span> +%Y%m%d%H%M%S).rcl.tar.gz ./*.rcl --remove-files &amp;&gt;/dev/null    <span class="built_in">rm</span> *.<span class="built_in">log</span>    <span class="built_in">echo</span> -e <span class="string">&quot;Train Done----------------------------------------&quot;</span>    <span class="built_in">cat</span> <span class="variable">$log</span> | grep Average -B 1 --color=auto    <span class="built_in">echo</span> -e <span class="string">&quot;Check <span class="variable">$log</span> to see the result again&quot;</span>    <span class="built_in">exit</span> 0&#125;<span class="function"><span class="title">run</span></span>() &#123;    <span class="keyword">if</span> [ <span class="variable">$#</span> -eq 6 ]; <span class="keyword">then</span>        ball_pos_x=<span class="variable">$1</span>        ball_pos_y=<span class="variable">$2</span>        ball_vel_x=<span class="variable">$3</span>        ball_vel_y=<span class="variable">$4</span>        trials=<span class="variable">$5</span>        synch=<span class="variable">$6</span>    <span class="keyword">fi</span>    <span class="function"><span class="title">func_exit0</span></span>() &#123;        <span class="built_in">kill</span> -2 $(pidof rcssserver) &amp;&gt;/dev/null        <span class="built_in">kill</span> -9 $(<span class="built_in">echo</span> <span class="variable">$&#123;monitor&#125;</span> | xargs pidof) &amp;&gt;/dev/null        <span class="keyword">while</span> [ $(pidof rcssserver) ]; <span class="keyword">do</span>            <span class="built_in">sleep</span> 1        <span class="keyword">done</span>        <span class="built_in">echo</span> <span class="string">&quot;#<span class="variable">$ball_pos_x</span>#<span class="variable">$ball_pos_y</span>#<span class="variable">$ball_vel_x</span>#<span class="variable">$ball_vel_y</span>&quot;</span> &gt;&gt;<span class="variable">$raw_log</span>        grep @ ./raw_result.log &gt;&gt;<span class="variable">$raw_log</span>        <span class="built_in">echo</span> -e <span class="string">&quot;\n&quot;</span> &gt;&gt;<span class="variable">$raw_log</span>        <span class="built_in">echo</span> <span class="string">&quot;Game Done&quot;</span>    &#125;    <span class="built_in">trap</span> <span class="string">&quot;func_exit&quot;</span> SIGINT SIGTERM SIGHUP    opt=<span class="string">&quot;--ball-pos-x=<span class="variable">$&#123;ball_pos_x&#125;</span> --ball-pos-y=<span class="variable">$&#123;ball_pos_y&#125;</span>&quot;</span>    opt=<span class="string">&quot;<span class="variable">$&#123;opt&#125;</span> --ball-vel-x=<span class="variable">$&#123;ball_vel_x&#125;</span> --ball-vel-y=<span class="variable">$&#123;ball_vel_y&#125;</span>&quot;</span>    opt=<span class="string">&quot;<span class="variable">$&#123;opt&#125;</span> --player-pos-x=<span class="variable">$&#123;player_pos_x&#125;</span> --player-pos-y=<span class="variable">$&#123;player_pos_y&#125;</span>&quot;</span>    <span class="keyword">if</span> [ <span class="variable">$&#123;trials&#125;</span> -gt 0 ]; <span class="keyword">then</span>        opt=<span class="string">&quot;<span class="variable">$&#123;opt&#125;</span> --trials=<span class="variable">$&#123;trials&#125;</span>&quot;</span>    <span class="keyword">fi</span>    rcssserver server::coach=on server::synch_mode=<span class="variable">$&#123;synch&#125;</span> &amp;&gt;/dev/null &amp;    <span class="keyword">if</span> [ ! $(pidof <span class="variable">$&#123;monitor&#125;</span>) ]; <span class="keyword">then</span>        <span class="variable">$monitor</span> -c &amp;&gt;/dev/null &amp;    <span class="keyword">fi</span>    <span class="built_in">sleep</span> 1    ./build/helios-base_hfo_trainer <span class="variable">$&#123;opt&#125;</span> &amp;&gt;./raw_result.log &amp;    <span class="built_in">sleep</span> 1    ./build/src/sample_player --config_dir=./build/src/formations-dt &amp;&gt;/dev/null &amp;    <span class="comment"># echo &quot;Running...&quot;</span>    <span class="comment"># echo &quot;Use [Ctrl]+c to stop at any time&quot;</span>    <span class="keyword">while</span> <span class="literal">true</span>; <span class="keyword">do</span>        <span class="keyword">if</span> [ ! $(pidof helios-base_hfo_trainer) ]; <span class="keyword">then</span>            func_exit0            <span class="built_in">return</span> 0        <span class="keyword">fi</span>        <span class="built_in">echo</span> -en <span class="string">&quot;<span class="subst">$(grep -c @ raw_result.log)</span>/<span class="variable">$&#123;trials&#125;</span>\r&quot;</span>        <span class="built_in">sleep</span> 0.1    <span class="keyword">done</span>&#125;<span class="built_in">trap</span> <span class="string">&quot;func_exit&quot;</span> SIGINT SIGTERM SIGHUP<span class="keyword">if</span> [ <span class="variable">$#</span> -eq 2 ]; <span class="keyword">then</span>    Line=<span class="variable">$1</span>    <span class="built_in">let</span> <span class="string">&quot;Line++&quot;</span>    <span class="built_in">eval</span> $(awk -F <span class="string">&#x27;,&#x27;</span> <span class="string">&#x27;NR==&quot;&#x27;</span><span class="variable">$Line</span><span class="string">&#x27;&quot;&#123;printf(&quot;group=%s; ball_pos_x=%s; ball_pos_y=%s; ball_vel_x=%s; ball_vel_y=%s&quot;,$1,$2,$3,$4,$5)&#125;&#x27;</span> para.csv)    <span class="built_in">let</span> <span class="string">&quot;Line--&quot;</span>    <span class="built_in">echo</span> <span class="string">&quot;Running group <span class="variable">$group</span>&quot;</span>    <span class="built_in">echo</span> <span class="string">&quot;ball_pos_x:<span class="variable">$ball_pos_x</span> ball_pos_y:<span class="variable">$ball_pos_y</span> ball_vel_x:<span class="variable">$ball_vel_x</span> ball_vel_y:<span class="variable">$ball_vel_y</span>&quot;</span> &gt;&gt;<span class="variable">$log</span>    run <span class="variable">$ball_pos_x</span> <span class="variable">$ball_pos_y</span> <span class="variable">$ball_vel_x</span> <span class="variable">$ball_vel_y</span> <span class="variable">$default_trials</span> <span class="variable">$2</span>    ./parse.sh &gt;&gt;<span class="variable">$log</span>    func_exit<span class="keyword">fi</span>Line=$(<span class="built_in">cat</span> para.csv | <span class="built_in">wc</span> -l)<span class="built_in">let</span> <span class="string">&quot;Line++&quot;</span><span class="keyword">while</span> ((<span class="variable">$Line</span> &gt; <span class="number">1</span>)); <span class="keyword">do</span>    <span class="built_in">eval</span> $(awk -F <span class="string">&#x27;,&#x27;</span> <span class="string">&#x27;NR==&quot;&#x27;</span><span class="variable">$Line</span><span class="string">&#x27;&quot;&#123;printf(&quot;group=%s; ball_pos_x=%s; ball_pos_y=%s; ball_vel_x=%s; ball_vel_y=%s&quot;,$1,$2,$3,$4,$5)&#125;&#x27;</span> para.csv)    <span class="built_in">let</span> <span class="string">&quot;Line--&quot;</span>    <span class="built_in">echo</span> <span class="string">&quot;Running group <span class="variable">$group</span>&quot;</span>    <span class="built_in">echo</span> <span class="string">&quot;ball_pos_x:<span class="variable">$ball_pos_x</span> ball_pos_y:<span class="variable">$ball_pos_y</span> ball_vel_x:<span class="variable">$ball_vel_x</span> ball_vel_y:<span class="variable">$ball_vel_y</span>&quot;</span> &gt;&gt;<span class="variable">$log</span>    run <span class="variable">$ball_pos_x</span> <span class="variable">$ball_pos_y</span> <span class="variable">$ball_vel_x</span> <span class="variable">$ball_vel_y</span> <span class="variable">$default_trials</span> on    ./parse.sh &gt;&gt;<span class="variable">$log</span><span class="keyword">done</span>func_exit</code></pre><p>上面的就是提供给参赛者需要的主要脚本了，或者换句话，参赛者需要的这么多也够了，但如果是多个参赛选手+多组参数数据，那就又需要新的脚本来完成任务。所以上半篇章就到这里结束了，关于多选手多数据的测试在会在下半篇章介绍，而完成那种任务的脚本以及相关工具也更为复杂，但完成的效果也更棒。</p>]]></content>
      
      
      <categories>
          
          <category> Auto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> apollo </tag>
            
            <tag> robucup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HFO-Trainer是如何写成的</title>
      <link href="/Auto/660044d6/"/>
      <url>/Auto/660044d6/</url>
      
        <content type="html"><![CDATA[<h1 id="HFO-trainer"><a href="#HFO-trainer" class="headerlink" title="HFO trainer"></a>HFO trainer</h1><h2 id="Overview-of-Half-Field-Offense-environment"><a href="#Overview-of-Half-Field-Offense-environment" class="headerlink" title="Overview of Half Field Offense environment"></a>Overview of Half Field Offense environment</h2><p>Half Field Offense environment is a branch of 2D simulation which pay attention to the offense-defense situations within the half field. It’s established around a rcssserver (with version 15.2) addition to a HFO referee. Python scripts and other tools are involved too. Users can connect to it with their own agents and practice them. Its processes are like this:</p><ol><li><p>start a rcssserver with python script, exhibit the connection parameter for agents and wait for enough agents connect to it.</p></li><li><p>when enough agents are connected, automatically start the training.</p></li><li><p>place ball and player in the half field randomly(but reasonably)</p></li><li><p>change playmode to playon, and offense player(s) take a try to make a score</p></li><li><p>when satisfy the conditions like</p><ol><li>ball is out of bound</li><li>ball is out of HFO area(half field)</li><li>scores</li><li>ball is caught by defense player(s)</li></ol><p>the HFO system will judge the condition and output the result of this episode.</p></li><li><p>goto step 3</p></li></ol><p>Since it’s a complete and high-available system, we noticed some shortcomings.</p><ul><li>It’s highly integrated with practical version of rcssserver, especially for its core module: the HFO referee. That makes this project hard to move forward. When rcssserver upgrades to version16, a lot of new characteristics can not be applied on old HFO environment.</li><li>Conflict between official rcssserver. Since its rcssserver has been modified and add some new variable to config files, but it’s still read config from default directory which places the default config files generated by official rcssserver. We learned to use parameter ‘include&#x3D;file’ to solve it afterwards but this did trap us for days.</li><li>Continue from last point, we noticed that the last commit was in two years ago and a lot of updates are missed and we can not take care of it with ourselves.</li></ul><p>When we were reading official websites of rcsoccersim, we noticed trainer are highly recommend to train your own agent. After reading the source code of HFO referee, we realized that referee and trainer can be transformed to each other easily. So this how we start HFO trainer.</p><h2 id="Migration-to-a-RCSS-Server-Trainer"><a href="#Migration-to-a-RCSS-Server-Trainer" class="headerlink" title="Migration to a RCSS Server Trainer"></a>Migration to a RCSS Server Trainer</h2><p>We start with the example of HELIOS BASE. The table below shows how we deal with the difference between referee and trainer.</p><table><thead><tr><th>Referee</th><th>Trainer</th><th>Notes</th></tr></thead><tbody><tr><td>HFO referee</td><td>HFO trainer</td><td>referee is a module of rcssserver, trainer is a isolate but complete executable binary</td></tr><tr><td>command line parameters</td><td>HFO parameter</td><td>HFO parameters are around the whole rcssserver, trainer’s are in same place</td></tr></tbody></table><p>HFO referee in HFO system is similar to time referee and other referee. It works as a module of the rcssserver system. But for trainer, HFO function has to be called directly by main function. So we first extract class ‘HFOReferee’ and migrate it with ‘sample trainer’, then rename it to ‘HFO trainer’. Inheritance relationship with base class ‘Referee’ was cut off but necessary member are involved in new class ‘HFO trainer’. After that, we move the HFO parameter to a new class named ‘HFOParam’. Finally we add necessary parameter parse command to main function and make sure its work well.</p><p>We finished approximately 80% of the work in HFO system with steps above. But there remains some problems while trainer has priority than player instead of having all privilege rcssserver have like start a player with particular uniform number. This may cause problems for teams who make decisions due to their agents’ uniform number. So we applied bash scripts to finished the rest of  work. The script below shows how we fix the problem of starting agents with particular uniform number(7 and 11).</p><pre><code class="highlight bash">rcssserver server::coach=on &amp;&gt;/dev/null &amp;./Apollo2D_hfo_trainer &amp;&gt;/dev/null &amp;<span class="built_in">sleep</span> 1i=0<span class="keyword">while</span> ((<span class="variable">$i</span> &lt; <span class="number">11</span>)); <span class="keyword">do</span>    ./Apollo2D_player --config_dir=./formations-dt &amp;&gt;/dev/null &amp;    pid=$!    i=$(<span class="built_in">expr</span> <span class="variable">$i</span> + 1)    <span class="built_in">sleep</span> 1    <span class="keyword">if</span> [[ <span class="variable">$i</span> == 7 || <span class="variable">$i</span> == 11 ]]; <span class="keyword">then</span>        <span class="built_in">continue</span>    <span class="keyword">fi</span>    <span class="built_in">kill</span> <span class="variable">$pid</span><span class="keyword">done</span></code></pre><h2 id="Application-and-future-work"><a href="#Application-and-future-work" class="headerlink" title="Application and future work"></a>Application and future work</h2><h3 id="more-efficient-HFO-action"><a href="#more-efficient-HFO-action" class="headerlink" title="more efficient HFO action"></a>more efficient HFO action</h3><p>A big difference between HFO system and official rcssserver is that HFO system provides some basic actions so users can pay more attention on how to make decisions instead of getting caught by coding actions with abstract models.</p><p>We also provides some atomic actions similar to the HFO system’s, but ours are optimized and verified to be more efficient. The diagram below shows cycles spent on catching ball between them.</p><p><img src="https://cdn.jsdelivr.net/gh/kawhicurry/picgo/tech/Apollo5.png" alt="compare"></p><h3 id="HFO-with-more-conditions"><a href="#HFO-with-more-conditions" class="headerlink" title="HFO with more conditions"></a>HFO with more conditions</h3><p>The original HFO system defined a lot of constants like HFO area and others in the modified rcssserver. After transforming them into a trainer, it’s much easier to modified them and we also add more variables to make it more flexible. For example, we can make offense player start a game from backfield to play a counter-attack now.</p><h3 id="HFO-for-beginners"><a href="#HFO-for-beginners" class="headerlink" title="HFO for beginners"></a>HFO for beginners</h3><p>For beginners who start a trip of 2D simulation, they need time to understand how rcssserver works. So we apply the HFO trainer on teaching beginners. The rookies this year(2022) of Apollo2D are taught to write a player that can get a moving ball as rapidly as they can. We applied HFO trainer on it and added a condition about getting the ball. Their recently grades are like below</p><p><img src="https://cdn.jsdelivr.net/gh/kawhicurry/picgo/tech/Apollo3.png" alt="compare"></p><p><img src="https://cdn.jsdelivr.net/gh/kawhicurry/picgo/tech/Apollo4.png" alt="compare"></p><h3 id="About-future"><a href="#About-future" class="headerlink" title="About future"></a>About future</h3><p>After finishing the job of HFO trainer, we reviewed the HFO system. We realized it’s might be another project like Google football. It tell us to focus on decisions in multi-agents problem, but we believe the actions are equivalent important to decisions. As for situation in offense-defense part of the HFO game, HFO trainer will help us take a close look on its nature.</p>]]></content>
      
      
      <categories>
          
          <category> Auto </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>effective（2）</title>
      <link href="/Language/Cpp/b22d0090/"/>
      <url>/Language/Cpp/b22d0090/</url>
      
        <content type="html"><![CDATA[<h1 id="05-了解c-默认编写并调用哪些函数"><a href="#05-了解c-默认编写并调用哪些函数" class="headerlink" title="05 了解c++默认编写并调用哪些函数"></a>05 了解c++默认编写并调用哪些函数</h1><ul><li>编译器可以暗自为class创建default构造函数、copy构造函数、copy assignment操作符以及析构函数，当然，前提是能合理地生成出来。</li></ul><h1 id="06-若不想使用编译器自动生成的函数，就该明确拒绝"><a href="#06-若不想使用编译器自动生成的函数，就该明确拒绝" class="headerlink" title="06 若不想使用编译器自动生成的函数，就该明确拒绝"></a>06 若不想使用编译器自动生成的函数，就该明确拒绝</h1><ul><li>将会被编译器自动合成的函数设为private可以阻止其被合成出来，但这样的话使用时的报错会在链接时出现</li><li>设置一个uncopiable的基类，然后继承它可以将报错提前到编译器</li></ul><h1 id="07-为多态基类声明virtual析构函数"><a href="#07-为多态基类声明virtual析构函数" class="headerlink" title="07 为多态基类声明virtual析构函数"></a>07 为多态基类声明virtual析构函数</h1><ul><li>polymorphical的base classes应该声明一个virtual析构函数（从而避免部分删除的情况），如果clss带有任何virtual函数，它就应该有一个virtual析构函数</li><li>相反的，如果class的设计目的如果不是作为base classes使用，或不是为了polymorphically，就不该声明virtual析构函数</li></ul><h1 id="08-别让异常逃离析构和函数"><a href="#08-别让异常逃离析构和函数" class="headerlink" title="08 别让异常逃离析构和函数"></a>08 别让异常逃离析构和函数</h1><ul><li><p>析构函数绝对不要吐出异常，如果一个被析构函数调用的函数可能抛出异常，析构函数应该捕捉任何异常，然后吞下它们（不传播）或直接结束程序（调用std::abort())</p></li><li><p>如果客户需要对某个操作函数运行期间抛出的异常做出反应，那么class应该提供一个普通函数（而非在析构函数中）执行该操作。</p></li></ul><h1 id="09-绝不在构造和析构过程中调用virtual函数"><a href="#09-绝不在构造和析构过程中调用virtual函数" class="headerlink" title="09 绝不在构造和析构过程中调用virtual函数"></a>09 绝不在构造和析构过程中调用virtual函数</h1><ul><li>在构造和析构期间不要调用virtual函数，因为这类调用从不下降至derived class。解决方法包括避免调用和将virtual函数改为non-virtual并在derived class构造时初始化。</li></ul><h1 id="10-令operator-返回一个reference-to-this"><a href="#10-令operator-返回一个reference-to-this" class="headerlink" title="10 令operator&#x3D;返回一个reference to *this"></a>10 令operator&#x3D;返回一个reference to *this</h1><ul><li>如题，原因是保证连续赋值的合理性</li></ul><h1 id="11-在operator-中处理“自我赋值”"><a href="#11-在operator-中处理“自我赋值”" class="headerlink" title="11 在operator&#x3D;中处理“自我赋值”"></a>11 在operator&#x3D;中处理“自我赋值”</h1><ul><li>确保当对象自我赋值时，operator&#x3D;有良好的行为。其中的技术包括比较“来源对象”和“目标对象”的地址、精心周到的语句顺序、以及copy-and-swap。</li></ul><h1 id="12-复制对象时勿忘其每一个成分"><a href="#12-复制对象时勿忘其每一个成分" class="headerlink" title="12 复制对象时勿忘其每一个成分"></a>12 复制对象时勿忘其每一个成分</h1><ul><li>copying函数应该确保复制“对象内所有成员变量”及“所有base class成分”</li><li>不要尝试以某个copying函数实现另一个copying函数。应该将共同机能放进第三个函数中，并由两个copying函数共同调用</li></ul>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
          <category> Cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
            <tag> 专栏：effective c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim小技巧（2）</title>
      <link href="/Tools/9a7e64aa/"/>
      <url>/Tools/9a7e64aa/</url>
      
        <content type="html"><![CDATA[<h1 id="Chapter-2-Normal-Mode"><a href="#Chapter-2-Normal-Mode" class="headerlink" title="Chapter 2: Normal Mode"></a>Chapter 2: Normal Mode</h1><p>接下来几章都是关于模式的</p><h2 id="tip7-Pause-with-your-brush-off-the-page"><a href="#tip7-Pause-with-your-brush-off-the-page" class="headerlink" title="tip7: Pause with your brush off the page"></a>tip7: Pause with your brush off the page</h2><p>Why is the normal mode the default mode?</p><p>Because we spent the most of of time on thinking rather than typing.</p><h2 id="tip8-Chunk-Your-Undoes"><a href="#tip8-Chunk-Your-Undoes" class="headerlink" title="tip8: Chunk Your Undoes"></a>tip8: Chunk Your Undoes</h2><p>use <code>u</code> to undo your changes at any time.</p><p>And always go back to normal mode when you feel like you want to “have a rest”.</p><h2 id="tip9-Compose-Repeatable-Changes"><a href="#tip9-Compose-Repeatable-Changes" class="headerlink" title="tip9: Compose Repeatable Changes"></a>tip9: Compose Repeatable Changes</h2><p><em>Vim is optimized for repetition</em></p><p>To delete a word backward, we can press <code>db</code></p><p>To delete a word forward, we can use <code>dw</code></p><p>To delete a word, we can use <code>daw</code></p><p>To make our operation more <strong>repeatable</strong>, we need to make our operation more clearly.</p><p>Take above as example, we can use <code>dbx</code>,<code>bdw</code>,<code>daw</code> to delete a word. But only the last operation involves one steps. So it’s the most <strong>repeatable</strong> one.</p><p>Thus, we can use <code>.</code> the dot command to repeat it easily.</p><h2 id="Tip10-Use-Counts-to-Do-Simple-Arithmetic"><a href="#Tip10-Use-Counts-to-Do-Simple-Arithmetic" class="headerlink" title="Tip10: Use Counts to Do Simple Arithmetic"></a>Tip10: Use Counts to Do Simple Arithmetic</h2><p>VIM CAN DO ARITHEMETIC !!!!</p><p>When cursor is on a number, we can use <code>number&lt;C-a&gt;</code>to do addition or use <code>number&lt;C-x&gt;</code> to do subtraction.</p><p>What if cursor is not on a number? The cursor will look for ahead for a digit. This is really convenient.</p><p>Another notice: numbers begin with 0 will be considered as a octal number. Of you can edit it in <code>vimrc</code> , <code>set nrformats=</code>. And numbers begin with 0x are same.</p><h2 id="Tip11-Don’t-Count-If-You-Can-Repeat"><a href="#Tip11-Don’t-Count-If-You-Can-Repeat" class="headerlink" title="Tip11: Don’t Count If You Can Repeat"></a>Tip11: Don’t Count If You Can Repeat</h2><p>If we want to delete next two word now. We can press <code>d2w</code>  <code>2dw</code> or <code>dw.</code>. The previous one means <code>delete two words</code>, while the later one means <code>repeat delete a word twice</code>.</p><p>Dot is convenient for undoes. But use a count when it matters.</p><h2 id="Tip12-Combine-and-Conquer"><a href="#Tip12-Combine-and-Conquer" class="headerlink" title="Tip12: Combine and Conquer"></a>Tip12: Combine and Conquer</h2><p><em>Operator+Motion&#x3D;Action</em></p><table><thead><tr><th>Trigger</th><th>Effect</th></tr></thead><tbody><tr><td>c</td><td>change</td></tr><tr><td>d</td><td>delete</td></tr><tr><td>y</td><td>yank into register</td></tr><tr><td>g~</td><td>switch case</td></tr><tr><td>gu</td><td>make lowercase</td></tr><tr><td>gU</td><td>make uppercase</td></tr><tr><td>&gt;</td><td>shift right</td></tr><tr><td>&lt;</td><td>shift left</td></tr><tr><td>&#x3D;</td><td>autoindent</td></tr><tr><td>!</td><td>filter{motion}lines through an external program</td></tr></tbody></table><p>auto indent with <code>gg=G</code></p><p>when we type <code>dw</code>, there is a special mode called <em>Operator-pending Mode</em> between <code>d</code> and <code>w</code>. Vim will only accept motion in this mode (or use <Esc> to cancel it).</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专栏：每天几个vim小技巧 </tag>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重学linux（17）</title>
      <link href="/Operation/Linux/3907703d/"/>
      <url>/Operation/Linux/3907703d/</url>
      
        <content type="html"><![CDATA[<h1 id="开放源码的软件安装和升级"><a href="#开放源码的软件安装和升级" class="headerlink" title="开放源码的软件安装和升级"></a>开放源码的软件安装和升级</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>略</p><h2 id="gcc编译过程"><a href="#gcc编译过程" class="headerlink" title="gcc编译过程"></a>gcc编译过程</h2><p>略</p><h2 id="make编译过程"><a href="#make编译过程" class="headerlink" title="make编译过程"></a>make编译过程</h2><p>略</p><h2 id="tarball管理与建议"><a href="#tarball管理与建议" class="headerlink" title="tarball管理与建议"></a>tarball管理与建议</h2><p>使用流程</p><ul><li>获取原始文件，解压缩</li><li>获取步骤流程，查看<code>INSTALL</code>和<code>README</code>等相关文件内容</li><li>依赖检查或安装</li><li>建立<code>makeflie</code>，比如使用configure和config</li><li>编译，make</li><li>安装，根据makefile提示使用make install</li></ul><h3 id="一些建议"><a href="#一些建议" class="headerlink" title="一些建议"></a>一些建议</h3><ul><li>在&#x2F;usr&#x2F;local&#x2F;src里解压缩</li><li>安装位置设为&#x2F;usr&#x2F;local下</li><li>考虑未来可能的卸载过程</li><li>为安装到单独目录的软件的man page加入到man path中（<code>/etc/mand_db.conf</code>）</li></ul><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>使用patch</p><pre><code class="highlight bash">pathc -pN &lt; patch_filepathc -R &lt; patch_file</code></pre><h2 id="函数库管理"><a href="#函数库管理" class="headerlink" title="函数库管理"></a>函数库管理</h2><p>区分一下动态库和静态库</p><p><code>ldconfig</code>和其配置文件<code>/etc/ld.so.conf</code>和<code>/etc/ld.so.cache</code></p><pre><code class="highlight bash">ldconfig [-f conf] [-C cache] <span class="comment"># 指定配置文件</span>ldconfig -p <span class="comment"># 列出所有数据库内容</span>ldconfig <span class="comment"># 重新读取配置文件</span></code></pre><h2 id="校验软件正确性"><a href="#校验软件正确性" class="headerlink" title="校验软件正确性"></a>校验软件正确性</h2><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><ul><li>md5sum</li><li>sha1sum</li><li>sha256sum</li></ul><pre><code class="highlight bash"><span class="built_in">md5sum</span>/sha1sum/sha256sum -bct filename<span class="built_in">md5sum</span>/sha1sum/sha256sum [--status|--warn] --check filename<span class="comment"># -b 二进制读取</span><span class="comment"># -c 检查文件校验值</span><span class="comment"># -t 文本方式读取</span></code></pre><h3 id="推荐建立校验值数据库"><a href="#推荐建立校验值数据库" class="headerlink" title="推荐建立校验值数据库"></a>推荐建立校验值数据库</h3><ul><li>&#x2F;etc&#x2F;passwd</li><li>&#x2F;etc&#x2F;shadow</li><li>&#x2F;etc&#x2F;group</li><li>&#x2F;usr&#x2F;bin&#x2F;passwd</li><li>&#x2F;sbin&#x2F;rpcbind</li><li>&#x2F;bin&#x2F;login</li><li>&#x2F;bin&#x2F;ls</li><li>&#x2F;bin&#x2F;ps</li><li>&#x2F;bin&#x2F;top</li></ul><p>这样如果有人乱改就看得到</p><h1 id="软件管理器"><a href="#软件管理器" class="headerlink" title="软件管理器"></a>软件管理器</h1><h2 id="两大主流：RPM和DPKG"><a href="#两大主流：RPM和DPKG" class="headerlink" title="两大主流：RPM和DPKG"></a>两大主流：RPM和DPKG</h2><p>略</p><h2 id="RPM的管理程序"><a href="#RPM的管理程序" class="headerlink" title="RPM的管理程序"></a>RPM的管理程序</h2><h3 id="rpm"><a href="#rpm" class="headerlink" title="rpm"></a>rpm</h3><pre><code class="highlight bash">rpm -i *.rpm <span class="comment"># 安装rpm包</span>rpm -ivh *.rmp <span class="comment"># 显示进度</span></code></pre><p>后面都是rpm的参数，略</p><h3 id="SRPM"><a href="#SRPM" class="headerlink" title="SRPM"></a>SRPM</h3><p>带源码的rpm包，会有点不一样，认识下先。</p><h1 id="X-Window-System"><a href="#X-Window-System" class="headerlink" title="X Window System"></a>X Window System</h1><p>图形界面</p><p>实质上是Xserver和Xclient的通信。</p><p>大部分略了，这章记录了怎么装显卡驱动，可能要回来看看。</p><h1 id="内核编译"><a href="#内核编译" class="headerlink" title="内核编译"></a>内核编译</h1><ul><li>下载源码，解压缩</li><li>编译前的预处理<ul><li><code>make mrproper</code>保证源码干净（清除此前的配置文件）</li><li><code>make XXconfig</code>修改内核配置文件<ul><li><code>menuconfig</code>：TUI</li><li><code>oldconfig</code>：使用已经存在的.&#x2F;config文件</li><li><code>xconfig</code>：Qt接口，用于KDE</li><li><code>gconfig</code>：Gtk接口，用于GNOME</li><li><code>config</code>：单方向选择，选错完蛋</li><li>选项说明：<ul><li>为空表示不便宜</li><li>*表示编译进内核</li><li>M表示编译为模块</li></ul></li></ul></li><li>功能的进一步查看，略了</li></ul></li><li>编译<ul><li><code>make VmLinux</code>：未经压缩的内核（这步不用执行）</li><li><code>make clean</code>：先清理缓存</li><li><code>make bzImage</code>：压缩过的内核（默认）</li><li><code>make modules</code>：仅内核模块</li><li><code>make all</code>：上述三个操作</li></ul></li><li>安装模块<ul><li><code>make modules_install</code>：安装模块</li></ul></li><li>安装内核或开启多内核选项<ul><li><code>cp *.bzImage /boot/vmlinuz-version</code></li><li><code>cp .config /boot/config-version</code>：配置文件一起复制过去</li><li><code>chmod a+x /boot/vmlinuz-version</code></li><li><code>cp System.map /boot/System.map-versoin</code></li><li><code>gzip -c Modules.symvers &gt; /boot/symvers-version.gz</code></li><li><code>restorecon -Rv /boot</code></li></ul></li><li>建立<code>initrd</code></li><li>编译<code>grub</code></li></ul><h2 id="单一模块编译"><a href="#单一模块编译" class="headerlink" title="单一模块编译"></a>单一模块编译</h2><p>略</p><h2 id="内核模块管理"><a href="#内核模块管理" class="headerlink" title="内核模块管理"></a>内核模块管理</h2><h3 id="modprobe"><a href="#modprobe" class="headerlink" title="modprobe"></a>modprobe</h3><p><code>/etc/modprobe.conf</code></p>]]></content>
      
      
      <categories>
          
          <category> Operation </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 专栏：重学linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重学linux（16）</title>
      <link href="/Operation/Linux/81bb1758/"/>
      <url>/Operation/Linux/81bb1758/</url>
      
        <content type="html"><![CDATA[<h1 id="系统的基本设置"><a href="#系统的基本设置" class="headerlink" title="系统的基本设置"></a>系统的基本设置</h1><h2 id="网络设置"><a href="#网络设置" class="headerlink" title="网络设置"></a>网络设置</h2><p>重点设置内容</p><ul><li>IP</li><li>netmask</li><li>gateway</li><li>DNS</li></ul><p>网卡命名：</p><ul><li>eno1：主板BIOS内置网卡</li><li>ens1：BIOS内置PCI-E链接的网卡</li><li>enp2s0：代表PCI-E接口的独立网卡</li><li>eth0：如果不符合上述条件，使用默认编号</li></ul><p>工具：<code>nmcli</code></p><pre><code class="highlight bash">nmcli connection show [网卡名称]nmcli connection modify [网卡名称] [参数]<span class="comment"># 参数</span>connection.autoconnect [<span class="built_in">yes</span>|no]ipv4.method [auto|manual]ipv4.dns [dns_server_ip]ipv4.addressed [ip/netmask]</code></pre><h2 id="日期与时间设置"><a href="#日期与时间设置" class="headerlink" title="日期与时间设置"></a>日期与时间设置</h2><h3 id="timedatectl"><a href="#timedatectl" class="headerlink" title="timedatectl"></a>timedatectl</h3><pre><code class="highlight bash">timedateclt [<span class="built_in">command</span>]timedatectl list-timezones | grep -i newtimedatectl set-time <span class="string">&quot;2022002-22 22:22&quot;</span></code></pre><h3 id="ntpdate"><a href="#ntpdate" class="headerlink" title="ntpdate"></a>ntpdate</h3><pre><code class="highlight bash">ntpdate [ntp服务器]hwclock -w <span class="comment"># 将正确的时间写入BIOS中</span></code></pre><h2 id="语系设置"><a href="#语系设置" class="headerlink" title="语系设置"></a>语系设置</h2><h3 id="localectl"><a href="#localectl" class="headerlink" title="localectl"></a>localectl</h3><pre><code class="highlight bash">localectl [<span class="built_in">command</span>] <span class="comment"># 系统语系</span>locale <span class="comment"># 当前软件语系</span>localectl set-locale LANG=en_US.utf8</code></pre><h2 id="防火墙简易设置"><a href="#防火墙简易设置" class="headerlink" title="防火墙简易设置"></a>防火墙简易设置</h2><p>略</p><h1 id="服务器硬件数据的收集"><a href="#服务器硬件数据的收集" class="headerlink" title="服务器硬件数据的收集"></a>服务器硬件数据的收集</h1><h2 id="查看硬件设备"><a href="#查看硬件设备" class="headerlink" title="查看硬件设备"></a>查看硬件设备</h2><h3 id="dmidecode"><a href="#dmidecode" class="headerlink" title="dmidecode"></a>dmidecode</h3><pre><code class="highlight bash">dmidecode -t <span class="built_in">type</span><span class="comment"># type</span><span class="comment"># 1:整个系统的信息</span><span class="comment"># 4:cpu</span><span class="comment"># 9:插槽</span><span class="comment"># 17:内存</span></code></pre><h2 id="硬件资源的收集与分析"><a href="#硬件资源的收集与分析" class="headerlink" title="硬件资源的收集与分析"></a>硬件资源的收集与分析</h2><p>有一系列工具，这里只做记录</p><ul><li>gdisk</li><li>demsg</li><li>vmstat</li><li>lspci</li><li>lsusb</li><li>iostat</li></ul><h2 id="了解磁盘的健康状态"><a href="#了解磁盘的健康状态" class="headerlink" title="了解磁盘的健康状态"></a>了解磁盘的健康状态</h2><p>介绍了<code>smartctl</code></p><p>略</p><h1 id="备份要点"><a href="#备份要点" class="headerlink" title="备份要点"></a>备份要点</h1><h2 id="备份考虑"><a href="#备份考虑" class="headerlink" title="备份考虑"></a>备份考虑</h2><ul><li>硬件问题</li><li>软件与人的问题</li><li>主机角色不同，备份任务不同</li><li>备份因素考虑<ul><li>备份哪些文件</li><li>备份媒介</li><li>备份方式</li><li>备份频率</li><li>备份工具</li></ul></li></ul><h2 id="备份文件"><a href="#备份文件" class="headerlink" title="备份文件"></a>备份文件</h2><ul><li>OS本身的重点文件<ul><li>&#x2F;etc&#x2F;</li><li>&#x2F;home&#x2F;</li><li>&#x2F;var&#x2F;spool&#x2F;mail&#x2F;</li><li>&#x2F;var&#x2F;spool&#x2F;{at|cron}&#x2F;</li><li>&#x2F;boot&#x2F;</li><li>&#x2F;root&#x2F;</li><li>装有其他软件的&#x2F;usr&#x2F;local&#x2F;和&#x2F;opt&#x2F;</li></ul></li><li>数据库<ul><li>&#x2F;etc&#x2F;</li><li>&#x2F;usr&#x2F;local&#x2F;</li><li>&#x2F;var&#x2F;www&#x2F;</li><li>&#x2F;var&#x2F;lib&#x2F;*sql</li></ul></li><li>推荐备份的目录<ul><li>&#x2F;etc&#x2F;</li><li>&#x2F;home&#x2F;</li><li>&#x2F;root&#x2F;</li><li>&#x2F;var&#x2F;spool&#x2F;{mail|cron|at}&#x2F;</li><li>&#x2F;var&#x2F;lib&#x2F;</li></ul></li><li>不需要备份的目录<ul><li>&#x2F;dev</li><li>&#x2F;proc</li><li>&#x2F;sys</li><li>&#x2F;run</li><li>&#x2F;mnt</li><li>&#x2F;media</li><li>&#x2F;tmp</li></ul></li></ul><h2 id="备份媒介"><a href="#备份媒介" class="headerlink" title="备份媒介"></a>备份媒介</h2><p>钱的问题（狗头</p><h2 id="备份的种类、频率与工具"><a href="#备份的种类、频率与工具" class="headerlink" title="备份的种类、频率与工具"></a>备份的种类、频率与工具</h2><h3 id="完整备份之累积备份（增量备份-incremental-backup）"><a href="#完整备份之累积备份（增量备份-incremental-backup）" class="headerlink" title="完整备份之累积备份（增量备份,incremental backup）"></a>完整备份之累积备份（增量备份,incremental backup）</h3><p>即只备份有差异的文件</p><p>完整备份的工具</p><ul><li>dd</li><li>find+cpio</li></ul><p>增量备份</p><ul><li>xfsdump</li><li>tar</li></ul><h3 id="完整备份之差异备份（Differential-backup）"><a href="#完整备份之差异备份（Differential-backup）" class="headerlink" title="完整备份之差异备份（Differential backup）"></a>完整备份之差异备份（Differential backup）</h3><ul><li>xfsdump</li><li>tar</li><li>rsync</li></ul><h3 id="关键数据备份"><a href="#关键数据备份" class="headerlink" title="关键数据备份"></a>关键数据备份</h3><p>略</p><h1 id="备份策略"><a href="#备份策略" class="headerlink" title="备份策略"></a>备份策略</h1><p>略，按照前面的考虑来自行设定</p>]]></content>
      
      
      <categories>
          
          <category> Operation </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 专栏：重学linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重学linux（15）</title>
      <link href="/Operation/Linux/930eb8b6/"/>
      <url>/Operation/Linux/930eb8b6/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux的启动流程"><a href="#Linux的启动流程" class="headerlink" title="Linux的启动流程"></a>Linux的启动流程</h1><h2 id="启动流程一览"><a href="#启动流程一览" class="headerlink" title="启动流程一览"></a>启动流程一览</h2><ul><li>加载<code>bios</code>的硬件信息和自检，根据设置取得第一个可启动的设备</li><li>读取并执行第一个启动设备内的<code>MRB</code>的启动引导程序（<code>grub2</code>，<code>spfdisk</code>等）</li><li>根据启动引导程序的设置加载<code>kernel</code>，<code>kernel</code>开始检测硬件和加载驱动程序</li><li>硬件驱动成功后，<code>kernel</code>主动调用<code>systemd</code>程序，以<code>default.target</code>准备操作系统<ul><li><code>systemd</code>执行<code>sysinit.target</code>初始化系统及<code>basic.target</code>准备操作系统</li><li><code>systemd</code>执行<code>multi-user.target</code>下的本机与服务器服务</li><li><code>systemd</code>执行<code>multi-user.target</code>下的<code>/etc/rc.d/rc.local</code>文件</li><li><code>systemd</code>执行<code>multi-user.target</code>下的<code>getty.target</code>文件</li><li><code>systemd</code>执行<code>graphical</code>所需的服务</li></ul></li></ul><h2 id="BIOS、boot-loader与kernel加载"><a href="#BIOS、boot-loader与kernel加载" class="headerlink" title="BIOS、boot loader与kernel加载"></a>BIOS、boot loader与kernel加载</h2><h3 id="BIOS"><a href="#BIOS" class="headerlink" title="BIOS"></a>BIOS</h3><p>指定第一个读取的MBR分区，MBR分区中有boot loader</p><h3 id="boot-loader"><a href="#boot-loader" class="headerlink" title="boot loader"></a>boot loader</h3><p>boot loader的三个功能</p><ul><li>提供选项（多重引导的重要性）</li><li>加载内核文件（主要任务）</li><li>转交给其他loader</li></ul><p>loader在操作系统内部，linux可选择是否安装到MBR分区，而windows会自动安装到MBR分区。（所以如果要装双系统，一定要先装windows）</p><h3 id="kernel加载"><a href="#kernel加载" class="headerlink" title="kernel加载"></a>kernel加载</h3><p>linux kernel将内核解压缩至内存中，并使用内核功能检测和驱动周边设备，<em>而不一定会使用BIOS的信息</em>。</p><p>一个矛盾：kernel为了检测硬件需要读取<code>/lib/modules</code>下的驱动程序，但是又没有硬盘的驱动程序，因此无法读取。</p><p>解决办法：boot loader除了启动kernel，还启动了一个<code>initramfs</code>（虚拟文件系统）。这个文件解压缩后在内存中模拟成一个根目录，且提供一个可执行的程序，该程序允许用来加载启动过程中所需要的模块，通常是USB、RAID、LVM等文件系统和硬盘接口的驱动程序 。</p><p>之后，就可以开始执行第一个程序了</p><h2 id="systemd和default-target"><a href="#systemd和default-target" class="headerlink" title="systemd和default.target"></a>systemd和default.target</h2><h3 id="target与runlevel"><a href="#target与runlevel" class="headerlink" title="target与runlevel"></a>target与runlevel</h3><p>System V的runlevel已经被启用了，但还是可以用诸如<code>init n</code>之类命令，只不过相当于（文件被链接过去了）是执行了<code>systemctl isolate *.target</code>。</p><h3 id="systemd的处理流程"><a href="#systemd的处理流程" class="headerlink" title="systemd的处理流程"></a>systemd的处理流程</h3><p>后面一大段都略了，都是介绍具体启动了啥</p><h1 id="内核与内核模块"><a href="#内核与内核模块" class="headerlink" title="内核与内核模块"></a>内核与内核模块</h1><p>一些内核相关文件位置</p><ul><li>内核：&#x2F;kernel&#x2F;vmlinuz{-version}</li><li>内核解压缩所需RAM DISK：&#x2F;boot&#x2F;initramfs{-version}</li><li>内核模块：&#x2F;lib&#x2F;modules&#x2F;version&#x2F;kernel</li><li>内核源码：&#x2F;usr&#x2F;src&#x2F;linux或&#x2F;usr&#x2F;src&#x2F;kernels（需外部安装）</li><li>内核版本：&#x2F;proc&#x2F;version</li><li>系统内核功能：&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;</li></ul><h2 id="内核模块与依赖性"><a href="#内核模块与依赖性" class="headerlink" title="内核模块与依赖性"></a>内核模块与依赖性</h2><p>在<code>/lib/modules/$(uame -r)/kernel</code>下，有如下目录</p><ul><li>arch：硬件相关，如cpu等级</li><li>crypto：内核所支持的加密技术，如md5</li><li>drivers：硬件驱动</li><li>fs：文件系统</li><li>lib：函数库</li><li>net：网络协议相关</li><li>sound：声音相关</li></ul><p>如何检查其依赖性？查看<code>/lib/modules/$(uname -r)/modules.dep</code>文件，该文件通过<code>depmod</code>来建立</p><h3 id="查看内核模块"><a href="#查看内核模块" class="headerlink" title="查看内核模块"></a>查看内核模块</h3><p><code>lsmod</code></p><p><code>modinfo</code></p><h3 id="内核模块的加载与删除"><a href="#内核模块的加载与删除" class="headerlink" title="内核模块的加载与删除"></a>内核模块的加载与删除</h3><p><code>insmod</code></p><p><code>rmmod</code></p><p><code>modprobe</code></p><h3 id="内核模块的参数"><a href="#内核模块的参数" class="headerlink" title="内核模块的参数"></a>内核模块的参数</h3><p>略</p><h1 id="Boot-Loader：Grub2"><a href="#Boot-Loader：Grub2" class="headerlink" title="Boot Loader：Grub2"></a>Boot Loader：Grub2</h1><h2 id="boot-loader的两个stage"><a href="#boot-loader的两个stage" class="headerlink" title="boot loader的两个stage"></a>boot loader的两个stage</h2><ul><li>stage1：执行boot loader主程序</li><li>stage2：主程序加载配置文件</li></ul><h2 id="grub2的配置文件"><a href="#grub2的配置文件" class="headerlink" title="grub2的配置文件"></a>grub2的配置文件</h2><p><code>/boot/grub2/grub.cfg</code></p><p>这个文件不建议直接改，而是通过修改其他几个文件，然后使用<code>grub2-mkconfig</code>来重新生成该文件。</p><h3 id="grub2配置文件的维护"><a href="#grub2配置文件的维护" class="headerlink" title="grub2配置文件的维护"></a>grub2配置文件的维护</h3><p><code>/etc/default/grub</code>和<code>/etc/grub.d</code></p><ul><li>直接指定某个内核启动</li><li>通过chainloader移交loader控制权</li></ul><h3 id="initramfs的重要性与建立新initramfs文件"><a href="#initramfs的重要性与建立新initramfs文件" class="headerlink" title="initramfs的重要性与建立新initramfs文件"></a>initramfs的重要性与建立新initramfs文件</h3><p><code>dracut</code></p><p><code>mkinitrd</code></p><h3 id="测试与安装grub2"><a href="#测试与安装grub2" class="headerlink" title="测试与安装grub2"></a>测试与安装grub2</h3><p><code>grub2-install</code></p><h3 id="启动前的额外功能更改"><a href="#启动前的额外功能更改" class="headerlink" title="启动前的额外功能更改"></a>启动前的额外功能更改</h3><p>指在grub2启动界面下按<code>e</code></p><h3 id="启动画面与终端画面的图形显示方式"><a href="#启动画面与终端画面的图形显示方式" class="headerlink" title="启动画面与终端画面的图形显示方式"></a>启动画面与终端画面的图形显示方式</h3><p><code>/etc/default/grub</code>下设置终端的分辨率等</p><h3 id="为个别选项设置密码"><a href="#为个别选项设置密码" class="headerlink" title="为个别选项设置密码"></a>为个别选项设置密码</h3><p>grub2有模拟linux的账号管理方案</p><h1 id="启动过程中的问题解决"><a href="#启动过程中的问题解决" class="headerlink" title="启动过程中的问题解决"></a>启动过程中的问题解决</h1><h2 id="忘记root密码"><a href="#忘记root密码" class="headerlink" title="忘记root密码"></a>忘记root密码</h2><ol><li>在grub2界面使用edit功能，在内核启动项后加入<code>rb.break</code>参数，然后<code>ctrl+x</code>重启，这样相当于进入了RAM disk环境</li><li>使用<code>mount</code>检查<code>/sysroot</code>是否已经挂载（这是真正的linux系统）</li><li><code>chroot /sysroot</code>切换根目录（暂时的）</li><li><code>passwd</code>修改密码</li><li>建立<code>/.autorelabel</code>文件（用于自动修复<code>SELinux</code>的安全上下文）</li></ol><h2 id="直接以root启动bash"><a href="#直接以root启动bash" class="headerlink" title="直接以root启动bash"></a>直接以root启动bash</h2><p>内核参数后面跟一个<code>init=/bin/bash</code>即可，当然，这样还要remount根目录。这样也是进入rescue模式</p><h2 id="文件系统错误而无法启动"><a href="#文件系统错误而无法启动" class="headerlink" title="文件系统错误而无法启动"></a>文件系统错误而无法启动</h2><p>略</p>]]></content>
      
      
      <categories>
          
          <category> Operation </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 专栏：重学linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>effective（1）</title>
      <link href="/Language/Cpp/a098af7e/"/>
      <url>/Language/Cpp/a098af7e/</url>
      
        <content type="html"><![CDATA[<h1 id="01-视c-为一个语言联邦"><a href="#01-视c-为一个语言联邦" class="headerlink" title="01 视c++为一个语言联邦"></a>01 视c++为一个语言联邦</h1><p>c++的多范式</p><ul><li>procedural</li><li>object-oriented</li><li>functional</li><li>generic</li><li>metaprogramming</li></ul><p>c++的sublanguage</p><ul><li>C</li><li>object-oriented C++(C with classes)</li><li>Template C++</li><li>STL</li></ul><h1 id="02-尽量以const，enum，inline替换-define"><a href="#02-尽量以const，enum，inline替换-define" class="headerlink" title="02 尽量以const，enum，inline替换#define"></a>02 尽量以const，enum，inline替换#define</h1><p>即“以编译器替换预处理器更好”。</p><p>因为预处理器不便于debug，且作用域不受控（全局）</p><h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><p>所以可以用const来替换关于变量的这一部分</p><pre><code class="highlight cpp"><span class="meta">#<span class="keyword">define</span> Pi 3.141</span><span class="type">const</span> <span class="type">double</span> Pi=<span class="number">3.141</span>;</code></pre><h2 id="enum-hack"><a href="#enum-hack" class="headerlink" title="enum hack"></a>enum hack</h2><pre><code class="highlight cpp"><span class="keyword">class</span> <span class="title class_">GamePlayer</span>&#123;    <span class="keyword">private</span>:    <span class="keyword">enum</span>&#123;NumTurns=<span class="number">5</span>&#125;;&#125;</code></pre><p>使用enum hack使得一个它的behavior更像#define而不是const，比如enum无法取地址，也无法使用pointer或reference来取这个值。</p><p>enum hack也事实上时metaprogramming的基础技术</p><h2 id="inline"><a href="#inline" class="headerlink" title="inline"></a>inline</h2><p>#define可以写出宏，宏像是函数却不会招致function call的开销，但是其编写有许多难点（比如一大堆括号）。</p><p>这事就可以用template inline function来替代</p><pre><code class="highlight cpp"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">inline</span> voide <span class="title">callWithMax</span><span class="params">(cont T&amp; a,<span class="type">const</span> T&amp; b)</span></span>&#123;    <span class="built_in">f</span>(a&gt;b?a:b);&#125;</code></pre><p>这个template会产生一群函数来完成任务，并且没有什么括号之类的怪怪的问题，同时这是一个“实实在在”的函数，遵循作用域等一系列规。</p><h2 id="本条款总结"><a href="#本条款总结" class="headerlink" title="本条款总结"></a>本条款总结</h2><ul><li>对于单纯常数，用const或enum来替换#define</li><li>对于宏，用inline替换</li></ul><h1 id="03-尽量使用const"><a href="#03-尽量使用const" class="headerlink" title="03 尽量使用const"></a>03 尽量使用const</h1><h2 id="常量的声明"><a href="#常量的声明" class="headerlink" title="常量的声明"></a>常量的声明</h2><p> 先来个典中典</p><pre><code class="highlight cpp"><span class="type">char</span> greeting[] = <span class="string">&quot;hello&quot;</span>;<span class="type">char</span> *p = greeting; <span class="comment">// non-const pointer, non-const data</span><span class="type">const</span> <span class="type">char</span> *p = greeting; <span class="comment">//non-const pointer, const data</span><span class="type">char</span>* <span class="type">const</span> p = greeting; <span class="comment">//const pointer, non-const data</span><span class="type">const</span> <span class="type">char</span>* <span class="type">const</span> p= greeting; <span class="comment">//const pointer, const data</span></code></pre><p>判断标准是const在*前还是*后</p><h2 id="函数中的const"><a href="#函数中的const" class="headerlink" title="函数中的const"></a>函数中的const</h2><pre><code class="highlight cpp"># 有理数<span class="type">const</span> Rational <span class="keyword">operator</span>* (<span class="type">const</span> Rational&amp; lhs,<span class="type">const</span> Rational&amp; rhs);</code></pre><p>这里返回了一个常数，防止出现诸如<code>(a*b)=c</code>这类的离谱操作。</p><h2 id="const-成员函数"><a href="#const-成员函数" class="headerlink" title="const 成员函数"></a>const 成员函数</h2><p>const用于成员函数的目的，是为了确认成员函数可用于const对象。这样的好处有二：</p><ul><li>使class的接口更容易被理解</li><li>使“操作const”对象成为可能</li></ul><p>常量下（constness）不同的两个成员函数可以被重载，比如</p><pre><code class="highlight cpp"><span class="keyword">class</span> <span class="title class_">TextBlock</span>&#123;    <span class="keyword">public</span>:    <span class="type">const</span> <span class="type">char</span>&amp; <span class="keyword">operator</span>[](std::<span class="type">size_t</span> position) <span class="type">const</span>    &#123;<span class="keyword">return</span> text[position];&#125;    <span class="type">char</span>&amp; <span class="keyword">operator</span>[](std::<span class="type">size_t</span> position)    &#123;<span class="keyword">return</span> text[position];&#125;    <span class="keyword">private</span>:    std::string text;&#125;;<span class="function">TextBlock <span class="title">tb</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;<span class="function"><span class="type">const</span> TextBlock <span class="title">ctb</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;std::cout&lt;&lt;tb[<span class="number">0</span>];<span class="comment">//ok, 读一个non-const TextBlock</span>tb[<span class="number">0</span>]=<span class="string">&#x27;x&#x27;</span>;<span class="comment">//ok，写一个non-const TextBlock</span>std::cout&lt;&lt;ctb[<span class="number">0</span>];<span class="comment">//ok，读一个const TextBlock</span>ctb[<span class="number">0</span>]=<span class="string">&#x27;x&#x27;</span>;<span class="comment">//ok，读一个const TextBlock</span></code></pre><h2 id="令non-const调用const"><a href="#令non-const调用const" class="headerlink" title="令non-const调用const"></a>令non-const调用const</h2><p><code>bitwise-constness</code>和<code>logical-constness</code></p><p>很复杂，有空了回来再看一遍</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>多用const，有助于debug</li><li>编译器强制实施<code>bitwise constness</code>，但是写的时候应当使用概念上的常量行（比如借助<code>mutable</code>）</li><li>当const和non-const有本质相同的实现时，令non-const调用const版本来避免代码重复</li></ul><h1 id="04-确定对象被使用前已先被初始化"><a href="#04-确定对象被使用前已先被初始化" class="headerlink" title="04 确定对象被使用前已先被初始化"></a>04 确定对象被使用前已先被初始化</h1><p>主要是C part of C++部分容易出现这个问题。</p><p>重要的是不要混淆赋值(assignment)和初始化(initialization)，也就是构造函数的写法了，老问题了。</p><p>初始化次序是个大问题，尤其对于non-local static 的对象。为了确保其在使用之前能被正确初始化，应当将每个non-local static的函数搬到某个专用的函数中，然后将改对象在这个函数中声明为static，然后函数返回一个reference指向它。这是singleton模式中的常见手法。我想起了librcsc里的ServerParam，它就是靠instance()函数来完成这个的。</p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><ul><li>为built-in对象手动初始化，因为cpp不保证初始化</li><li>构造函数使用成员列表初始化（member initialization list），而不是赋值操作。列表初始化的排序应当和其声明次序相同</li><li>以local static对象替换non-local static 对象</li></ul>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
          <category> Cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
            <tag> 专栏：effective c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>effective（0）</title>
      <link href="/Language/Cpp/1824c81b/"/>
      <url>/Language/Cpp/1824c81b/</url>
      
        <content type="html"><![CDATA[<h1 id="Effective-C"><a href="#Effective-C" class="headerlink" title="Effective C++"></a>Effective C++</h1><p>开坑！是时候开始进阶c++了！</p><ul><li>看完并且熟悉cpp的所有基本特性，做到代码乱写都不错就行（当前级别下的那种）</li><li>effective cpp共计55个条款</li><li>计划两个月看完（因为中间要写别的项目）</li></ul><p>开坑！</p>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
          <category> Cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
            <tag> 专栏：effective c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim小技巧（1）</title>
      <link href="/Tools/88cbcb44/"/>
      <url>/Tools/88cbcb44/</url>
      
        <content type="html"><![CDATA[<h1 id="Chapter-1-the-vim-way"><a href="#Chapter-1-the-vim-way" class="headerlink" title="Chapter 1: the vim way"></a>Chapter 1: the vim way</h1><h2 id="tip1-meet-dot-command"><a href="#tip1-meet-dot-command" class="headerlink" title="tip1: meet dot command"></a>tip1: meet dot command</h2><blockquote><p>dot command repeat the last change</p></blockquote><p>So what is “the last change”?</p><p>A change could act at the level of individual characters, entire lines, or even the  whole file.</p><p>Tor example: <code>x</code> act at a character, <code>dd</code> act at a line, <code>&gt;G</code> increases the indentation from the current line until EOF.</p><p><em>The dot command is a micro macro</em></p><p>Vim can record any arbitrary number of keystrokes to be played back later.</p><h2 id="tip2-Don’t-repeat-yourself"><a href="#tip2-Don’t-repeat-yourself" class="headerlink" title="tip2: Don’t repeat yourself"></a>tip2: Don’t repeat yourself</h2><p>To add a semicolon(;) at the end of each line, we might first press <code>$</code>, then <code>a;</code>, finally <code>&lt;Esc&gt;</code>.Then just run <code>j$.</code> to apply change on lines below.</p><p><em>Reduce extraneous Movement</em></p><p>While <code>a</code> appends after current cursor position, <code>A</code> appends at the end of line, thus squashes <code>&amp;a</code> into a single keystroke. We can use<code>A;&lt;Esc&gt;</code>, then repeat by<code>j.</code> now.</p><p>There’s a lot of command compounds two actions into a single keystroke. See figure ‘Two for the price of one’</p><table><thead><tr><th>Compound command</th><th>Equivalent in longhand</th></tr></thead><tbody><tr><td>C</td><td>c$</td></tr><tr><td>s</td><td>cl</td></tr><tr><td>S</td><td>^c</td></tr><tr><td>I</td><td>^i</td></tr><tr><td>A</td><td>$a</td></tr><tr><td>o</td><td>A<CR></td></tr><tr><td>O</td><td>ko</td></tr></tbody></table><h2 id="tip3-Take-one-step-back-then-three-forward"><a href="#tip3-Take-one-step-back-then-three-forward" class="headerlink" title="tip3: Take one step back, then three forward"></a>tip3: Take one step back, then three forward</h2><p>Take this as example: add space around ‘+’ in “method(“+argument+”,”+argument2+”)”;”</p><p>First <code>f+</code> move cursor to first ‘+’ , then <code>s + &lt;Esc&gt;</code>, then <code>;.</code></p><p>The stop <code>s + &lt;Esc&gt;</code> first delete character ‘+’, then add ‘ + ‘there. One step back then three forward.</p><p><em>Make the Motion Repeatable</em></p><p>First we use <code>f&#123;char&#125;</code> to find a character, this is our first change, we can apply it later, but better way to do this is press <code>;</code>, which repeat the last search. So instead of typing <code>f&lt;char&gt;</code> many times, we just use <code>;</code> to repeat.</p><p><em>All together now</em></p><p>We can just use <code>;.</code> to repeat all jobs above now.</p><h2 id="tip4-Act-Repeat-Reverse"><a href="#tip4-Act-Repeat-Reverse" class="headerlink" title="tip4: Act, Repeat, Reverse"></a>tip4: Act, Repeat, Reverse</h2><p>We can use dot command to repeats the last change.</p><p>Use <code>@:</code> to repeat any Ex command, use <code>&amp;</code> to repeat command like <code>:command</code></p><p>Use<code>u</code> to reverse last change, use <code>,</code> to reverse last search</p><p>About reverse:</p><table><thead><tr><th>Intent</th><th>Act</th><th>Repeat</th><th>Reverse</th></tr></thead><tbody><tr><td>Make a change</td><td>{edit}</td><td>.</td><td>u</td></tr><tr><td>Scan line for next&#x2F;previous character</td><td>[f|t]{char}&#x2F;[F|T]{char}</td><td>;</td><td>,</td></tr><tr><td>Scan document for next&#x2F;previous match</td><td>&#x2F;or?pattern<CR></td><td>n</td><td>N</td></tr><tr><td>Perform substitution</td><td>:s&#x2F;target&#x2F;replacement</td><td>&amp;</td><td>u</td></tr><tr><td>Execute a sequence of changes</td><td>qx{changes}q</td><td>@x</td><td>u</td></tr></tbody></table><h2 id="tip5-Find-and-Replace-by-Hand"><a href="#tip5-Find-and-Replace-by-Hand" class="headerlink" title="tip5: Find and Replace by Hand"></a>tip5: Find and Replace by Hand</h2><p>Vim has a:substitude command to find and replace tasks.</p><p>Take this as example, substitute the first and third ‘hello’ to ‘hi’, but keep the second hello.</p><p>We can first move to first hello, then press<code>*</code> to choose all ‘hello’. Then <code>cwcopy&lt;Esc&gt;</code>, then use <code>n</code> to move to next word. Finally use <code>.</code> to repeat substitution.</p><p><code>*</code> search for all words and move to the next result, if vim don’t show us highlight, we can set by ourselves with <code>:set hls</code>.</p><p><em>Make the change repeatable</em></p><p><code>cw</code> deletes the word and drops us into insert mode so we can use dot command later.</p><p><em>All together now</em></p><p><code>n.</code></p><h2 id="tip6-Meet-the-dot-formula"><a href="#tip6-Meet-the-dot-formula" class="headerlink" title="tip6: Meet the dot formula"></a>tip6: Meet the dot formula</h2><p>This is a summary of this chapter.</p><p>We call this pattern as <code>Dot Formula</code></p><p>Dot Formula: <em>One Keystroke to Move, One Keystroke to Execute</em></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专栏：每天几个vim小技巧 </tag>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim小技巧（0）</title>
      <link href="/Tools/3077ac21/"/>
      <url>/Tools/3077ac21/</url>
      
        <content type="html"><![CDATA[<h1 id="专栏：每天几个vim小技巧"><a href="#专栏：每天几个vim小技巧" class="headerlink" title="专栏：每天几个vim小技巧"></a>专栏：每天几个vim小技巧</h1><p>开坑！</p><ul><li>以<code>practical vim</code>这本书为核心，把vim用到能和vscode相互替代为止。</li><li>共计123个tip。</li><li>计划两周看完。</li></ul><p>开坑！</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专栏：每天几个vim小技巧 </tag>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重学linux（14）</title>
      <link href="/Operation/Linux/2bb2dfd3/"/>
      <url>/Operation/Linux/2bb2dfd3/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是日志文件"><a href="#什么是日志文件" class="headerlink" title="什么是日志文件"></a>什么是日志文件</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>略</p><h2 id="一般的格式"><a href="#一般的格式" class="headerlink" title="一般的格式"></a>一般的格式</h2><ul><li>时间</li><li>主机名</li><li>服务名称</li></ul><h1 id="rsyslog-service"><a href="#rsyslog-service" class="headerlink" title="rsyslog.service"></a>rsyslog.service</h1><p>负责日志文件的service</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p><code>/etc/rsyslog.conf</code></p><p>该文件定义了：</p><ul><li>什么服务</li><li>什么等级的信息</li><li>被记录在哪里</li></ul><pre><code class="highlight bash"><span class="comment"># 格式</span>service_name[.=!]levelfilename_or_devicemail.info/var/log/maillog_info <span class="comment"># mail服务产生的大于等于info等级的信息，记录到/var/log/maillog_info文件中的意思</span>cron,mail.info /var/log/messages <span class="comment"># 使用逗号分割多个服务时，只需在最后一个后面指定等级即可</span>cron.info;mail.info /var/log/messages</code></pre><h3 id="服务名称"><a href="#服务名称" class="headerlink" title="服务名称"></a>服务名称</h3><p>内核支持的类型如下</p><table><thead><tr><th>序号</th><th>类别</th><th>说明</th></tr></thead><tbody><tr><td>0</td><td>kern</td><td>内核产生的信息</td></tr><tr><td>1</td><td>user</td><td>用户层级产生的信息，使用logger记录</td></tr><tr><td>2</td><td>mail</td><td>与邮件收发有关的信息</td></tr><tr><td>3</td><td>daemon</td><td>系统的服务产生的信息</td></tr><tr><td>4</td><td>auth</td><td>认证机制相关</td></tr><tr><td>5</td><td>syslog</td><td>自己的信息</td></tr><tr><td>6</td><td>lpr</td><td>打印相关</td></tr><tr><td>7</td><td>news</td><td>新闻组服务器</td></tr><tr><td>8</td><td>uucp</td><td>早期UNIX系统之间的程序数据交换</td></tr><tr><td>9</td><td>cron</td><td>计划任务</td></tr><tr><td>10</td><td>authpriv</td><td>和auth类似，但偏向于账号的私人信息</td></tr><tr><td>11</td><td>ftp</td><td>ftp相关</td></tr><tr><td>16~23</td><td>local0~local7</td><td>留给用户使用的日志文件信息</td></tr></tbody></table><h3 id="信息等级"><a href="#信息等级" class="headerlink" title="信息等级"></a>信息等级</h3><table><thead><tr><th>等级数值</th><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>7</td><td>debug</td><td>debug</td></tr><tr><td>6</td><td>info</td><td>基本的信息说明</td></tr><tr><td>5</td><td>notice</td><td>正常信息</td></tr><tr><td>4</td><td>warning（warn）</td><td>有问题，但不影响运行</td></tr><tr><td>3</td><td>err（error）</td><td>重大的错误</td></tr><tr><td>2</td><td>crit</td><td>比error还严重（critical）</td></tr><tr><td>1</td><td>alert</td><td>警告，更严重</td></tr><tr><td>0</td><td>emerg（panic）</td><td>系统要宕机了</td></tr></tbody></table><p>0~6为主要的等级，除此之外有debug和none两个等级。</p><h3 id="连接符号"><a href="#连接符号" class="headerlink" title="连接符号"></a>连接符号</h3><ul><li><code>.</code>：表示比后面的等级严重的（包括该等级的）都记录下来</li><li><code>.=</code>：表示所需要的就是后面的等级</li><li><code>.!</code>：表示不等于后面的等级</li></ul><h3 id="记录的文件名或设备或主机"><a href="#记录的文件名或设备或主机" class="headerlink" title="记录的文件名或设备或主机"></a>记录的文件名或设备或主机</h3><ul><li>文件：文件的绝对路径</li><li>打印机：&#x2F;dev&#x2F;lp*</li><li>用户名称：显示给某个用户</li><li>远程主机：如@123.234，需要对方主机的支持</li><li>*：表示目前在线的所有人</li></ul><h2 id="日志文件的安全设置"><a href="#日志文件的安全设置" class="headerlink" title="日志文件的安全设置"></a>日志文件的安全设置</h2><p>注：日志文件只要被编辑过，就无法继续记录，解决方法是重启<code>rsyslogd.service</code></p><p>所以可以使用<code>chattr +a /var/log/sth.log</code>来使日志文件只能添加内容而不能被修改和删除</p><h2 id="日志文件服务器的设置"><a href="#日志文件服务器的设置" class="headerlink" title="日志文件服务器的设置"></a>日志文件服务器的设置</h2><p>配置server端和client端，比较简单，略了</p><h1 id="日志文件的轮询（logrotate）"><a href="#日志文件的轮询（logrotate）" class="headerlink" title="日志文件的轮询（logrotate）"></a>日志文件的轮询（logrotate）</h1><p>logrotate的主要功能就是将现有的日志文件重新命名以做备份，然后新建一个空文件来记录信息。</p><h2 id="logrotate的配置文件"><a href="#logrotate的配置文件" class="headerlink" title="logrotate的配置文件"></a>logrotate的配置文件</h2><ul><li>&#x2F;etc&#x2F;logroate.conf</li><li>&#x2F;etc&#x2F;logrotate.d&#x2F;</li></ul><pre><code class="highlight bash">[root@centos ~]# <span class="built_in">cat</span> /etc/logrotate.conf<span class="comment"># see &quot;man logrotate&quot; for details</span><span class="comment"># rotate log files weekly</span>weekly <span class="comment">#指定了轮询的时间</span><span class="comment"># keep 4 weeks worth of backlogs</span>rotate 4 <span class="comment"># 保留的日志文件个数</span><span class="comment"># create new (empty) log files after rotating old ones</span>create <span class="comment"># 更名后新建一个</span><span class="comment"># use date as a suffix of the rotated file</span>dateext <span class="comment"># 给轮询的文件名加上日期</span><span class="comment"># uncomment this if you want your log files compressed</span><span class="comment">#compress # 是否需要压缩</span><span class="comment"># RPM packages drop log rotation information into this directory</span>include /etc/logrotate.d <span class="comment"># 子配置</span><span class="comment"># no packages own wtmp and btmp -- we&#x27;ll rotate them here</span>/var/log/wtmp &#123; <span class="comment"># 针对某个文件夹内的文件的配置</span>    monthly    create 0664 root utmp        minsize 1M    rotate 1&#125;/var/log/btmp &#123;    missingok    monthly    create 0600 root utmp    rotate 1&#125;<span class="comment"># system-specific logs may be also be configured here.</span></code></pre><pre><code class="highlight bash">[root@xxbyyl-gy-ceshi2 ~]# <span class="built_in">cat</span> /etc/logrotate.d/syslog/var/log/cron <span class="comment"># 文件名，说明被处理的文件</span>/var/log/maillog/var/log/messages/var/log/secure/var/log/spooler&#123; <span class="comment"># 参数，用大括号包起来</span>    missingok    sharedscripts <span class="comment"># 调用外部命令来进行额外的命令执行</span>    postrotate <span class="comment"># prerotate，在启动logrotate之前执行的命令，还有postarotate，这一步可用于去掉+a权限</span>        /bin/kill -HUP `<span class="built_in">cat</span> /var/run/syslogd.pid 2&gt; /dev/null` 2&gt; /dev/null || <span class="literal">true</span>    endscript&#125;</code></pre><h2 id="使用logrotate"><a href="#使用logrotate" class="headerlink" title="使用logrotate"></a>使用logrotate</h2><pre><code class="highlight bash">logrotate [-vf] config_file<span class="comment"># -v : verbose</span><span class="comment"># -f : force</span></code></pre><h1 id="systemd-journald-service"><a href="#systemd-journald-service" class="headerlink" title="systemd-journald.service"></a>systemd-journald.service</h1><p>在<code>init.d</code>时代，系统启动时rsyslogd未启动，因此内核需要启动一个klogd来讲系统启动过程中的信息记录下来，等rsyslogd启动后再传给它处理。</p><p>限制的<code>systemd</code>会启动一个<code>systemd-journald</code>来完成上述任务。</p><p>journald使用内存文件记录方式，因此不具有持久性。</p><h2 id="使用journalctl查看登录信息"><a href="#使用journalctl查看登录信息" class="headerlink" title="使用journalctl查看登录信息"></a>使用journalctl查看登录信息</h2><pre><code class="highlight bash">jouirnalctl [-nrpf] [--since TIME] [--<span class="keyword">until</span> TIME] _optional<span class="comment"># -n 指定行数</span><span class="comment"># -r reverse</span><span class="comment"># -p 显示后面信息重要性的排序</span><span class="comment"># -f 类似tail -f</span><span class="comment"># TIME &quot;2022-02-22 22:22:22&quot;</span><span class="comment"># _SYSTEMD_UNIT=unit.service</span><span class="comment"># _COMM=bash</span><span class="comment"># _PID=pid</span><span class="comment"># _UID=uid</span><span class="comment"># SYSLOG_FACILITY=[0-23]</span></code></pre><h2 id="logger命令的应用"><a href="#logger命令的应用" class="headerlink" title="logger命令的应用"></a>logger命令的应用</h2><pre><code class="highlight bash">logger [-p service.level] <span class="string">&quot;message&quot;</span></code></pre><h2 id="保存journal的方式"><a href="#保存journal的方式" class="headerlink" title="保存journal的方式"></a>保存journal的方式</h2><p>只需建立一个<code>/var/log/journal</code>目录，然后重启journal服务即可。</p><p>不过没有必要，毕竟已经有了rsyslogd来做持久化的log，将journal的log存到&#x2F;run&#x2F;log下来提升读取速度更好</p><h1 id="分析日志文件"><a href="#分析日志文件" class="headerlink" title="分析日志文件"></a>分析日志文件</h1><h2 id="logwatch"><a href="#logwatch" class="headerlink" title="logwatch"></a>logwatch</h2><p>鸟哥推荐了centos下的logwatch。logwatch与cron配合，每天发送一份mail给root。</p><h2 id="自己写一个"><a href="#自己写一个" class="headerlink" title="自己写一个"></a>自己写一个</h2><p>需要了再说</p>]]></content>
      
      
      <categories>
          
          <category> Operation </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 专栏：重学linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重学linux（13）</title>
      <link href="/Operation/Linux/b665e76a/"/>
      <url>/Operation/Linux/b665e76a/</url>
      
        <content type="html"><![CDATA[<h1 id="daemon与service"><a href="#daemon与service" class="headerlink" title="daemon与service"></a>daemon与service</h1><h2 id="init-d"><a href="#init-d" class="headerlink" title="init.d"></a>init.d</h2><p>早期的系统服务，就是一大堆脚本，在内核启动时第一个程序就是init，然后用init去运行所有需要的服务。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><table><thead><tr><th>用法</th><th>command</th></tr></thead><tbody><tr><td>启动</td><td>&#x2F;etc&#x2F;init.d&#x2F;daemon start</td></tr><tr><td>关闭</td><td>&#x2F;etc&#x2F;init.d&#x2F;daemon stop</td></tr><tr><td>重启</td><td>&#x2F;etc&#x2F;init.d&#x2F;daemon restart</td></tr><tr><td>查看状态</td><td>&#x2F;etc&#x2F;init.d&#x2F;daemon status</td></tr></tbody></table><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li>stand alone: 服务独立启动，常驻于内存中，提供本机或用户的服务操作，反应速度快</li><li>super daemon: 由xinetd或inetd两个总管程序提供socket对应的管理</li></ul><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><p>没有任何依赖的保证</p><h3 id="运行级别"><a href="#运行级别" class="headerlink" title="运行级别"></a>运行级别</h3><p>init可以根据用户定义的runlevel来唤醒不同的服务，位于&#x2F;etc&#x2F;rc.d&#x2F;rc[0-6]&#x2F;S[num]daemon，0~6含义如下</p><ol start="0"><li>halt system</li><li>单人维护</li><li>multi-user</li><li>same as 2</li><li>same as 2</li><li>gui</li><li>Reboot</li></ol><p>num为启动顺序，用于解决依赖问题。</p><p>daemon文件可以被链接至相应文件夹下。但不需要手动链接，只需使用</p><ul><li>启动：chkconfig daemon on</li><li>不启动：chkconfig deamon off</li></ul><h2 id="systemd"><a href="#systemd" class="headerlink" title="systemd"></a>systemd</h2><h3 id="systemd-相比init的优势"><a href="#systemd-相比init的优势" class="headerlink" title="systemd 相比init的优势"></a>systemd 相比init的优势</h3><ul><li>systemd常驻内存，响应快，并且有systemctl作为专门的交互工具</li><li>可自定义服务的依赖检查</li><li>按照daemon的功能进行分类，先分为unit然后归到type中</li><li>讲多个deamons集合为一个群组</li><li>向下兼容init脚本</li></ul><p>一些没有完全替换的部分</p><ul><li>runlevel并未完全对应</li><li>受systemctl语法限制</li><li>手动启动的服务不受systemd管控</li><li>systemd启动过程中不接受stdin和stdout</li></ul><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li>&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;: 每个服务最主要的启动脚本设置，类似&#x2F;etc&#x2F;init.d&#x2F;下的文件</li><li>&#x2F;run&#x2F;systemd&#x2F;system&#x2F;: </li><li>&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;:</li></ul><h3 id="unit分类"><a href="#unit分类" class="headerlink" title="unit分类"></a>unit分类</h3><p>使用后缀名</p><table><thead><tr><th>拓展名</th><th>功能</th></tr></thead><tbody><tr><td>.service</td><td>一般的服务类型（service unit）</td></tr><tr><td>.socket</td><td>内部程序数据交换的socket服务（socket unit）</td></tr><tr><td>.target</td><td>执行环境类型（target unit），一群unit的集合，就是执行一堆service和socket</td></tr><tr><td>.mount&#x2F;.automount</td><td>文件系统挂载的相关服务</td></tr><tr><td>.path</td><td>检测特定文件或目录类型</td></tr><tr><td>.timer</td><td>循环执行的服务（timer unit），比aanacrontab更有弹性</td></tr></tbody></table><h1 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h1><h2 id="管理单一服务"><a href="#管理单一服务" class="headerlink" title="管理单一服务"></a>管理单一服务</h2><pre><code class="highlight bash">systemct [<span class="built_in">command</span>] [unit]</code></pre><p>command 主要有：</p><ul><li>start</li><li>stop</li><li>restart</li><li>reload</li><li>enable</li><li>disable</li><li>status</li><li>is-active</li><li>is-enable</li></ul><p>status运行状态：</p><ul><li>active(running)</li><li>active(exited)</li><li>active(waiting)</li><li>inactive</li></ul><p>开机的默认状态：</p><ul><li>enabled</li><li>disabled</li><li>static</li><li>mask</li></ul><p>如果只是关闭某个service，若启动某个关联service时可能会重启该服务。如果要停用某个service，正确的做法是将相关的service全部关闭。当然，也可以强制注销该服务，使用<code>systemctl mask </code>来将该service链接至<code>/dev/null</code>，这样相关service试图拉起时，也拉不起来。</p><h2 id="查看系统上的服务"><a href="#查看系统上的服务" class="headerlink" title="查看系统上的服务"></a>查看系统上的服务</h2><pre><code class="highlight bash">systemctl [<span class="built_in">command</span>] [--<span class="built_in">type</span>==TYPE] [--all]</code></pre><p>command:</p><ul><li>list-units：依据unit显示启动的unit，加上–all来列出没启动的</li><li>list-unit-files：依据&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system内的文件，将所有文件列表说明</li></ul><p>type: 上面有，略</p><h2 id="管理不同的操作环境（target-unit）"><a href="#管理不同的操作环境（target-unit）" class="headerlink" title="管理不同的操作环境（target unit）"></a>管理不同的操作环境（target unit）</h2><pre><code class="highlight bash"><span class="comment"># 查看所有target unit</span>systemctl list-units --<span class="built_in">type</span>=target --all</code></pre><p>一些target</p><ul><li>graphical.target</li><li>multi-user.target</li><li>rescue.target</li><li>emergency.target</li><li>shutdown.target</li><li>getty.target</li></ul><pre><code class="highlight bash">systemctl [<span class="built_in">command</span>] [unit.target]</code></pre><p>command:</p><ul><li>get-default</li><li>set-default：改变默认target</li><li>isolate：切换到后面接的target（<strong>重点</strong>：isolate而不是start，而且isolate超好用）</li></ul><p>一些快捷指令</p><ul><li>systemctl poweroff</li><li>reboot</li><li>suspend</li><li>hibernate</li><li>rescue</li><li>emergency</li></ul><h2 id="分析各服务的依赖关系"><a href="#分析各服务的依赖关系" class="headerlink" title="分析各服务的依赖关系"></a>分析各服务的依赖关系</h2><pre><code class="highlight bash]">systemctl list-dependencies [unit] [--reverse]# --reverse 反向追踪谁在使用这个unit</code></pre><h2 id="systemd的daemon相关目录介绍"><a href="#systemd的daemon相关目录介绍" class="headerlink" title="systemd的daemon相关目录介绍"></a>systemd的daemon相关目录介绍</h2><table><thead><tr><th>目录</th><th>用途</th></tr></thead><tbody><tr><td>&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;</td><td>官方提供的软件（默认）安装后默认的启动脚本配置文件等，这里尽量不要改，要改也是改&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;下</td></tr><tr><td>&#x2F;run&#x2F;systemd&#x2F;system&#x2F;</td><td>系统执行过程中产生的服务脚本，这些脚本优先级比上面这个高</td></tr><tr><td>&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;</td><td>管理员根据需要建立的服务脚本，类似&#x2F;etc&#x2F;rc.d&#x2F;rc5.d&#x2F;Sxx，实际上是一堆从第一条链接过来的链接文件</td></tr><tr><td>&#x2F;etc&#x2F;sysconfig&#x2F;*</td><td>所有的服务都会将初始化的一些选项设置写入到这个目录</td></tr><tr><td>&#x2F;var&#x2F;lib&#x2F;</td><td>产生数据的服务会将它的数据写入到&#x2F;var&#x2F;lib中</td></tr><tr><td>&#x2F;run&#x2F;</td><td>daemon的缓存，包括lock和pid文件等</td></tr></tbody></table><h1 id="service类型的配置文件"><a href="#service类型的配置文件" class="headerlink" title="service类型的配置文件"></a>service类型的配置文件</h1><h2 id="相关目录"><a href="#相关目录" class="headerlink" title="相关目录"></a>相关目录</h2><ul><li>&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;*.service</li><li>&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;*.service.d&#x2F;*.conf</li><li>&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;*.service.wants&#x2F;*，下面放链接，意思是启动service之后建议加上的服务</li><li>&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;*.service.required&#x2F;*，下面放链接，意思是启动service之前需要事先启动的服务</li></ul><h2 id="配置文件的设置项目"><a href="#配置文件的设置项目" class="headerlink" title="配置文件的设置项目"></a>配置文件的设置项目</h2><p>示例：</p><pre><code class="highlight bash">kawhicurry@ubuntu:~$ <span class="built_in">cat</span> /etc/systemd/system/sshd.service[Unit]Description=OpenBSD Secure Shell serverAfter=network.target auditd.serviceConditionPathExists=!/etc/ssh/sshd_not_to_be_run[Service]EnvironmentFile=-/etc/default/sshExecStartPre=/usr/sbin/sshd -tExecStart=/usr/sbin/sshd -D <span class="variable">$SSHD_OPTS</span>ExecReload=/usr/sbin/sshd -tExecReload=/bin/kill -HUP <span class="variable">$MAINPID</span>KillMode=processRestart=on-failureRestartPreventExitStatus=255Type=notifyRuntimeDirectory=sshdRuntimeDirectoryMode=0755[Install]WantedBy=multi-user.targetAlias=sshd.service</code></pre><p>配置文件可以分为三个部分：</p><ol><li>[Unit] : unit本身的说明和依赖的daemon的设置</li><li>[Service] [Socket] [Timer] [Mount] [Path] : 不同的unit类型使用不同的配置，包括启动的脚本、环境配置文件名、重启的方式等</li><li>[Install] : 这个项目就是将此unit安装到某个target里去的意思</li></ol><p>一些规则：</p><ul><li>项目设置可以重复，遵循后面覆盖前面的原则</li><li>设置参数为whether or not的项目，可以使用1\0\yes\true\……等</li><li>空白行，#，；开头的行均为注释</li></ul><p>对于每个部分下的设置：</p><ol><li><p>unit</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>Description</td><td>使用<code>systemctl list-units</code>时展示的说明</td></tr><tr><td>Documentation</td><td>指定说明文件，包括网页（http:&#x2F;&#x2F;…），man page（man:sshd(8)），file（file:&#x2F;etc&#x2F;ssh&#x2F;sshd_config）</td></tr><tr><td>After</td><td>说明此unit在哪个daemon启动之后才启动的意思，仅仅是说明顺序，并没有强制。这里和requires有差异</td></tr><tr><td>Before</td><td>和After相反，其他一样</td></tr><tr><td>Requires</td><td>明确定义此unit在哪个daemon启动后启动</td></tr><tr><td>Wants</td><td>和Requires相反，定义这个unit之后启动哪个服务</td></tr><tr><td>Conflicts</td><td>代表冲突的服务</td></tr></tbody></table></li><li><p>service</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>Type</td><td>说明这个daemon的启动方式，包括simple、forking、oneshot、idle</td></tr><tr><td>EnvironmentFile</td><td>指定启动脚本的环境配置文件</td></tr><tr><td>ExecStart</td><td>实际执行daemon的命令或脚本，也可以加上ExecStartPre和ExecStartPost来细化设置，注意：不能使用bash特有的语法，如管道和重定向，若要使用，只能将TYPE设置为oneshot</td></tr><tr><td>ExecStop</td><td>用于systemctl stop</td></tr><tr><td>ExecReload</td><td>用于systemctl reload</td></tr><tr><td>Restart</td><td>当为1时，daemon服务终止后会再次启动此服务</td></tr><tr><td>RemainAfterExit</td><td>当为1时，daemon所属的所有进程终止后，会尝试再次启动，和TYPE&#x3D;oneshot配合使用</td></tr><tr><td>TimeoutSec</td><td>用于启动或关闭失败时的等待时间</td></tr><tr><td>KillMode</td><td>process、control-group、none中的一种</td></tr><tr><td>RestartSec</td><td>被关闭后等待多久重启</td></tr></tbody></table></li><li><p>install</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>WantedBy</td><td>这个设置后面接的大部分时*.target unit。意思是这个unit本身依附于哪个target</td></tr><tr><td>Also</td><td>当这个unit被enable时，哪些unit也要enable</td></tr><tr><td>Alias</td><td>运行一个链接的别名，比如将multi-user.target设为default.target，其实就是进行了链接</td></tr></tbody></table></li></ol><h2 id="多重service的重复设置方式"><a href="#多重service的重复设置方式" class="headerlink" title="多重service的重复设置方式"></a>多重service的重复设置方式</h2><p>以getty为例，众所周知，有6个默认的tty，但只有一个<code>/usr/lib/systemd/system/getty@.service</code></p><pre><code class="highlight bash">kawhicurry@ubuntu:~$ systemctl show getty.targetId=getty.targetNames=getty.targetWants=getty-static.service getty@tty1.serviceWantedBy=multi-user.targetConflicts=shutdown.targetBefore=shutdown.target multi-user.targetAfter=getty@tty1.service getty@tty2.service getty-static.service</code></pre><p>只有一个service文件，但这里after后面却有多个。执行完getty.target之后，实际的执行顺序应当是：</p><ol><li>先看&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;,&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;下有没有<a href="mailto:&#103;&#x65;&#116;&#116;&#121;&#64;&#116;&#x74;&#x79;&#49;&#x2e;&#115;&#x65;&#114;&#x76;&#105;&#99;&#101;">getty@tty1.service</a>的设置（然后找不到）</li><li>然后找getty@.service，然后将原来@后面的值作为变量传入getty@.service中的<code>%I</code>或<code>%i</code>变量</li></ol><p>这样就可以<del>少写很多文件了</del>实现复用了。</p><p>除此之外，可以在<code>/etc/systemd/logind.conf</code>中将默认的6个终端关掉几个。</p><h1 id="针对timer的配置文件"><a href="#针对timer的配置文件" class="headerlink" title="针对timer的配置文件"></a>针对timer的配置文件</h1><h2 id="systemd-timer的优势"><a href="#systemd-timer的优势" class="headerlink" title="systemd.timer的优势"></a>systemd.timer的优势</h2><ol><li>所有systemd服务产生的信息都会被log，因此比cron在debug上面更清楚和方便</li><li>各项timer的任务可以跟systemd的服务结合</li><li>可以跟control group（cgroup）结合，限制任务的资源利用</li><li>时间可以精确到毫秒</li></ol><p>当然，也有弱点</p><ol><li>比如没有email通知功能</li><li>没有anacron的一定时间内随机取样功能（不知道这是啥玩意）</li></ol><h2 id="使用timer-target的前提"><a href="#使用timer-target的前提" class="headerlink" title="使用timer.target的前提"></a>使用timer.target的前提</h2><ul><li>time.target要启动</li><li>sname.service的服务存在（sname是自己指定的）</li><li>sname.timer的服务存在</li></ul><h2 id="Timer部分的参数"><a href="#Timer部分的参数" class="headerlink" title="Timer部分的参数"></a>Timer部分的参数</h2><p>在<code>/etc/systemd/system</code>下建立<code>*.timer</code>文件，然后在[Timer]块中指定相关信息</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>OnActiveSec</td><td>timer.target启动多久之后才执行unit</td></tr><tr><td>OnBootSec</td><td>启动完成多久之后才执行</td></tr><tr><td>OnStartupSec</td><td>systemd第一次启动多久后执行</td></tr><tr><td>OnUnitActiveSec</td><td>这个timer配置文件所管理的那个unit服务在最后一次启动后，隔多久再执行</td></tr><tr><td>OnUnitInactiveSec</td><td>这个timer配置文件所管理的那个unit服务在最后一次停止后，隔多久再执行</td></tr><tr><td>OnCalender</td><td>使用实际的时间（而非循环时间）的方式来启动服务</td></tr><tr><td>Unit</td><td>.service和.timer名称相同就可以了，名称不同才在这里指定</td></tr><tr><td>Persistent</td><td>使用OnCalender时，指定该功能是否要持续进行</td></tr></tbody></table><p>OnCalender的时间</p><pre><code class="highlight bash"><span class="comment"># 基本语法</span><span class="comment"># week YYYY-MM-DD HH:MM:SS</span>Thu 2022-02-22 22:22:22<span class="comment"># 指定间隔</span><span class="comment"># s\sec\second</span><span class="comment"># m\min\minutes</span><span class="comment"># h\hr\hour</span><span class="comment"># d\day\days</span><span class="comment"># w\week\weeks</span><span class="comment"># month\mouths</span><span class="comment"># y\year\years</span>3h10s 300m100m 5day<span class="comment"># 英语口语</span>nowtodaytomorrowhourlydailyweeklymonthly+3h10m2015-08-16</code></pre><p>注：OnCalender所展示的下一次任务开始时间为UNIX标准时间，而不是当前时区的时间</p><h1 id="Linux默认的启动项"><a href="#Linux默认的启动项" class="headerlink" title="Linux默认的启动项"></a>Linux默认的启动项</h1><p>略了，需要再查</p>]]></content>
      
      
      <categories>
          
          <category> Operation </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 专栏：重学linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重学linux（12）</title>
      <link href="/Operation/Linux/ed9800f/"/>
      <url>/Operation/Linux/ed9800f/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是进程"><a href="#什么是进程" class="headerlink" title="什么是进程"></a>什么是进程</h1><p>PID由UID&#x2F;GID获取而来</p><p>子进程的有PPID</p><p>学OS的时候再来深入探究一下</p><h1 id="任务管理（Job-control）"><a href="#任务管理（Job-control）" class="headerlink" title="任务管理（Job control）"></a>任务管理（Job control）</h1><p>已经很熟悉了，稍微记一下</p><ul><li>&amp;</li><li>ctrl+z</li><li>jobs</li><li>fg</li><li>bg</li><li>kill</li></ul><p>如果是脱机任务，还可以这样</p><ul><li>at</li><li>nohup</li></ul><h1 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h1><h2 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h2><h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h3><pre><code class="highlight bash">ps auxps -lA <span class="comment"># 同上</span><span class="comment"># 只需记住两个</span>ps aux <span class="comment"># 输出所有系统运行的进程</span>ps -l <span class="comment"># 输出当前bash的进程</span>kawhicurry@ubuntu:~$ ps -lF S   UID    PID   PPID  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD0 S  1000  10100  10099  0  80   0 -  7480 <span class="built_in">wait</span>   pts/1    00:00:00 bash0 R  1000  27188  10100  0  80   0 -  9006 -      pts/1    00:00:00 ps</code></pre><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>F</td><td>进程标识（process flag）</td></tr><tr><td>S</td><td>Stat，有R（running），S（sleep），D（不可唤醒的sleep，如等待io），T（stop or trace），Z（zombie）</td></tr><tr><td>UID&#x2F;PID&#x2F;PPID</td><td>略了</td></tr><tr><td>C</td><td>cpu使用率</td></tr><tr><td>PRI&#x2F;NI</td><td>Priority&#x2F;Nice</td></tr><tr><td>ADDR&#x2F;SZ&#x2F;WCHAN</td><td>都与内存相关，ADDR指kernel function，指出进程在内存的哪个部分，SZ代表用掉了多少内存，WCHAN表示目前进程是否运行，<code>-</code>表示正在运行</td></tr><tr><td>TTY</td><td>登陆者的终端</td></tr><tr><td>TIME</td><td>实际使用cpu的时间</td></tr><tr><td>CMD</td><td>实际触发该进程的命令</td></tr></tbody></table><p><code>ps aux</code>的解释就免了，大概就这么多东西。</p><h3 id="top"><a href="#top" class="headerlink" title="top"></a>top</h3><pre><code class="highlight bash">top [-d number]top [-bnp]<span class="comment"># -d 后面接刷新时间</span><span class="comment"># -b 以批量方式执行top</span><span class="comment"># -n 和-b配合，执行n次top输出结果</span><span class="comment"># -p 指定pid</span></code></pre><p>top执行过程中可以使用的按键命令</p><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td>？</td><td>帮助</td></tr><tr><td>P</td><td>以cpu使用排序</td></tr><tr><td>M</td><td>以memory排序</td></tr><tr><td>N</td><td>以PID排序</td></tr><tr><td>T</td><td>以TIME排序</td></tr><tr><td>k</td><td>给某个pid一个signal</td></tr><tr><td>r</td><td>给某个pid一个nice值</td></tr><tr><td>q</td><td>退出</td></tr></tbody></table><h3 id="pstree"><a href="#pstree" class="headerlink" title="pstree"></a>pstree</h3><p>太大了，感觉用不上，不过还是很帅的</p><h2 id="进程管理-1"><a href="#进程管理-1" class="headerlink" title="进程管理"></a>进程管理</h2><p>使用信号，信号量可用<code>kill -l</code>查看</p><h2 id="进程执行顺序"><a href="#进程执行顺序" class="headerlink" title="进程执行顺序"></a>进程执行顺序</h2><p>Priority由系统决定，无法改变</p><ul><li>priority越小越先被执行</li><li>PRI（new）&#x3D;PRI（old）+nice</li></ul><p>Nice可由用户指定，间接影响Priority</p><ul><li>nice可调整的范围为-20~19</li><li>root可随意调整</li><li>user只能调整自己进程的nice值，且范围为0~19（这是为了防止一般用户抢占系统资源）</li></ul><h3 id="nice"><a href="#nice" class="headerlink" title="nice"></a>nice</h3><p>用于给新执行的命令一个优先级</p><pre><code class="highlight bash"><span class="built_in">nice</span> [-n number] <span class="built_in">command</span></code></pre><h3 id="renice"><a href="#renice" class="headerlink" title="renice"></a>renice</h3><pre><code class="highlight bash">renice [number] PID</code></pre><h2 id="查看系统资源信息"><a href="#查看系统资源信息" class="headerlink" title="查看系统资源信息"></a>查看系统资源信息</h2><h3 id="free"><a href="#free" class="headerlink" title="free"></a>free</h3><p>内存使用</p><p>用过不少了，记得<code>-h</code>（human）和<code>-s</code>（不断刷新）就行了</p><h3 id="uname"><a href="#uname" class="headerlink" title="uname"></a>uname</h3><p>系统与内核信息</p><p>要啥有啥，直接看<code>--help</code></p><h3 id="uptime"><a href="#uptime" class="headerlink" title="uptime"></a>uptime</h3><p>用<code>w</code>吧</p><h3 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h3><p>高级话题了，先几个<code>-tunlp</code></p><h3 id="dmesg"><a href="#dmesg" class="headerlink" title="dmesg"></a>dmesg</h3><p>分析内核产生的信息</p><p>包括<strong>启动时一闪而过的</strong>，以及后面生成的</p><h3 id="vmstat"><a href="#vmstat" class="headerlink" title="vmstat"></a>vmstat</h3><p>检测系统资源变化，好东西</p><pre><code class="highlight bash">vmstat [-a]</code></pre><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-a</td><td>all</td></tr><tr><td>-fs</td><td>内存相关</td></tr><tr><td>-S</td><td>单位</td></tr><tr><td>-d</td><td>磁盘相关</td></tr><tr><td>-p partion</td><td>分区相关</td></tr></tbody></table><ul><li><p>procs字段说明</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>r</td><td>等待运行中的进程数量</td></tr><tr><td>b</td><td>不可唤醒的进程数量</td></tr></tbody></table></li><li><p>memory</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>swpd</td><td>swap分区</td></tr><tr><td>free</td><td>未被使用</td></tr><tr><td>buff</td><td>缓冲区</td></tr><tr><td>cache</td><td>告诉缓存</td></tr></tbody></table></li><li><p>swap</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>si</td><td>磁盘中进程取出的容量</td></tr><tr><td>so</td><td>内存不足而将没用的进程写入到磁盘中的swap容量</td></tr></tbody></table></li><li><p>io</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>bi</td><td>读入的区块数量</td></tr><tr><td>bo</td><td>写入到磁盘的区块数量</td></tr></tbody></table></li><li><p>system</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>in</td><td>每秒被中断的进程数量</td></tr><tr><td>cs</td><td>每秒执行的事件切换次数</td></tr></tbody></table></li><li><p>cpu</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>us</td><td>非内核层cpu的使用状态</td></tr><tr><td>sy</td><td>内核层cpu的使用状态</td></tr><tr><td>id</td><td>闲置的状态</td></tr><tr><td>wa</td><td>等待IO所耗费的cpu状态</td></tr><tr><td>st</td><td>被虚拟机所使用的cpu状态</td></tr></tbody></table></li></ul><h1 id="特殊文件与进程"><a href="#特殊文件与进程" class="headerlink" title="特殊文件与进程"></a>特殊文件与进程</h1><h2 id="proc-下的内容"><a href="#proc-下的内容" class="headerlink" title="&#x2F;proc&#x2F;*下的内容"></a>&#x2F;proc&#x2F;*下的内容</h2><table><thead><tr><th>文件</th><th>内容</th></tr></thead><tbody><tr><td>cmdline</td><td>加载内核时所执行相关命令与参数</td></tr><tr><td>cpuinfo</td><td>cpu</td></tr><tr><td>devices</td><td>主要设备的设备id</td></tr><tr><td>filesystems</td><td>系统已加载的文件系统</td></tr><tr><td>interrupts</td><td>系统上面的IRQ分配状态</td></tr><tr><td>ioports</td><td>各个io所配置的地址</td></tr><tr><td>kcore</td><td>就是内存大小（不要读这个）</td></tr><tr><td>loadavg</td><td>w，uptime，top的负载值</td></tr><tr><td>meminfo</td><td>free的内存信息</td></tr><tr><td>modules</td><td>内核加载的模块，即驱动</td></tr><tr><td>mounts</td><td>挂载数据</td></tr><tr><td>swaps</td><td>系统挂载的内存</td></tr><tr><td>partitions</td><td>fdisk -l的记录</td></tr><tr><td>uptime</td><td>。。。</td></tr><tr><td>version</td><td>内核版本呢，uname -a的记录值</td></tr><tr><td>bus&#x2F;*</td><td>总线设备，USB设备</td></tr></tbody></table><h2 id="查询已使用文件或已执行进程使用的文件"><a href="#查询已使用文件或已执行进程使用的文件" class="headerlink" title="查询已使用文件或已执行进程使用的文件"></a>查询已使用文件或已执行进程使用的文件</h2><h3 id="fuser"><a href="#fuser" class="headerlink" title="fuser"></a>fuser</h3><p>列出在使用当前文件的进程</p><pre><code class="highlight bash">fuser [-umv] [-k[i]] [-signal] <span class="built_in">dir</span>/file</code></pre><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-u</td><td>列出owner</td></tr><tr><td>-v</td><td>verbose</td></tr><tr><td>-k</td><td>找出使用该文件&#x2F;目录的PID并向其发送SIGKILL</td></tr><tr><td>-i</td><td>与k使用，发送前询问</td></tr></tbody></table><p>fuser结果中ACCESS字段的参数</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>c</td><td>此进程在当前目录下</td></tr><tr><td>e</td><td>可被触发为执行状态</td></tr><tr><td>f</td><td>是一个开启状态的文件</td></tr><tr><td>r</td><td>表示顶层目录</td></tr><tr><td>F</td><td>该文件被使用了，不过在等待响应</td></tr><tr><td>m</td><td>可能为共享的动态库</td></tr></tbody></table><h3 id="lsof"><a href="#lsof" class="headerlink" title="lsof"></a>lsof</h3><p>列出被进程使用的文件名称</p><pre><code class="highlight bash">lsof [-aUu] [+d]</code></pre><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-a</td><td>多项条件同时成立时才列出</td></tr><tr><td>-U</td><td>仅列出UNIK-like系统的socket文件类型</td></tr><tr><td>-u username</td><td>列出使用者相关进程的文件</td></tr><tr><td>+d dir</td><td>找出某个目录下被使用的文件</td></tr></tbody></table><h3 id="pidof"><a href="#pidof" class="headerlink" title="pidof"></a>pidof</h3><p>找出某个正在执行的进程的pid</p><pre><code class="highlight bash">pidof [-sx] program_name<span class="comment"># -s 仅列出一个pid，而不是所有</span><span class="comment"># -x 同时列出program name可能的PPIDn</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Operation </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 专栏：重学linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重学linux（11）</title>
      <link href="/Operation/Linux/1c6c2fe1/"/>
      <url>/Operation/Linux/1c6c2fe1/</url>
      
        <content type="html"><![CDATA[<h1 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h1><h2 id="只执行一次的任务"><a href="#只执行一次的任务" class="headerlink" title="只执行一次的任务"></a>只执行一次的任务</h2><h3 id="at和atd"><a href="#at和atd" class="headerlink" title="at和atd"></a>at和atd</h3><p><code>at</code>的原理</p><ul><li>需要首先开启<code>atd</code></li><li>在<code>/var/spool/at/</code>下写入一个定时文件</li><li>使用<code>/etc/at.allow</code>和<code>/etc/at.deny</code>来实现对at的使用限制</li></ul><h3 id="at"><a href="#at" class="headerlink" title="at"></a>at</h3><pre><code class="highlight bash">at [-mldv] TIME<span class="comment"># -m 任务完成后发送email给使用者，没错，是email</span><span class="comment"># -l 相当于atq，列出所有该使用者的at任务</span><span class="comment"># -d 相当于atrm，取消某个at任务</span><span class="comment"># -v 列出任务的详细时间</span><span class="comment"># -c 列出任务的实际命令内容</span><span class="comment"># TIME 时间格式</span><span class="comment"># HH:MM</span><span class="comment"># HH:MM YYYY-MM-DD # 22:22 2022-02-22</span><span class="comment"># HH:MM[am|pm] [Month] [Date] # 22:22 2022-02-22</span><span class="comment"># HH::MM + number [minutes|hour|days|weeks] now + 5 minutes</span></code></pre><h3 id="batch"><a href="#batch" class="headerlink" title="batch"></a>batch</h3><p>当系统负载小于0.8时立即执行，本质上是at任务每隔一分钟的轮询。</p><h2 id="循环执行的计划任务"><a href="#循环执行的计划任务" class="headerlink" title="循环执行的计划任务"></a>循环执行的计划任务</h2><ul><li><code>/etc/cron.allow</code>优先级比下面这个高</li><li><code>/etc/cron.deny</code>系统默认保留</li></ul><p>二者留一个，推荐下面这个。</p><p>crontab实际上是修改<code>/var/spool/cron/user</code>下的文件，但还是推荐使用<code>crontab -e</code>来修改</p><h3 id="cron格式"><a href="#cron格式" class="headerlink" title="cron格式"></a>cron格式</h3><pre><code class="highlight bash">0 12 * * * <span class="built_in">command</span><span class="comment"># 分钟 小时 日期 月份 周 命令</span><span class="comment"># 周与日月不可并存（据说新版没有这个问题了，不过鸟哥没有试过）</span></code></pre><table><thead><tr><th>用于时间的参数</th><th>含义</th></tr></thead><tbody><tr><td>*</td><td>任何时刻都行（相当于忽略）</td></tr><tr><td>,</td><td>分割时间段，比如3,6表示3和6</td></tr><tr><td>-</td><td>表示一段时间以内，比如3-6表似乎3到6</td></tr><tr><td>&#x2F;n</td><td>表示每隔一定时间</td></tr></tbody></table><pre><code class="highlight bash">crontab -r <span class="comment"># 删除所有crontab</span></code></pre><h3 id="系统的例行任务"><a href="#系统的例行任务" class="headerlink" title="系统的例行任务"></a>系统的例行任务</h3><p><code>/etc/crontab</code></p><p>看一眼就知道了，注意多了个执行人的字段</p><p><code>crond</code>服务读取的配置文件位置</p><ul><li>&#x2F;etc&#x2F;crontab</li><li>&#x2F;etc&#x2F;cron.d&#x2F;*</li><li>&#x2F;var&#x2F;spool&#x2F;cron&#x2F;*</li></ul><p>除此之外，&#x2F;etc&#x2F;crontab中还指定了每个小时都会由脚本<code>run-parts</code>执行一次<code>/etc/cron.hourly</code>下的内容，其中包括了<code>anacron</code></p><h2 id="可唤醒停机期间的工作任务"><a href="#可唤醒停机期间的工作任务" class="headerlink" title="可唤醒停机期间的工作任务"></a>可唤醒停机期间的工作任务</h2><p>用于解决“时间到了，但机器未启动而无法执行任务”的问题。</p><p>crontab会调用<code>/etc/cron.hourly/0anacron</code>来执行anacron，它会执行以下文件夹中的内容</p><ul><li>&#x2F;etc&#x2F;cron.daily</li><li>&#x2F;etc&#x2F;cron.weekly</li><li>&#x2F;etc&#x2F;cron.monthly</li></ul><p>anacron会对比其与0anacron的时间来判断crontab有无正常执行（所以要用文件名0anacron来确保anacron先更新时间戳）</p><h3 id="anacron"><a href="#anacron" class="headerlink" title="anacron"></a>anacron</h3><p>其配置文件位于<code>/etc/anacrontab</code>。</p><pre><code class="highlight bash">15cron.daily<span class="built_in">nice</span> run-parts /etc/cron.daily<span class="comment"># 天数 延迟时间 工作名称的定义 实际要执行的字符串</span><span class="comment"># 天数用于anacron执行时与/var/spool/anacron/内的时间记录文件对比，大于该日期时就执行</span><span class="comment"># 延迟执行的时间</span></code></pre><p>实际的执行流程</p><ul><li>crontab 调用anacron</li><li>读取&#x2F;etc&#x2F;anacrontab，读取到&#x2F;etc&#x2F;cron.daily</li><li>从&#x2F;var&#x2F;spool&#x2F;anacron&#x2F;cron.daily取出时间戳并与当前时间对比</li><li>若准备执行，则根据设置延迟N+START_HOURS_RANGE的时间</li><li>延迟结束后开始执行</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>at：定时执行一次</li><li>crontab：定时执行</li><li>anacron：定期执行</li></ul>]]></content>
      
      
      <categories>
          
          <category> Operation </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 专栏：重学linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重学linux（10）</title>
      <link href="/Operation/Linux/a4d04884/"/>
      <url>/Operation/Linux/a4d04884/</url>
      
        <content type="html"><![CDATA[<h1 id="磁盘配额（Quota）"><a href="#磁盘配额（Quota）" class="headerlink" title="磁盘配额（Quota）"></a>磁盘配额（Quota）</h1><p>多人模式下的磁盘容量分配，感觉用不到，略了。</p><h1 id="RAID"><a href="#RAID" class="headerlink" title="RAID"></a>RAID</h1><p><code>Redundant Arrays of Inexpensive Disks</code></p><p>已经熟悉这个话题了，稍微记一下</p><ul><li>raid0</li><li>raid1</li><li>raid1+0，raid0+1</li><li>raid5，raid6</li><li>热备份磁盘：该磁盘不包含在阵列中，当阵列中磁盘有任何损坏时，该磁盘会被拉入阵列</li></ul><h2 id="硬件阵列"><a href="#硬件阵列" class="headerlink" title="硬件阵列"></a>硬件阵列</h2><p>贵</p><h2 id="软件阵列"><a href="#软件阵列" class="headerlink" title="软件阵列"></a>软件阵列</h2><h3 id="mdadm"><a href="#mdadm" class="headerlink" title="mdadm"></a>mdadm</h3><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>–create</td><td>建立raid</td></tr><tr><td>–auto&#x3D;yes</td><td></td></tr><tr><td>–chunk&#x3D;Nk</td><td>决定设备的chunk大小</td></tr><tr><td>–raid-devices&#x3D;N</td><td>使用几个磁盘分区作为磁盘阵列的设备</td></tr><tr><td>–spare-devices&#x3D;N</td><td>使用几个磁盘作为备用设备</td></tr><tr><td>–level&#x3D;[0,1,5]</td><td>阵列级别</td></tr><tr><td>–detail</td><td>显示磁盘阵列设备的详细信息</td></tr><tr><td>–manage</td><td>管理磁盘</td></tr></tbody></table><h1 id="LVM"><a href="#LVM" class="headerlink" title="LVM"></a>LVM</h1><p>好东西，已经用过一次了，复习下。</p><ul><li>PV: Physical Volume</li><li>VG: Volume Group</li><li>PE: Physical Extent（会限制lvm的最大容量，现在不重要了）</li><li>LV: Logical Volume</li></ul><h3 id="以下为建立流程"><a href="#以下为建立流程" class="headerlink" title="以下为建立流程"></a>以下为建立流程</h3><h4 id="Disk阶段"><a href="#Disk阶段" class="headerlink" title="Disk阶段"></a>Disk阶段</h4><p>gdisk分个区</p><h4 id="PV阶段"><a href="#PV阶段" class="headerlink" title="PV阶段"></a>PV阶段</h4><pre><code class="highlight bash">pvcreatepvscanpvdisplaypvremove</code></pre><h4 id="VG阶段"><a href="#VG阶段" class="headerlink" title="VG阶段"></a>VG阶段</h4><pre><code class="highlight bash">vgcreatevgscanvgdisplayvgextendvgreducevgchangevgremote</code></pre><h4 id="LV阶段"><a href="#LV阶段" class="headerlink" title="LV阶段"></a>LV阶段</h4><pre><code class="highlight bash">lvcreatelvscanlvdisplaylvextendlvreducelvremovelvresize</code></pre><h3 id="以下为放大流程"><a href="#以下为放大流程" class="headerlink" title="以下为放大流程"></a>以下为放大流程</h3><ul><li>vg阶段需要剩余的容量：<code>pvcreate</code>，<code>vgextend</code></li><li>LV阶段产生更多可用容量：<code>lvresize</code></li><li>文件系统阶段的放大：<code>xfs_growfs</code>（注意，xfs只能放大，不能缩小（但是ext4有））</li></ul><h3 id="LVM-thin-Volume"><a href="#LVM-thin-Volume" class="headerlink" title="LVM thin Volume"></a>LVM thin Volume</h3><p>LVM动态调整磁盘使用率，即先声明大小，然后使用时分配（当然，一定不要超过实际的容量，不然会损坏数据）</p><h3 id="LV-snapshot"><a href="#LV-snapshot" class="headerlink" title="LV snapshot"></a>LV snapshot</h3><p>在<code>lvcreate</code>时加入<code>-s</code>选项表示这是一个快照分区，这是个很有用的功能，但鸟哥给的不够详细。用到的时候再来看看。</p>]]></content>
      
      
      <categories>
          
          <category> Operation </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 专栏：重学linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重学linux（9）</title>
      <link href="/Operation/Linux/8aa2099f/"/>
      <url>/Operation/Linux/8aa2099f/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux账号与用户组"><a href="#Linux账号与用户组" class="headerlink" title="Linux账号与用户组"></a>Linux账号与用户组</h1><h2 id="UID和GID"><a href="#UID和GID" class="headerlink" title="UID和GID"></a>UID和GID</h2><p>总之就是非常重要，不要乱改&#x2F;etc&#x2F;passwd下的东西</p><h2 id="用户账号"><a href="#用户账号" class="headerlink" title="用户账号"></a>用户账号</h2><p>登陆时OS做了什么</p><ul><li>在&#x2F;etc&#x2F;passwd中查询是否有该用户名，若有，读出UID和GID</li><li>在&#x2F;etc&#x2F;shadow中查询账号和UID，然后确认密码</li></ul><p><em>所以要保护好上述内容的权限</em></p><h3 id="etc-passwd的文件结构"><a href="#etc-passwd的文件结构" class="headerlink" title="&#x2F;etc&#x2F;passwd的文件结构"></a>&#x2F;etc&#x2F;passwd的文件结构</h3><p>每行一个账号，以冒号分割</p><p><code>root:x:0:0:root:/root:/bin/bash</code></p><p>按顺序分别为</p><ul><li>账号名</li><li>密码（woc），早期的密码是放在这的，后来移动到&#x2F;etc&#x2F;shadow上了</li><li>UID</li><li>GID</li><li>用户信息说明，说明这个账号是干啥的</li><li>家目录</li><li>使用的shell</li></ul><h3 id="etc-shadow的文件结构"><a href="#etc-shadow的文件结构" class="headerlink" title="&#x2F;etc&#x2F;shadow的文件结构"></a>&#x2F;etc&#x2F;shadow的文件结构</h3><pre><code class="highlight bash">root:!:19032:0:99999:7:::daemon:*:18480:0:99999:7:::bin:*:18480:0:99999:7:::</code></pre><p>同上，按顺序</p><ul><li>账号名称</li><li>密码</li><li>最近修改密码的日期，单位是天，指到1970年1月1号的天数。</li><li>密码不可被修改的天数（与第三个字段相比较）</li><li>密码需要被修改的天数（与第三个字段相比较）</li><li>密码需要被修改的期限前的警告天数（与第五个字段比较）</li><li>密码过期后强制修改的天数（与第五个字段比较）</li><li>保留字段</li></ul><p>关于shadow，注意要保持其权限为600。</p><p>关于shadow的加密方式，根据linux distribution版本不同而不懂，可以使用<code>authconfig --test | grep hashing</code>查看。（好像这个指令太老了？）</p><h2 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h2><h3 id="etc-group的文件结构"><a href="#etc-group的文件结构" class="headerlink" title="&#x2F;etc&#x2F;group的文件结构"></a>&#x2F;etc&#x2F;group的文件结构</h3><p>格式同&#x2F;etc&#x2F;passwd，按顺序：</p><ul><li>组名</li><li>用户组密码</li><li>GID</li><li>此用户组支持的账号名称</li></ul><h3 id="初始用户组与有效用户组"><a href="#初始用户组与有效用户组" class="headerlink" title="初始用户组与有效用户组"></a>初始用户组与有效用户组</h3><p>&#x2F;etc&#x2F;passwd中记录的GID为<strong>初始用户组</strong>，用户一登陆就拥有该用户组的所有权限。</p><p>&#x2F;etc&#x2F;group中记录了某用户后，该用户也<strong>支持</strong>该用户组。</p><ul><li>使用<code>groups</code>查看当前用户支持的所用用户组，显示的第一个用户组为当前的<strong>有效用户组</strong></li><li>使用<code>newgrp</code>切换有效用户组。注意，该指令使用一个新的shell来切换有效用户组，因此要使用<code>exit</code>来退出而不是直接切换回去。</li></ul><h3 id="etc-gshadow的文件结构"><a href="#etc-gshadow的文件结构" class="headerlink" title="&#x2F;etc&#x2F;gshadow的文件结构"></a>&#x2F;etc&#x2F;gshadow的文件结构</h3><p>格式同上，按顺序：</p><ul><li>组名</li><li>密码栏，<code>!</code>表示无合法密码（即无用户组管理员）</li><li>用户组管理员的账号</li><li>加入该用户组支持的所属账号</li></ul><h1 id="账号管理"><a href="#账号管理" class="headerlink" title="账号管理"></a>账号管理</h1><h2 id="新增和删除用户"><a href="#新增和删除用户" class="headerlink" title="新增和删除用户"></a>新增和删除用户</h2><h3 id="useradd"><a href="#useradd" class="headerlink" title="useradd"></a>useradd</h3><pre><code class="highlight bash">useradd [-u UID] [-g initial group] [-G other group] name</code></pre><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-u</td><td>UID</td></tr><tr><td>-g</td><td>初始用户组</td></tr><tr><td>-G</td><td>次要用户组</td></tr><tr><td>-M</td><td>强制不要建立用户家目录</td></tr><tr><td>-m</td><td>强制要建立用户家目录</td></tr><tr><td>-c</td><td>用户说明</td></tr><tr><td>-d</td><td>试某个目录成为家目录，注意，务必要使用绝对路径</td></tr><tr><td>-r</td><td>建立系统账号，即UID小于1000</td></tr><tr><td>-s</td><td>指定使用的shell</td></tr><tr><td>-e</td><td>设定账号失效日期</td></tr><tr><td>-f</td><td>指定密码是否会失效</td></tr></tbody></table><p>使用useradd时，linux会做以下内容</p><ul><li>向&#x2F;etc&#x2F;passwd中写入一行与账号相关的信息</li><li>向&#x2F;etc&#x2F;shadow中写入此账号的密码相关信息，但还没有真的密码</li><li>向&#x2F;etc&#x2F;group中写入一个默认的组名</li><li>在&#x2F;home下建立默认的家目录、</li></ul><p>使用<code>useradd -D</code>查看其默认值，其内容来源于&#x2F;etc&#x2F;default&#x2F;useradd</p><pre><code class="highlight bash">GROUP=100 <span class="comment"># 默认GID</span>HOME=/home <span class="comment"># 默认家目录</span>INACTIVE=-1 <span class="comment"># 密码失效日期</span>EXPIRE= <span class="comment"># 账号失效日期</span>SHELL=/bin/sh <span class="comment"># 默认的shell</span>SKEL=/etc/skel <span class="comment"># 用户家目录内容的参考数据</span>CREATE_MAIL_SPOOL=no <span class="comment"># 是否主动帮用户建立邮箱</span></code></pre><p>除此之外，UID&#x2F;GID的密码参数在&#x2F;etc&#x2F;login.defs文件（下面这个是筛选过的）</p><pre><code class="highlight bash">MAIL_DIR        /var/mail <span class="comment"># 默认邮箱目录</span>FAILLOG_ENAB            <span class="built_in">yes</span>LOG_UNKFAIL_ENAB        noLOG_OK_LOGINS           noSYSLOG_SU_ENAB          <span class="built_in">yes</span>SYSLOG_SG_ENAB          <span class="built_in">yes</span>FTMP_FILE       /var/log/btmpSU_NAME         suHUSHLOGIN_FILE  .hushloginENV_SUPATH      PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/binENV_PATH        PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/gamesTTYGROUP        <span class="built_in">tty</span>TTYPERM         0600ERASECHAR       0177KILLCHAR        025UMASK           02 <span class="comment"># 用户的umask</span>PASS_MAX_DAYS   99999 <span class="comment"># 多久需要修改密码</span>PASS_MIN_DAYS   0 <span class="comment"># 多久不可重设密码</span>PASS_WARN_AGE   7 <span class="comment"># 密码过期警告日期</span>UID_MIN                  1000 <span class="comment"># 用户可以使用的最小UID</span>UID_MAX                 60000 <span class="comment"># 最大UID</span>GID_MIN                  1000 <span class="comment"># 用户可以使用的最小GID</span>GID_MAX                 60000 <span class="comment"># 最大GID</span><span class="comment">#SYS_GID_MIN              100 # 系统账号保留的最小UID</span><span class="comment">#SYS_GID_MAX              999 # 系统账号的最大UID</span>LOGIN_RETRIES           5LOGIN_TIMEOUT           60CHFN_RESTRICT           rwhDEFAULT_HOME    <span class="built_in">yes</span> <span class="comment"># 默认是否为用户创建家目录</span>USERGROUPS_ENAB <span class="built_in">yes</span> <span class="comment"># 使用userdel删除用户时，是否删除初始用户组</span>ENCRYPT_METHOD SHA512 <span class="comment"># 密码的加密机制</span></code></pre><h3 id="passwd"><a href="#passwd" class="headerlink" title="passwd"></a>passwd</h3><p>刚建好的账号是锁定的，得设置密码</p><pre><code class="highlight bash">passwd [] username</code></pre><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>–stdin</td><td>接收前一个pipe的数据</td></tr><tr><td>-l</td><td>lock，使密码失效</td></tr><tr><td>-u</td><td>unlock</td></tr><tr><td>-S</td><td>列出密码相关的信息，主要是展示&#x2F;etc&#x2F;shadows中的内容</td></tr><tr><td>-n</td><td>多久不可修改密码的天数</td></tr><tr><td>-x</td><td>多久必须修改密码</td></tr><tr><td>-w</td><td>密码过期前的警告天数</td></tr><tr><td>-i</td><td>密码失效日期</td></tr></tbody></table><h3 id="chage"><a href="#chage" class="headerlink" title="chage"></a>chage</h3><p>高级一点的<code>passwd</code></p><pre><code class="highlight bash">chage [-option] username</code></pre><table><thead><tr><th>参数</th><th>选项</th></tr></thead><tbody><tr><td>-l</td><td>列出详细信息</td></tr><tr><td>-d</td><td>修改shadow第三栏位，最近一次修改日期的时间</td></tr><tr><td>-m</td><td>第四栏位，密码保留天数</td></tr><tr><td>-M</td><td>第五栏位，密码多久需要修改</td></tr><tr><td>-W</td><td>第六栏位，密码过期前警告</td></tr><tr><td>-I</td><td>第七栏位，密码失效日期</td></tr><tr><td>-E</td><td>第八栏位，账号失效日期</td></tr></tbody></table><h3 id="usermod"><a href="#usermod" class="headerlink" title="usermod"></a>usermod</h3><p>修改用户设置</p><h4 id="userdel"><a href="#userdel" class="headerlink" title="userdel"></a>userdel</h4><p>删除用户，包括以下数据</p><ul><li>&#x2F;etc&#x2F;passwd，&#x2F;etc&#x2F;shadow</li><li>&#x2F;etc&#x2F;group，&#x2F;etc&#x2F;gshadow</li><li>&#x2F;home&#x2F;username，&#x2F;var&#x2F;spool&#x2F;mail&#x2F;username</li></ul><pre><code class="highlight bash">userdel [-r] username<span class="comment"># -r 表示将家目录也删除</span></code></pre><h2 id="用户功能"><a href="#用户功能" class="headerlink" title="用户功能"></a>用户功能</h2><h3 id="id"><a href="#id" class="headerlink" title="id"></a>id</h3><p>查询自己（或别人）的uid等基本信息</p><h3 id="finger"><a href="#finger" class="headerlink" title="finger"></a>finger</h3><p>查看更多信息（默认不安装）</p><h3 id="chfg"><a href="#chfg" class="headerlink" title="chfg"></a>chfg</h3><p>change finger，感觉用不上</p><h3 id="chsh"><a href="#chsh" class="headerlink" title="chsh"></a>chsh</h3><p>change shell</p><pre><code class="highlight bash">chsh -l <span class="comment"># 列出可用的shell</span>chsh -s <span class="comment"># 设置shell</span></code></pre><h2 id="新增和删除用户组"><a href="#新增和删除用户组" class="headerlink" title="新增和删除用户组"></a>新增和删除用户组</h2><h3 id="groupadd"><a href="#groupadd" class="headerlink" title="groupadd"></a>groupadd</h3><pre><code class="highlight bash">groupadd [-g gid] [-r] groupname<span class="comment"># -r 建立系统用户组</span></code></pre><h3 id="groupmod"><a href="#groupmod" class="headerlink" title="groupmod"></a>groupmod</h3><pre><code class="highlight bash">groupmod [-g gid] [-n group_name] groupname<span class="comment"># -n 用来修改现有的用户组名</span></code></pre><h3 id="groupdel"><a href="#groupdel" class="headerlink" title="groupdel"></a>groupdel</h3><pre><code class="highlight bash">groupdel [groupname]</code></pre><p>若有用户使用某个用户组作为初始用户组，则该用户组无法删除。此时可以</p><ul><li>修改用户的GID</li><li>删除该用户</li></ul><h3 id="gpasswd"><a href="#gpasswd" class="headerlink" title="gpasswd"></a>gpasswd</h3><p>建立group管理员</p><pre><code class="highlight bash"><span class="comment"># root的使用</span>gpasswd groupname <span class="comment"># 设置group密码</span>gpasswd -A user groupname <span class="comment"># 指定group的用户管理员</span>gpasswd -M user groupname <span class="comment"># 将用户加入group</span><span class="comment"># -r 使group密码失效</span><span class="comment"># -R 使group密码栏失效</span><span class="comment"># 用户组管理员的使用</span>gpasswd -a user <span class="comment"># 添加用户</span>gpasswd -d user <span class="comment"># 删除用户</span></code></pre><h1 id="ACL的使用"><a href="#ACL的使用" class="headerlink" title="ACL的使用"></a>ACL的使用</h1><p>authconfig和authconfig-tui可用于外部身份认证</p><h2 id="ACL介绍"><a href="#ACL介绍" class="headerlink" title="ACL介绍"></a>ACL介绍</h2><p><code>Access Control List</code></p><p>ACL可针对的方面</p><ul><li>user</li><li>group</li><li>mask（默认属性）</li></ul><h2 id="ACL的设置"><a href="#ACL的设置" class="headerlink" title="ACL的设置"></a>ACL的设置</h2><h3 id="setfacl"><a href="#setfacl" class="headerlink" title="setfacl"></a>setfacl</h3><p>用于设置某个文件&#x2F;目录的ACL权限</p><pre><code class="highlight bash">setfacl [bkRd] [&#123;-m|-x&#125; acl argument] filename<span class="comment"># ACL参数格式</span>u:user:[rwx] <span class="comment"># 对特定user</span>g:group:[rwx] <span class="comment"># 对特定group</span>m:[rwx] <span class="comment"># 对mask(有效权限)</span>d:[ug]:[rwx] <span class="comment">#默认权限</span></code></pre><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-m</td><td>设置后续的ACL参数</td></tr><tr><td>-x</td><td>删除后续的ACL参数，删除时用<code>-</code>来占位</td></tr><tr><td>-b</td><td>删除所有的ACL参数，删除时用<code>-</code>来占位</td></tr><tr><td>-k</td><td>删除默认的ACL参数</td></tr><tr><td>-R</td><td>递归</td></tr><tr><td>-d</td><td>设置默认的ACL参数（只对目录有效）</td></tr></tbody></table><h3 id="getfacl"><a href="#getfacl" class="headerlink" title="getfacl"></a>getfacl</h3><p>用于查看某个文件&#x2F;目录的ACL权限</p><pre><code class="highlight bash">getfacl filename</code></pre><h1 id="用户身份切换"><a href="#用户身份切换" class="headerlink" title="用户身份切换"></a>用户身份切换</h1><h2 id="su"><a href="#su" class="headerlink" title="su"></a>su</h2><pre><code class="highlight bash">su [-lm] [-c <span class="built_in">command</span>] [username]<span class="comment"># - 使用login-shell方式登录</span><span class="comment"># -l 同上，但后面必须加username</span><span class="comment"># 不加-就是nologin-shell登录</span><span class="comment"># -m 和 -p表示“使用目前的环境变量设置，而不读取新使用者的配置为文件</span><span class="comment"># -c 只执行一次command</span></code></pre><p><strong>注：那个<code>-</code>很重要</strong></p><h2 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h2><p>在<code>/etc/sudoers</code>内记录</p><pre><code class="highlight bash"><span class="built_in">sudo</span> [-b] [-u username]<span class="comment"># -b background，将命令放到后台进行</span><span class="comment"># -u 后面接欲切换的用户，默认为root</span></code></pre><h3 id="sudo的执行流程"><a href="#sudo的执行流程" class="headerlink" title="sudo的执行流程"></a>sudo的执行流程</h3><ul><li>系统查看&#x2F;etc&#x2F;sudoers文件中该用户是否有sudo权限</li><li>让用户输入自己的密码，若自己就是要切换的用户，则不必输入密码。root使用sudo也不需要输入密码</li><li>执行命令</li></ul><h3 id="修改-etc-sudoers"><a href="#修改-etc-sudoers" class="headerlink" title="修改&#x2F;etc&#x2F;sudoers"></a>修改&#x2F;etc&#x2F;sudoers</h3><p>该文件具有一定规范，因此更推荐使用<code>visudo</code>去修改（怎么觉得没啥区别？）</p><pre><code class="highlight bash">rootALL=(ALL)ALL <span class="comment"># usernamelogin_host_name=(user_available)  command_available</span>%wheelALL=(ALL)ALL <span class="comment"># % represent group</span>%wheelALL=(ALL)NOPASSWD: ALL <span class="comment"># 免密</span>user1ALL=(root)!/usr/bin/psswd, /usr/bin/passwd [A-za-z]*, !/usr/bin/passwd root <span class="comment">#!表示不可执行，这样就可以修改别的用户的密码，但不能修改root的</span>User_Alias ADMPW = pro1,pro2,pro3 <span class="comment"># 别名建立新账号，注意该账号必须是大写</span>Cmnd_Alias ADMPWCOM = !/usr/bin/passwd,/usr/bin/passwd [A-Za-z]*,!/usr/bin/passwd rootADMPWALL=(root)ADMPWCOM</code></pre><h3 id="关于切换到root用户的方法"><a href="#关于切换到root用户的方法" class="headerlink" title="关于切换到root用户的方法"></a>关于切换到root用户的方法</h3><p>以前的我：<code>su</code>。这样是使用nologin shell的变量文件登录的root</p><p>那是不是应该<code>su -</code>，这样就完整的读取了root的login shell配置文件</p><p>如果我只执行一条命令的话，那就是<code>su - -c command</code></p><p>不过这样还要输入root的密码，要是没有root密码呢？</p><p><code>sudo</code>咯，这样也是每条指令前都要加<code>sudo</code></p><p>鸟哥还教了一个方法，在<code>/etc/sudoers</code>中这样写</p><pre><code class="highlight bash">User_Alias ADMINS = user1,user2ADMINSALL=(root)/bin/su -<span class="comment"># 然后就可以这样登录root了</span><span class="built_in">sudo</span> su -</code></pre><p>不过现在的主流方式好像是<code>sudo -i</code></p><p>man page的说法是，这样相当于登录的root的login shell，读取了它的所有环境变量，并以一个interactive shell的形式呈现，还帮忙把用户切换到家目录里去了。</p><p>这应该是sudo提供的一个“装的很像”的切换方式，既然装的这么像，那还是用它。</p><h1 id="PAM模块"><a href="#PAM模块" class="headerlink" title="PAM模块"></a>PAM模块</h1><p><code>Pluggable Authentication Modules</code></p><p>是个linux内置的api，返回的结果要么成功要么失败。</p><p>是个很nb的功能。跳了，暂时用不上，但迟早要用上，一定要记得回来看</p><p>&#x2F;&#x2F;todo</p><h1 id="linux主机上信息的传递"><a href="#linux主机上信息的传递" class="headerlink" title="linux主机上信息的传递"></a>linux主机上信息的传递</h1><h2 id="查询用户"><a href="#查询用户" class="headerlink" title="查询用户"></a>查询用户</h2><h3 id="w"><a href="#w" class="headerlink" title="w"></a>w</h3><p>用的多，略</p><h3 id="who"><a href="#who" class="headerlink" title="who"></a>who</h3><p>有w了，懒得用</p><h3 id="last"><a href="#last" class="headerlink" title="last"></a>last</h3><p>最近的登录记录</p><h3 id="lastlog"><a href="#lastlog" class="headerlink" title="lastlog"></a>lastlog</h3><p>各个用户的最近登录记录</p><h2 id="用户交流"><a href="#用户交流" class="headerlink" title="用户交流"></a>用户交流</h2><h3 id="write"><a href="#write" class="headerlink" title="write"></a>write</h3><p><code>write username [terminal]</code></p><p>就硬发，打断你也要发</p><h3 id="mesg"><a href="#mesg" class="headerlink" title="mesg"></a>mesg</h3><p>可使用<code>mesg n</code>强制闭上鼻子不听别人发（但阻止不了root）</p><p><code>mesg y</code>再打开</p><h3 id="wall"><a href="#wall" class="headerlink" title="wall"></a>wall</h3><p>发给所有人</p><h3 id="用户邮箱"><a href="#用户邮箱" class="headerlink" title="用户邮箱"></a>用户邮箱</h3><p>再次提醒：&#x2F;var&#x2F;spool&#x2F;mail</p><h3 id="mail"><a href="#mail" class="headerlink" title="mail"></a>mail</h3><pre><code class="highlight bash">mail -s <span class="string">&quot;title&quot;</span> user<span class="comment"># 然后这里输入 . 来表示结束（我猜ctrl+d的EOF也可以）</span><span class="comment"># 也可以用stdin重定向进来</span>mail <span class="comment"># 进入交互界面，查看邮件</span>&amp; <span class="comment">#&lt;== 这是个提示符，示意你输命令</span></code></pre><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td>?</td><td>?</td></tr><tr><td>h</td><td>列出邮件标头，h 40</td></tr><tr><td>d</td><td>删除，d10，d20-40</td></tr><tr><td>s</td><td>存储邮件内容，s 5 ~&#x2F;mail.file</td></tr><tr><td>x</td><td>不做任何事直接退出</td></tr><tr><td>q</td><td>保存后退出</td></tr></tbody></table><h1 id="创建大量账号"><a href="#创建大量账号" class="headerlink" title="创建大量账号"></a>创建大量账号</h1><p>高级话题，稍微看看</p><h2 id="pwck"><a href="#pwck" class="headerlink" title="pwck"></a>pwck</h2><p>用于检查&#x2F;etc&#x2F;passwd中的信息是否正确</p><h2 id="grpck"><a href="#grpck" class="headerlink" title="grpck"></a>grpck</h2><p>检查用户组</p><h2 id="pwconv"><a href="#pwconv" class="headerlink" title="pwconv"></a>pwconv</h2><p>将&#x2F;etc&#x2F;passwd中的账号和密码移动到&#x2F;etc&#x2F;shadow中，如果用useradd之类的话，是没它什么事的</p><h2 id="pwunconv"><a href="#pwunconv" class="headerlink" title="pwunconv"></a>pwunconv</h2><p>将&#x2F;etc&#x2F;shadow写入&#x2F;etc&#x2F;passwd，然后删除&#x2F;etc&#x2F;shadow（危？）</p><h2 id="chpasswd"><a href="#chpasswd" class="headerlink" title="chpasswd"></a>chpasswd</h2><p>读入未加密的密码，加密后写入&#x2F;etc&#x2F;shadown中，示例：<code>echo &quot;user1:abcdefg&quot; | chpasswd</code></p><h3 id="一个大量创建账号的模板"><a href="#一个大量创建账号的模板" class="headerlink" title="一个大量创建账号的模板"></a>一个大量创建账号的模板</h3><p>用不到的样子</p>]]></content>
      
      
      <categories>
          
          <category> Operation </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 专栏：重学linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重学linux（8）</title>
      <link href="/Operation/Linux/321e6efa/"/>
      <url>/Operation/Linux/321e6efa/</url>
      
        <content type="html"><![CDATA[<h1 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h1><h2 id="stream"><a href="#stream" class="headerlink" title="stream"></a>stream</h2><ul><li>stdin: code 0,&lt; &lt;&lt;</li><li>stdout: code 1,&gt; &gt;&gt;</li><li>stderr: code 2,2&gt; 2&gt;&gt;</li></ul><p>丢弃数据<code>/dev/null</code></p><p>所有输出重定向至同一文件<code>2&gt;&amp;1</code>或<code>&amp;&gt;</code></p><p><code>&lt;&lt;</code>右侧用于定义结束字符</p><h2 id="和"><a href="#和" class="headerlink" title="; ,&amp;&amp;和 ||"></a><code>;</code> ,<code>&amp;&amp;</code>和 <code>||</code></h2><p>  <code>$?</code>查看上一条指令的返回值</p><h1 id="pipe"><a href="#pipe" class="headerlink" title="pipe"></a>pipe</h1><p>将前一个command的stdout作为后一个command的stdin</p><p><em>注</em>：可以使用前面的<code>2&gt;&amp;1</code>来使得stdout也通过pipe。</p><h2 id="选取"><a href="#选取" class="headerlink" title="选取"></a>选取</h2><h3 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h3><pre><code class="highlight bash"><span class="comment"># 按分隔符来处理数据</span><span class="built_in">cut</span> -d <span class="string">&#x27;divide character&#x27;</span> -c <span class="string">&#x27;character number&#x27;</span> -f field<span class="comment"># -c 取一个字符区间 如 -c 12- 或 -c -12</span><span class="comment"># -f 指定第一个区间</span></code></pre><h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><pre><code class="highlight bash"><span class="comment"># 按行来处理数据</span>grep <span class="string">&#x27;charcter&#x27;</span> filename<span class="comment"># -c 计算查找到的数量</span><span class="comment"># -i 忽略大小写</span><span class="comment"># -n 输出符号</span><span class="comment"># -v 反选</span></code></pre><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-f</td><td>忽略大小写</td></tr><tr><td>-b</td><td>忽略最前面的空格</td></tr><tr><td>-M</td><td>以月份排序</td></tr><tr><td>-n</td><td>以纯数字排序</td></tr><tr><td>-r</td><td>反向</td></tr><tr><td>-u</td><td>uniq，相同选项只列出一项</td></tr><tr><td>-t</td><td>分隔符</td></tr><tr><td>-k</td><td>选定区间</td></tr></tbody></table><pre><code class="highlight bash"><span class="comment"># 一直想干的事，把/etc/passwd按uid从小到大排序</span><span class="built_in">cat</span> /etc/passwd | <span class="built_in">sort</span> -t <span class="string">&#x27;:&#x27;</span> -k 3 -r</code></pre><h3 id="uniq"><a href="#uniq" class="headerlink" title="uniq"></a>uniq</h3><p>去重</p><h3 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h3><p>统计字数，直接使用输出的数据分别为行数，字数，字符数</p><p>可以用选项<code>-l</code>,<code>-w</code>,<code>-m</code>，分别输出</p><h2 id="双向重定向"><a href="#双向重定向" class="headerlink" title="双向重定向"></a>双向重定向</h2><h3 id="tee"><a href="#tee" class="headerlink" title="tee"></a>tee</h3><pre><code class="highlight bash"><span class="built_in">tee</span> [-a] file<span class="comment"># -a append</span></code></pre><p>将数据流分别重定向到file和screen。输送到screen的部分实质上是stdout，也就是说可以接着重定向。</p><h2 id="字符替换"><a href="#字符替换" class="headerlink" title="字符替换"></a>字符替换</h2><h3 id="tr"><a href="#tr" class="headerlink" title="tr"></a>tr</h3><p>删除一段信息中的某些文字</p><pre><code class="highlight bash"><span class="built_in">tr</span> [-ds] SET1<span class="comment"># -d delete</span><span class="comment"># -s substitude</span><span class="comment"># 大小写转换</span><span class="built_in">ls</span> -l / | <span class="built_in">tr</span> <span class="string">&#x27;[a-z]&#x27;</span> <span class="string">&#x27;[A-Z]&#x27;</span><span class="comment"># 删除字符</span><span class="built_in">cat</span> /etc/passwd | <span class="built_in">tr</span> -d <span class="string">&#x27;:&#x27;</span><span class="comment"># dos2unix</span><span class="built_in">cat</span> file | <span class="built_in">tr</span> -d <span class="string">&#x27;\r&#x27;</span> &gt; newfile <span class="comment"># \r是dos的换行符</span></code></pre><h3 id="col"><a href="#col" class="headerlink" title="col"></a>col</h3><p>tab转空格（终于找到这个令人好东西了，可以解决好多奇怪的tab按键）</p><pre><code class="highlight bash">col -x <span class="comment"># tab转空格</span></code></pre><h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><p>将两个文件有相同数据的部分合并</p><pre><code class="highlight bash"><span class="built_in">join</span> -t <span class="string">&#x27;分隔符&#x27;</span> -1 第x部分 file_1 -2 第y部分 file_2<span class="built_in">join</span> -t <span class="string">&#x27;:&#x27;</span> -l 4 /etc/passwd -2 3 /etc/group | <span class="built_in">head</span> -n 3</code></pre><p>过于高级，暂时不展开。</p><h3 id="paste"><a href="#paste" class="headerlink" title="paste"></a>paste</h3><p>将两个文件的同一行粘贴在一起</p><pre><code class="highlight bash"><span class="built_in">paste</span> [-d 分隔符，默认为tab] file_1 file_2</code></pre><h3 id="expand"><a href="#expand" class="headerlink" title="expand"></a>expand</h3><p>tab转空格（又来？）</p><pre><code class="highlight bash"><span class="built_in">expand</span> [-t tab转空格的数量,默认为8] file</code></pre><h2 id="文件划分"><a href="#文件划分" class="headerlink" title="文件划分"></a>文件划分</h2><h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><pre><code class="highlight bash"><span class="built_in">split</span> [-bt] file PREFIX-b: 按大小划分-t: 按行数划分PREFIX: 分割后的文件名前缀（后缀会按abc的方式命名）<span class="built_in">cd</span> /tmp; <span class="built_in">split</span> -b 300k /etc/services services</code></pre><h3 id="重组"><a href="#重组" class="headerlink" title="重组"></a>重组</h3><p>使用重定向即可</p><pre><code class="highlight bash"><span class="built_in">cat</span> services* &gt;&gt; services_back</code></pre><h2 id="参数代换"><a href="#参数代换" class="headerlink" title="参数代换"></a>参数代换</h2><h3 id="xargs"><a href="#xargs" class="headerlink" title="xargs"></a>xargs</h3><p>用于产生某个命令的参数</p><p>超级nb的东西，用于给不支持管道的命令提供参数。</p><pre><code class="highlight bash"><span class="built_in">id</span> root<span class="comment"># 使用id可以查询某个用户的id信息</span><span class="comment"># 接下来查询/etc/passwd中前3个用户的id信息</span> <span class="built_in">cut</span> -d <span class="string">&#x27;:&#x27;</span> -f 1 /etc/passwd | <span class="built_in">head</span> -n 3 | <span class="built_in">id</span><span class="comment"># 最后只执行了id，因为id不是管道命令，不接受前面的参数</span> <span class="built_in">cut</span> -d <span class="string">&#x27;:&#x27;</span> -f 1 /etc/passwd | <span class="built_in">head</span> -n 3 | xargs -n 1 <span class="built_in">id</span><span class="comment"># 要制定id只接收1个参数，多了也不行</span>xargs [-0epn] <span class="built_in">command</span></code></pre><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-0</td><td>将stdin中的特殊字符还原成一般字符</td></tr><tr><td>-e</td><td>指定EOF</td></tr><tr><td>-p</td><td>每次执行都询问用户</td></tr><tr><td>-n</td><td>指定command要使用几个参数</td></tr></tbody></table><h2 id="减号"><a href="#减号" class="headerlink" title="- 减号"></a>- 减号</h2><p>pipe中，<code>-</code>可用于替代stdin和stdout</p><pre><code class="highlight bash">tar -cvf - /home | tar -xvf - -C /tmp/homework<span class="comment"># 前一个tar打包的数据不会写入到文件，而是交给pipe</span><span class="comment"># 后一个tar的stdin来自pipe</span></code></pre><h1 id="文件的格式化"><a href="#文件的格式化" class="headerlink" title="文件的格式化"></a>文件的格式化</h1><h2 id="格式化打印"><a href="#格式化打印" class="headerlink" title="格式化打印"></a>格式化打印</h2><h3 id="printf"><a href="#printf" class="headerlink" title="printf"></a>printf</h3><pre><code class="highlight bash"><span class="built_in">printf</span> <span class="string">&#x27;format&#x27;</span> content<span class="comment"># 固定格式（表格形式</span><span class="built_in">printf</span> <span class="string">&#x27;%10s %5i&#x27;</span> content1 content2</code></pre><p>过于高级，不再多说，现用现查</p><h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><h3 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h3><p>数据处理工具，适用于小型文本</p><pre><code class="highlight bash">awk <span class="string">&#x27;condition_1&#123;operation_1&#125; condition_2&#123;operation_2&#125;&#x27;</span> filename</code></pre><p>awk以<strong>行</strong>为一次处理的单位，以<strong>字段</strong>为最小的处理单位。</p><ul><li>$1 $2 分别表示一行中的第一和第二个字段（默认以空格或tab分割）</li><li>$0表示<strong>第一列</strong>的所有数据</li></ul><p>关于数据总共有多少行多少列，可以用以下变量</p><ul><li>NF：每一列拥有的字段数</li><li>NR：目前awk所处理的是第几段数据</li><li>FS：目前的分割字符，默认是空格</li></ul><p>awk的逻辑运算符与C一致</p><p>awk的关键字</p><ul><li>BEGIN从头开始</li><li>END从末尾开始</li></ul><h2 id="文件比对"><a href="#文件比对" class="headerlink" title="文件比对"></a>文件比对</h2><h3 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h3><pre><code class="highlight bash">dirr [-bBI] from-file to-file<span class="comment"># -b 忽略空格差异</span><span class="comment"># -B 忽略空白行差异</span><span class="comment"># -i 忽略大小写差异</span><span class="comment"># 以下为diff的输出</span>3d2 <span class="comment"># 左边的第三行被删除（d）了，基准是右边第二行</span>&lt; bin:x:2:2:bin:/bin:/usr/sbin/nologin <span class="comment"># 这是左边（&lt;)被删除的哪一行</span>6c5 <span class="comment"># 左边的第六行被替换（c）成了右边第五行</span>&lt; games:x:5:60:games:/usr/games:/usr/sbin/nologin <span class="comment"># 左边（&lt;）第六行的内容</span>---&gt; no six line <span class="comment"># 接上面，这是右边（&gt;）第五行的内容</span></code></pre><h3 id="cmp"><a href="#cmp" class="headerlink" title="cmp"></a>cmp</h3><pre><code class="highlight bash">cmp [-l] file1 file2<span class="comment"># -l 将所有不懂点全部标出来，默认只标出第一个</span><span class="comment"># cmp可用于比较二进制文件</span></code></pre><h3 id="patch"><a href="#patch" class="headerlink" title="patch"></a>patch</h3><p>使用<code>diff</code>制作补丁，然后使用<code>patch</code>更新</p><pre><code class="highlight bash"><span class="comment"># 流程</span><span class="comment">## 记录差异</span>diff -Naur old_file new_file &gt; file.patch<span class="comment">## 更新</span>patch -pN &lt; patch_file<span class="comment">## 还原</span>patch -R -pN &lt; patch_file<span class="comment"># N 表示目录层级，新旧文件在同一目录下时使用-p0即可</span><span class="comment"># 更详细的内容在后面y</span></code></pre><h3 id="pr"><a href="#pr" class="headerlink" title="pr"></a>pr</h3><p>文件打印，鸟哥说这玩意参数太多</p>]]></content>
      
      
      <categories>
          
          <category> Operation </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 专栏：重学linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重学linux（7）</title>
      <link href="/Operation/Linux/6a7d7eac/"/>
      <url>/Operation/Linux/6a7d7eac/</url>
      
        <content type="html"><![CDATA[<h1 id="别名与历史"><a href="#别名与历史" class="headerlink" title="别名与历史"></a>别名与历史</h1><h2 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h2><p>alias</p><p>unalias</p><h2 id="history"><a href="#history" class="headerlink" title="history"></a>history</h2><pre><code class="highlight bash">$ <span class="built_in">history</span> [n]$ <span class="built_in">history</span> [-c]$ <span class="built_in">history</span> [-raw] histfiles <span class="comment"># default is ~/.</span><span class="comment"># r : read histfiles (connect with var $&#123;HISTFILESIZE&#125;)</span><span class="comment"># a : new command will be add to histfiles</span><span class="comment"># w : command before will be add to histfiles</span></code></pre><h2 id=""><a href="#" class="headerlink" title="!!!"></a>!!!</h2><pre><code class="highlight bash">$ ! <span class="comment"># 执行上一条命令</span>$ !! <span class="comment"># 上上条</span>$ !5 <span class="comment"># 第5条（使用history查看）</span>$ !al <span class="comment"># 执行最近以al开头的命令</span></code></pre><h1 id="Bash的操作环境"><a href="#Bash的操作环境" class="headerlink" title="Bash的操作环境"></a>Bash的操作环境</h1><h2 id="PATH"><a href="#PATH" class="headerlink" title="PATH"></a>PATH</h2><p>查找顺序</p><ol><li>相对&#x2F;绝对路径</li><li>alias</li><li>bash’s builtin command</li><li>in ${PATH}</li></ol><h2 id="bash的登录信息"><a href="#bash的登录信息" class="headerlink" title="bash的登录信息"></a>bash的登录信息</h2><h3 id="etc-issue"><a href="#etc-issue" class="headerlink" title="&#x2F;etc&#x2F;issue"></a>&#x2F;etc&#x2F;issue</h3><p>登录页面。使用<code>man issue</code>和<code>man agetty</code>查看参数和书写方式。</p><p>除了<code>/etc/issue</code>还有个<code>/etc/issue.net</code>，用于telnet登录的欢迎信息</p><h3 id="etc-motd"><a href="#etc-motd" class="headerlink" title="&#x2F;etc&#x2F;motd"></a>&#x2F;etc&#x2F;motd</h3><p>用户登录提示信息</p><p><strong>注</strong>：在ubuntu这样的发行版中，motd是动态生成的，如ubuntu实际上的motd文件时<code>/run/motd.dynamic</code>，而该文件是由<code>/etc/update-motd.d/</code>下的脚本生成的，初次之外，<code>/etc/pam.d/login</code>文件设置了开启记录系统的上一次登录时间。</p><h3 id="上述两个文件的区别？"><a href="#上述两个文件的区别？" class="headerlink" title="上述两个文件的区别？"></a>上述两个文件的区别？</h3><p><code>motd</code> represent <code>message of today</code></p><p>用于某个用户登录时（毕竟linux设计上是多用户os），展示的提示信息。</p><p><code>issue</code>用于登录之前，tty显示的内容。</p><p>如果是远程登录，<code>issue</code>的内容会显示在<code>motd</code>之前。</p><h2 id="bash的环境配置文件"><a href="#bash的环境配置文件" class="headerlink" title="bash的环境配置文件"></a>bash的环境配置文件</h2><p><strong>注</strong>：<code>login shell</code>和<code>non-login shell</code>读取的文件不同</p><h3 id="etc-profile（login-shell-only）"><a href="#etc-profile（login-shell-only）" class="headerlink" title="&#x2F;etc&#x2F;profile（login shell only）"></a>&#x2F;etc&#x2F;profile（login shell only）</h3><p>根据uid来读取不同的配置，主要是通过调用其他脚本来设置环境，设定的内容包括：<code>PATH,MAIL,USER,umask</code>。</p><h3 id="etc-profile-d-sh"><a href="#etc-profile-d-sh" class="headerlink" title="&#x2F;etc&#x2F;profile.d&#x2F;*.sh"></a>&#x2F;etc&#x2F;profile.d&#x2F;*.sh</h3><p>只要脚本文件位于该目录下且具有<code>r</code>（注意是r，不是x）的权限，就可以被<code>/etc/profile</code>调用</p><h3 id="etc-locale-conf"><a href="#etc-locale-conf" class="headerlink" title="&#x2F;etc&#x2F;locale.conf"></a>&#x2F;etc&#x2F;locale.conf</h3><p>由<code>/etc/profile.d/lang.sh</code>调用，设定了os的语系</p><h3 id="usr-share-bash-completion-completion"><a href="#usr-share-bash-completion-completion" class="headerlink" title="&#x2F;usr&#x2F;share&#x2F;bash-completion&#x2F;completion&#x2F;*"></a>&#x2F;usr&#x2F;share&#x2F;bash-completion&#x2F;completion&#x2F;*</h3><p>由<code>/etc/profile.d/bash_completion.sh</code>调用，除了命令补齐和文件名补齐之外，还提供了命令的选项和参数补齐。</p><h3 id="bash-profile（login-shell-only）"><a href="#bash-profile（login-shell-only）" class="headerlink" title="~&#x2F;bash_profile（login shell only）"></a>~&#x2F;bash_profile（login shell only）</h3><ul><li>~&#x2F;.bash_profile</li><li>~&#x2F;.bash_login</li><li>~&#x2F;.profile</li></ul><p>上述三个文件只读取其中一个，优先级由上到下</p><p><strong>注</strong>：ubuntu下的<code>~/.profile</code>会读取下面的<code>~/.bashrc</code>，这也是为什么<code>bashrc</code>文件中的内容也能在login shell中生效的原因。</p><h3 id="bashrc-non-login-shell-only"><a href="#bashrc-non-login-shell-only" class="headerlink" title="~&#x2F;.bashrc(non-login shell only)"></a>~&#x2F;.bashrc(non-login shell only)</h3><p>来源于<code>/etc/skel/.bashrc</code>。</p><p>会去调用<code>/etc/bashrc</code>和<code>/etc/profile.d/*.sh</code>，来获取系统环境</p><h3 id="其他文件"><a href="#其他文件" class="headerlink" title="其他文件"></a>其他文件</h3><ul><li><code>/etc/man_db.conf</code>：man page的路径</li><li><code>~/.bash_history</code>：历史记录</li><li><code>~/.bash_logout</code>：注销bash后执行的内容</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>对于login shell<ul><li>读取&#x2F;etc&#x2F;profile<ul><li>读取&#x2F;etc&#x2F;proflie.d&#x2F;*.sh<ul><li>调用如&#x2F;etc&#x2F;locale.conf之类的文件</li></ul></li><li>读取&#x2F;etc&#x2F;bashrc或&#x2F;etc&#x2F;bash.bashrc<ul><li>调用其他配置文件</li></ul></li></ul></li><li>读取~&#x2F;.bash_profile（或其他的profile）<ul><li>读取~&#x2F;.bashrc</li></ul></li></ul></li><li>对于non-login shell<ul><li>读取~&#x2F;.bashrc<ul><li>读取&#x2F;etc&#x2F;bashrc或&#x2F;etc&#x2F;bash.bashrc</li><li>读取&#x2F;etc&#x2F;profile.d&#x2F;*.sh</li></ul></li></ul></li></ul><h2 id="终端的环境设置"><a href="#终端的环境设置" class="headerlink" title="终端的环境设置"></a>终端的环境设置</h2><h3 id="stty"><a href="#stty" class="headerlink" title="stty"></a>stty</h3><pre><code class="highlight bash">$ <span class="built_in">stty</span> -a <span class="comment"># 查看所有终端配置</span>$ <span class="built_in">stty</span> erase ^h <span class="comment"># 设置某个按键</span></code></pre><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>intr</td><td>interrupt signal</td></tr><tr><td>quit</td><td>quit signal</td></tr><tr><td>erase</td><td>delete character</td></tr><tr><td>kill</td><td>delete all charcater</td></tr><tr><td>eof</td><td>end of line</td></tr><tr><td>start</td><td>restart</td></tr><tr><td>stop</td><td>pause</td></tr><tr><td>susp</td><td>terminal stop signal</td></tr></tbody></table><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>使用<code>echo $-</code>查看set已经设置的内容</p><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td>*</td><td>0到无穷多任意字符</td></tr><tr><td>？</td><td>一定有一个字符</td></tr><tr><td>[]</td><td>一定有一个在括号里的字符</td></tr><tr><td>[-]</td><td>减号表示在编码顺序内的一定字符</td></tr><tr><td>[^]</td><td>^表示反选</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Operation </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 专栏：重学linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一次makefile改CMake</title>
      <link href="/Auto/147c20ee/"/>
      <url>/Auto/147c20ee/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>其实这是apollo2019年的代码，原来用makefile也挺稳定的，整个2019的代码也因此显的非常简洁，没有奇奇怪怪的各种文件。只有几个零散的mk文件，大部分都是源码。但也是因为makefile，添加文件会略显麻烦，每次都要在makefile中添加object文件和指定源文件，头文件。因此想换成工程上的CMake。</p><blockquote><p>有必要给出结论，在这个过程中因为各种各样的原因，最终没能成功。但是在这个过程中很多东西是值得记录和学习的。</p></blockquote><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>明确三点需求</p><ul><li>可随意添加源文件而不用改动构建系统文件（即<code>CMakeLists.txt</code>）</li><li>可提升编译速度（应对将来的大量修改内容）</li><li>提升代码可迁移性（想让它在windows上跑起来）</li></ul><p>主要还是考虑到这份代码将给后面的新同学跑，希望能尽可能减少新同学的难度，也让有实力的同学专注于代码本身。</p><h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><h2 id="第一个想法"><a href="#第一个想法" class="headerlink" title="第一个想法"></a>第一个想法</h2><p>一开始，我想到的办法是在每个子目录下都建立<code>CMakeLists.txt</code>，然后使用较新的<code>aux_source_directory</code>来自动搜索目录下的所有文件，并建成一个<code>static library</code>。接下来在上层目录中使用<code>add_subdirectory</code>，并通过<code>add_library</code>来讲之前的所有静态库合成一个。最后为三个可执行文件分别书写<code>add_executable</code>并将为其<code>link library</code>。</p><p>现在回头去看的话，这个过程真的是槽点满满。</p><ul><li>首先是自动搜索后新建静态库，搜索这点其实没问题，但是为每个文件夹都建立静态库就有点奇怪了。不过也不是不行，接着往下走。</li><li>然后是将静态库合成一个，这个想法其实也不是不行，问题在于cmake<strong>本身</strong>并没有提供任何将多个静态库合成一个的方法。只能调用外部工具如<code>ar</code>。参考<a href="https://stackoverflow.com/questions/37924383/combining-several-static-libraries-into-one-using-cmake">stackoverflow</a></li><li>接下来是<code>add_executable</code>，这里也是对源码不够了解，我以为三个<code>main</code>文件都需要对除了三个文件夹下的源码有所依赖，实际上它们是完全分开的。也就是说，就算上面的都完成了，最后<code>link library</code>也会使得生成的<code>binary</code>过于庞大和臃肿。</li></ul><h2 id="任意源文件问题"><a href="#任意源文件问题" class="headerlink" title="任意源文件问题"></a>任意源文件问题</h2><p>其实在使用<code>aux_source_directory</code>之前，就已经了解到有<code>FILE(GLOB_RECURSE)</code>方法了。但因为<code>main</code>文件和其他源文件位于同一个目录下，不敢乱用（后面了解到可以使用<code>list</code>方法去掉<code>main</code>，但感觉这样<del>不够优雅</del>意义不大）</p><p>后面参考了其他CMake工程的写法，尤其是apollo原先的底层<code>helios-base</code>的<code>CMakeLists</code>写法（刚好在我准备些的前28天，<code>helios</code>先写出来一份了）。发现大部分都是使用单个文件添加的，这样可达不到<em>任意添加</em>的目的。因此我还是坚持，使用每个子文件夹下一个<code>CMakeLists.txt</code>，然后使用<code>aux_source_directory</code>的方法来搜索所有源文件，但绝不是为每个子文件夹都建立<em>静态库</em>。</p><p>比较正确的想法是把每个源文件都添加到一个列表，然后“一起”生成一个可执行文件或库。这里我了解到了<code>target_source(target Files)</code>方法，在上层指定要生成的<code>target</code>，然后在下层为源文件指定target即可。</p><p>关于添加源文件的依赖这里，<a href="https://github.com/helios-base/librcsc">librcsc</a>给了我很大的参考，它们使用了<code>add_library(name OBJECT sources)</code>，建立<code>object library</code>来包含所有生成的中间文件，然后在上层通过<code>$&lt;target_object:name&gt;</code>来引用中间文件，并生成最终的<code>executable binary</code>。这样的写法就像是我在<code>makefile</code>中写<code>Obj += a.o b.o</code>。我觉得这种写法才像是<code>best practice</code>。</p><h2 id="生成需要的依赖库"><a href="#生成需要的依赖库" class="headerlink" title="生成需要的依赖库"></a>生成需要的依赖库</h2><p>apollo2019的源码携带了<code>rcsc</code>文件夹，该目录下是apollo源码的底层库的源文件。按照原来的makefile写法，<code>make</code>会先将该文件夹整个打包并生成一个<code>librcsc.so</code>的动态链接库，并在最后生成<code>executable binary</code>时将其链接上去。</p><p>一开始我是想偷懒，用<code>FILE(GLOB_RECURSE)</code>来直接包含所有**.cpp<strong>文件，然后生成一个大的<code>lib</code>。这个操作一开始没发现问题，也确实生成了一个<code>librcsc.so</code>，但后面链接时就各种出错。仔细观察才发现，一堆.cpp文件中间混了个装着</strong>.c**的文件夹（该文件来源于<a href="https://github.com/libigl/libigl">libig</a>，一个图形库）。而.c文件怎么都无法和.cpp文件链接到一起。这里我去翻阅了下最新的<a href="https://github.com/helios-base/librcsc">librcsc</a>的写法，发现它时完完全全每个子目录下一个CMakeLists的标准写法。对于.c的文件夹，也有专门的处理方式。我想着，这感情好呀，于是把最新的<code>rcsc</code>目录拖到了自己的目录下并替换了原来的目录，准备改改CMakeLists就解决问题。这在后面也成了“拖垮我的最后一根稻草”，不过我也不觉得这“都是我的错~”。</p><p><code>librcsc</code>正确的使用方式应该还是下载源码后安装到系统库中，然后球队源码带着src文件夹就够了，这种带着rcsc文件夹到处跑的做法其实还是落后了（虽然看源码还是方便）</p><blockquote><p>在尝试链接.c和.cpp的时候，还有些小东西值得记录，如果不为CMake工程指定编译器，它会使用<code>cc</code>和<code>c++</code>来编译c和cpp文件，而指定编译器需要在指定LANGUAGE之前才有效。这点算是让我对CMakeLists的执行顺序有了进一步了解。</p></blockquote><h2 id="CMakeLists的书写顺序"><a href="#CMakeLists的书写顺序" class="headerlink" title="CMakeLists的书写顺序"></a>CMakeLists的书写顺序</h2><p>其实没有那么多复杂的东西，也是一个顺序问题，CMakeLists鼓励我们先把要生成的东西写出来比如<code>add_executable</code>或是<code>add_library</code>；然后为其设定要链接的库，比如<code>target_link_libraries</code>，还有相关的依赖<code>target_link_directories</code>，属性<code>set_property</code>等等；最后是去把前面提到的变量“找”出来，比如<code>add_subdirectory</code>。</p><p>当然，最前面肯定是写好<code>cmake_minimum_required</code>和<code>project</code>，以及其他的全局设定。</p><p>对于编译器的参数来说，使用<code>set(CMAKE_CXX_FLAGS)</code>之类的方式就可以设定其参数，但对于c系的<code>definition</code>，最好还是使用<code>add_definition(-D)</code>来指定宏。更进一步，编写<code>configuration file</code>并指定<code>add_definition(-DHAVE_CONFIG_H)</code>和<code>configure_file</code>。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>CMake确实是有比Makefile有优势的地方，但仍然显的有些繁琐和奇怪。至少它还在不断发展，比如使用<code>target_link_directories</code>来替代<code>link_libraries</code>，但其中复杂的规则确实会让人痛苦。虽然最后没成功把这个项目改成CMake，但还是稍微深入地了解了CMake的用法。想想大过年的还抽时间来看这个，投入其中的感觉其实挺不错的。不过还是希望下次有项目能把CMakeLists写出来写好，哈哈。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>为什么最后没有写成？因为换<code>librcsc</code>底层的时候发现有的文件名对不上了，一查<code>librcsc</code>的更新日志发现，有的变量在08年就改了，也就是说，我们用的是<strong>22-08&#x3D;14</strong>年前的底层代码。这是真的忍不了，准备重构好了。新的代码基于CMakeLists就ok了。</p>]]></content>
      
      
      <categories>
          
          <category> Auto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
            <tag> c </tag>
            
            <tag> cmake </tag>
            
            <tag> makefile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一次hexo生成的错误</title>
      <link href="/Operation/Tips/41f9c73c/"/>
      <url>/Operation/Tips/41f9c73c/</url>
      
        <content type="html"><![CDATA[<h1 id="记录一次hexo生成的错误"><a href="#记录一次hexo生成的错误" class="headerlink" title="记录一次hexo生成的错误"></a>记录一次hexo生成的错误</h1><p>之前hexo生成时显示</p><pre><code class="highlight bash">err: Template render error: (unknown path)</code></pre><p>查了一下发现是之前的文档演示了gitbook中jinja模板的内容，需要演示<code>&#123;% if apollo %&#125;</code>。</p><p>而hexo也识别该语法，所以在演示时需要加上`符号或其他方式来使其不被渲染。</p>]]></content>
      
      
      <categories>
          
          <category> Operation </category>
          
          <category> Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apollo文档的自动构建</title>
      <link href="/Auto/8d15f7e6/"/>
      <url>/Auto/8d15f7e6/</url>
      
        <content type="html"><![CDATA[<h1 id="Apollo文档的自动构建"><a href="#Apollo文档的自动构建" class="headerlink" title="Apollo文档的自动构建"></a>Apollo文档的自动构建</h1><p>加入apollo2d组后发现，这个社团除了一份年代久远的代码，啥都没有了。上上任学长不写注释，指导老师在摸鱼，上任学长老惨了，就他一个人搞这些。Thus，我觉得把apollo的文档体系建立起来。</p><p>根据先前的经验，也为了让我的队友们了解一些规范，我选择了gitbook+gitlab+CI&#x2F;CD的方案。这样大家可以熟悉下git、md，同时生成的网页也方便大家阅读。</p><h2 id="gitbook配置"><a href="#gitbook配置" class="headerlink" title="gitbook配置"></a>gitbook配置</h2><p>从gitlab中创建了一个gitbook的模板，然后对它做一些配置和修改。</p><h3 id="目录格式"><a href="#目录格式" class="headerlink" title="目录格式"></a>目录格式</h3><pre><code class="highlight bash">README.md<span class="comment">#仓库的说明</span>book.json<span class="comment">#书籍的设置</span>doc/<span class="comment">#文档正文</span>01-abaaba/<span class="comment">#正式章节</span>README.md<span class="comment">#章节的封面</span>1.md02-balabala/<span class="comment">#数字用于排序</span>README.md<span class="comment">#文档封面</span>SUMMARY.md<span class="comment">#目录</span>GLORSSARY.md<span class="comment">#词汇表</span>scripts/<span class="comment">#用于自动部署的脚本</span>styles/<span class="comment">#用于渲染网页的css文件</span>template/<span class="comment">#写文档时的模板</span></code></pre><h3 id="book-json的配置"><a href="#book-json的配置" class="headerlink" title="book.json的配置"></a><code>book.json</code>的配置</h3><p><code>book.json</code>使用json格式配置书籍的各种信息</p><pre><code class="highlight json"><span class="punctuation">&#123;</span>    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Apollo2d-learning&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;root&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./doc&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;来自南邮Apllo2d的2d仿真教程&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;teammates from apollo2d@2021&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zh-hans&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;disableTitleFormatting&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>    <span class="attr">&quot;styles&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>        <span class="attr">&quot;website&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span>    <span class="punctuation">&#125;</span><span class="punctuation">,</span>    <span class="attr">&quot;variables&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>        <span class="attr">&quot;apollo&quot;</span><span class="punctuation">:</span> <span class="number">0</span>    <span class="punctuation">&#125;</span><span class="punctuation">,</span>    <span class="attr">&quot;plugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>        <span class="string">&quot;theme-default&quot;</span><span class="punctuation">,</span>        <span class="string">&quot;fontsettings&quot;</span><span class="punctuation">,</span>        <span class="string">&quot;flexible-alerts&quot;</span><span class="punctuation">,</span>        <span class="string">&quot;anchors&quot;</span><span class="punctuation">,</span>        <span class="string">&quot;-anchor-navigation-ex&quot;</span><span class="punctuation">,</span>        <span class="string">&quot;back-to-top-button&quot;</span><span class="punctuation">,</span>        <span class="string">&quot;chapter-fold&quot;</span><span class="punctuation">,</span>        <span class="string">&quot;code&quot;</span><span class="punctuation">,</span>        <span class="string">&quot;expandable-chapters-small&quot;</span><span class="punctuation">,</span>        <span class="string">&quot;book-summary-scroll-position-saver&quot;</span><span class="punctuation">,</span>        <span class="string">&quot;tbfed-pagefooter&quot;</span><span class="punctuation">,</span>        <span class="string">&quot;-page-copyright&quot;</span><span class="punctuation">,</span>        <span class="string">&quot;pageview-count&quot;</span><span class="punctuation">,</span>        <span class="string">&quot;-lunr&quot;</span><span class="punctuation">,</span>        <span class="string">&quot;-search&quot;</span><span class="punctuation">,</span>        <span class="string">&quot;search-pro&quot;</span><span class="punctuation">,</span>        <span class="string">&quot;-sharing&quot;</span><span class="punctuation">,</span>        <span class="string">&quot;splitter&quot;</span><span class="punctuation">,</span>        <span class="string">&quot;intopic-toc&quot;</span><span class="punctuation">,</span>        <span class="string">&quot;-toc2&quot;</span><span class="punctuation">,</span>        <span class="string">&quot;prism&quot;</span><span class="punctuation">,</span>        <span class="string">&quot;prism-themes&quot;</span><span class="punctuation">,</span>        <span class="string">&quot;-highlight&quot;</span>    <span class="punctuation">]</span><span class="punctuation">,</span>    <span class="attr">&quot;pluginsConfig&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>        <span class="attr">&quot;theme-default&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>            <span class="attr">&quot;showLevel&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span>        <span class="punctuation">&#125;</span><span class="punctuation">,</span>        <span class="attr">&quot;anchor-navigation-ex&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>            <span class="attr">&quot;showLevel&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>            <span class="attr">&quot;associatedWithSummary&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>            <span class="attr">&quot;printLog&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span>            <span class="attr">&quot;multipleH1&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span>            <span class="attr">&quot;mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span>            <span class="attr">&quot;showGoTop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>            <span class="attr">&quot;float&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>                <span class="attr">&quot;floatIcon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fa fa-navicon&quot;</span><span class="punctuation">,</span>                <span class="attr">&quot;showLevelIcon&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span>                <span class="attr">&quot;level1Icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fa fa-hand-o-right&quot;</span><span class="punctuation">,</span>                <span class="attr">&quot;level2Icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fa fa-hand-o-right&quot;</span><span class="punctuation">,</span>                <span class="attr">&quot;level3Icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fa fa-hand-o-right&quot;</span>            <span class="punctuation">&#125;</span><span class="punctuation">,</span>            <span class="attr">&quot;pageTop&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>                <span class="attr">&quot;showLevelIcon&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span>                <span class="attr">&quot;level1Icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fa fa-hand-o-right&quot;</span><span class="punctuation">,</span>                <span class="attr">&quot;level2Icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fa fa-hand-o-right&quot;</span><span class="punctuation">,</span>                <span class="attr">&quot;level3Icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fa fa-hand-o-right&quot;</span>            <span class="punctuation">&#125;</span>        <span class="punctuation">&#125;</span><span class="punctuation">,</span>        <span class="attr">&quot;fontsettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>            <span class="attr">&quot;theme&quot;</span><span class="punctuation">:</span> <span class="string">&quot;white&quot;</span><span class="punctuation">,</span>            <span class="attr">&quot;family&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sans&quot;</span><span class="punctuation">,</span>            <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">2</span>        <span class="punctuation">&#125;</span><span class="punctuation">,</span>        <span class="attr">&quot;tbfed-pagefooter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>            <span class="attr">&quot;copyright&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Copyright@Njupt-Apollo-2d-2021&quot;</span><span class="punctuation">,</span>            <span class="attr">&quot;modify_label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;该文件最新修订时间：&quot;</span><span class="punctuation">,</span>            <span class="attr">&quot;modify_format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;YYYY-MM-DD HH:mm:ss&quot;</span>        <span class="punctuation">&#125;</span><span class="punctuation">,</span>        <span class="attr">&quot;toc2&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>            <span class="attr">&quot;addClass&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>            <span class="attr">&quot;className&quot;</span><span class="punctuation">:</span> <span class="string">&quot;toc&quot;</span>        <span class="punctuation">&#125;</span><span class="punctuation">,</span>        <span class="attr">&quot;prism&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>            <span class="attr">&quot;css&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>                <span class="string">&quot;prismjs/themes/prism-solarizedlight.css&quot;</span>            <span class="punctuation">]</span>        <span class="punctuation">&#125;</span><span class="punctuation">,</span>        <span class="attr">&quot;intopic-toc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>            <span class="attr">&quot;selector&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.markdown-section h1, .markdown-section h2, .markdown-section h3, .markdown-section h4, .markdown-section h5, .markdown-section h6&quot;</span><span class="punctuation">,</span>            <span class="attr">&quot;mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nested&quot;</span><span class="punctuation">,</span>            <span class="attr">&quot;maxDepth&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span>            <span class="attr">&quot;isCollapsed&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span>            <span class="attr">&quot;isScrollspyActive&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>            <span class="attr">&quot;visible&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>                <span class="attr">&quot;zh-hans&quot;</span><span class="punctuation">:</span> <span class="string">&quot;本文大纲&quot;</span><span class="punctuation">,</span>                <span class="attr">&quot;en&quot;</span><span class="punctuation">:</span> <span class="string">&quot;In this article&quot;</span>            <span class="punctuation">&#125;</span>        <span class="punctuation">&#125;</span><span class="punctuation">,</span>        <span class="attr">&quot;page-copyright&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;modified at&quot;</span><span class="punctuation">,</span>            <span class="attr">&quot;signature&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你的签名&quot;</span><span class="punctuation">,</span>            <span class="attr">&quot;wisdom&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Designer, Frontend Developer &amp; overall web enthusiast&quot;</span><span class="punctuation">,</span>            <span class="attr">&quot;format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;YYYY-MM-dd hh:mm:ss&quot;</span><span class="punctuation">,</span>            <span class="attr">&quot;copyright&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Copyright © Apollo&quot;</span><span class="punctuation">,</span>            <span class="attr">&quot;timeColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#666&quot;</span><span class="punctuation">,</span>            <span class="attr">&quot;copyrightColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#666&quot;</span><span class="punctuation">,</span>            <span class="attr">&quot;utcOffset&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8&quot;</span><span class="punctuation">,</span>            <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;normal&quot;</span><span class="punctuation">,</span>            <span class="attr">&quot;noPowered&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span>        <span class="punctuation">&#125;</span>    <span class="punctuation">&#125;</span><span class="punctuation">,</span>    <span class="attr">&quot;pdf&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>        <span class="attr">&quot;fontSize&quot;</span><span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">,</span>        <span class="attr">&quot;footerTemplate&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span>        <span class="attr">&quot;headerTemplate&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span>        <span class="attr">&quot;margin&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>            <span class="attr">&quot;bottom&quot;</span><span class="punctuation">:</span> <span class="number">36</span><span class="punctuation">,</span>            <span class="attr">&quot;left&quot;</span><span class="punctuation">:</span> <span class="number">62</span><span class="punctuation">,</span>            <span class="attr">&quot;right&quot;</span><span class="punctuation">:</span> <span class="number">62</span><span class="punctuation">,</span>            <span class="attr">&quot;top&quot;</span><span class="punctuation">:</span> <span class="number">36</span>        <span class="punctuation">&#125;</span><span class="punctuation">,</span>        <span class="attr">&quot;pageNumbers&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>        <span class="attr">&quot;paperSize&quot;</span><span class="punctuation">:</span> <span class="string">&quot;a4&quot;</span>    <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></code></pre><p>挑几个重要的说明一下</p><ul><li>title:文档名称</li><li>root:根目录,因为默认的文档目录就在根目录下,我这里为了做隔离把文档分到了doc目录下,因此这里要做修改</li><li>variables:这个是自定义的变量,我把它设成0,这样只要在文中写上<code>&#123;% if var %&#125;</code>,中间的文本就不会输出了,而我只要把这个变量的值改为1就能生成可以输出的.</li><li>plugins:插件列表,内容大概看看就好,短横线开头表示该插件被关闭,这是为了防止插件之间的冲突</li><li>pluginsConfig:插件配置</li><li>pdf:gitbook的pdf输出配置</li></ul><h3 id="SUMMARY-md配置"><a href="#SUMMARY-md配置" class="headerlink" title="SUMMARY.md配置"></a><code>SUMMARY.md</code>配置</h3><p>SUMMARY文件应当位于doc目录下，它决定了文档的目录。一开始我采用的是手动编写的做法，然后越到后面越发现文件名与标题的对应变得困难，故改为了自动生成，一开始尝试了gitbook提供的自动生成插件，生成的SUMMARY跟个鬼一样。后面试了下gitbook-summary，这玩意好用多了，当然，还是有些美中不足的地方。</p><p>安装后只需<code>book sm</code>即可自动生成SUMMARY文件。但是这个软件可能设计上和我的用法不一样，对于我这种文档目录位于doc的做法来说，它必须在doc目录下执行才能正常生成。因此合理的做法是</p><pre><code class="highlight bash"><span class="built_in">cd</span> docbook sm</code></pre><p>同时，它允许使用自己的<code>book.json</code>来修改一些配置，这个文件位于doc目录下，与根目录的<code>book.json</code>不同（不过我倒希望它能是同一个文件）</p><pre><code class="highlight json"><span class="punctuation">&#123;</span>    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Apollo2d-learning&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;outputfile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SUMMARY.md&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;catalog&quot;</span><span class="punctuation">:</span> <span class="string">&quot;all&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;ignores&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span>    <span class="attr">&quot;unchanged&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span>    <span class="attr">&quot;sortedBy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;disableTitleFormatting&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">&#125;</span></code></pre><p>还有一个问题就是，doc目录下必须有一个<code>README.md</code>。这个文件会被作为整个网页的入口，而如果不在SUMMARY中手动定义该文件的文件名，网页中会自动生成一个<code>introduction</code>作为入口。对于我们一堆中文标题，这个英文会比较突兀。这个问题的解决办法在下面。</p><h3 id="渲染的一些问题"><a href="#渲染的一些问题" class="headerlink" title="渲染的一些问题"></a>渲染的一些问题</h3><p>代码块这方面，prism这个插件会对不同的语言进行语法高亮，而prism是对语言的定义有严格要求的，比如</p><pre><code class="highlight markdown"><span class="code">```cpp ok</span><span class="code">```</span>c++ no<span class="code">```javascript ok</span><span class="code">```</span>js         no<span class="code">```bash  ok</span><span class="code">```</span>shell no</code></pre><p>怎么确定具体的名字呢？看prism的命名，比如cpp文件的prism渲染文件就是<code>prism-cpp.js</code>。所以搜一搜有没有<code>prism-你的语言.js</code>这个文件就行了。</p><h2 id="gitlab配置"><a href="#gitlab配置" class="headerlink" title="gitlab配置"></a>gitlab配置</h2><h3 id="权限问题"><a href="#权限问题" class="headerlink" title="权限问题"></a>权限问题</h3><p>gitlab的权限规则可以用一句话说清：一个group的成员可以在subgroups中自动取得原来的权限，其他情况下都要手动分配权限。这个仓库位于<code>apollo-2d</code>这个顶级group的根目录下，拥有大组身份的同学都有完整的权限，而新来的同学都在另一个<code>material</code>的group中，它们以<code>developer</code>的身份被加入到文档所在的<code>project</code>中，因此可以正常提pr来修改文档内容。</p><h3 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h3><p>多人协作其实是个小难点。多人协作的难点在于解决冲突问题，将SUMMARY改为自动生成也是解决这个问题的一部分，因为对文件的修改最后都要修改该文件。</p><p>目前的操作应该是，从master分支clone，然后push时使用其他的分支名，然后再在gitlab仓库提交<code>pull request</code>，然后由管理员（就是我）来合并，如果有冲突，还要手动合并。</p><h2 id="CI-CD配置"><a href="#CI-CD配置" class="headerlink" title="CI&#x2F;CD配置"></a>CI&#x2F;CD配置</h2><h3 id="gitlab-ci-yml配置"><a href="#gitlab-ci-yml配置" class="headerlink" title=".gitlab-ci.yml配置"></a><code>.gitlab-ci.yml</code>配置</h3><p>因为一开始建项目的时候就选了gitbook模板，所以有现成的模板了。默认的gitlab ci一个月有2000分钟，而我们一次生成大概在两分钟左右，所以理论上可以随便deploy（</p><p>不过为了减少更新次数，也为了解决上面生成SUMMARY不完美的问题，还是稍微做了些修改。修改的内容都在注释里了</p><pre><code class="highlight yaml"><span class="comment"># requiring the environment of NodeJS 10</span><span class="attr">image:</span> <span class="string">node:10</span><span class="comment"># add &#x27;node_modules&#x27; to cache for speeding up builds</span><span class="attr">cache:</span>  <span class="attr">paths:</span>    <span class="bullet">-</span> <span class="string">node_modules/</span> <span class="comment"># Node modules and dependencies</span><span class="attr">before_script:</span>  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">gitbook-cli</span> <span class="string">-g</span> <span class="comment"># install gitbook</span>  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">gitbook-summary</span> <span class="comment"># 这一行是我自己加的，安装了上面提到的SUMMARY生成工具</span>  <span class="bullet">-</span> <span class="string">gitbook</span> <span class="string">fetch</span> <span class="number">3.2</span><span class="number">.3</span> <span class="comment"># fetch final stable version</span>  <span class="bullet">-</span> <span class="string">gitbook</span> <span class="string">install</span> <span class="comment"># add any requested plugins in book.json</span>  <span class="bullet">-</span> <span class="string">chmod</span> <span class="string">a+x</span> <span class="string">./scripts/auto.sh</span> <span class="comment"># 我在script里写了个脚本来处理SUMMARY不完美的工具</span>  <span class="bullet">-</span> <span class="string">./scripts/auto.sh</span><span class="attr">test:</span>  <span class="attr">stage:</span> <span class="string">test</span>  <span class="attr">script:</span>    <span class="bullet">-</span> <span class="string">gitbook</span> <span class="string">build</span> <span class="string">.</span> <span class="string">public</span> <span class="comment"># build to public path</span>  <span class="attr">only:</span>    <span class="bullet">-</span> <span class="string">branches</span> <span class="comment"># this job will affect every branch except &#x27;master&#x27;</span>  <span class="attr">except:</span>    <span class="bullet">-</span> <span class="string">master</span><span class="comment"># the &#x27;pages&#x27; job will deploy and build your site to the &#x27;public&#x27; path</span><span class="attr">pages:</span>  <span class="attr">stage:</span> <span class="string">deploy</span>  <span class="attr">script:</span>    <span class="bullet">-</span> <span class="string">gitbook</span> <span class="string">build</span> <span class="string">.</span> <span class="string">public</span> <span class="comment"># build to public path</span>  <span class="attr">artifacts:</span>    <span class="attr">paths:</span>      <span class="bullet">-</span> <span class="string">public</span>    <span class="attr">expire_in:</span> <span class="number">1</span> <span class="string">week</span>  <span class="attr">only:</span>    <span class="attr">changes:</span><span class="comment"># 这里做了修改，原来是only master，我改为了如果文档的日志有所变化，则重新deploy</span>      <span class="bullet">-</span> <span class="string">doc/附录3-log/*</span></code></pre><p>然后是两个脚本</p><pre><code class="highlight bash"><span class="comment"># auto.sh</span><span class="built_in">cd</span> ./docbook sm <span class="comment">#首先生成SUMMARY文件</span><span class="built_in">cd</span> ..node ./scripts/test.js <span class="comment"># 然后是要给README.md一个名字，不让它自动生成introduction</span><span class="comment"># 一开始想到的是用sed来添加，然后发现这么做没用，可能是因为在容器里。然后我一看是个node的镜像，那就用nodejs来解决好了，故编写了个js文件</span></code></pre><pre><code class="highlight javascript"><span class="comment">//test.js</span><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);<span class="comment">// fs.appendFile 追加文件内容</span><span class="comment">// 1, 参数1:表示要向那个文件追加内容,只一个文件的路径</span><span class="comment">// 2, 参数2:表示要追加的内容</span><span class="comment">// 3, 可选参数,表示追加文本内容的编码格式,如果省略,默认为utf-8</span><span class="comment">// 4, 参数4: 表示追加完成之后的回调[有一个参数err,是判断是否追加成功]</span>fs.<span class="title function_">appendFile</span>(<span class="string">&quot;./doc/SUMMARY.md&quot;</span>, <span class="string">&quot;- [关于](README.md)&quot;</span>, <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;    <span class="keyword">if</span> (error) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;追加文件失败&quot;</span> + error.<span class="property">message</span>);    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;追加成功&quot;</span>);&#125;);<span class="comment">// 因为是抄下来的，所以注释就懒得删了，感谢原作者</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Auto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> apollo </tag>
            
            <tag> gitbook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>image_test</title>
      <link href="/test/2a459492/"/>
      <url>/test/2a459492/</url>
      
        <content type="html"><![CDATA[<h1 id="测试图床"><a href="#测试图床" class="headerlink" title="测试图床"></a>测试图床</h1><p><img src="https://raw.githubusercontent.com/kawhicurry/picgo/main/img/202201271336698.jpg" alt="QQ图片20210909223113"></p>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重学linux（6）</title>
      <link href="/Operation/Linux/d2c119c9/"/>
      <url>/Operation/Linux/d2c119c9/</url>
      
        <content type="html"><![CDATA[<h1 id="Shell变量"><a href="#Shell变量" class="headerlink" title="Shell变量"></a>Shell变量</h1><h2 id="查看shells"><a href="#查看shells" class="headerlink" title="查看shells"></a>查看shells</h2><p><code>/etc/shells</code></p><h2 id="查看命令是否为bash内置"><a href="#查看命令是否为bash内置" class="headerlink" title="查看命令是否为bash内置"></a>查看命令是否为bash内置</h2><h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><pre><code class="highlight bash"><span class="built_in">type</span> [option] name</code></pre><table><thead><tr><th>参数</th><th>选项</th></tr></thead><tbody><tr><td>-t</td><td>显示其类型</td></tr><tr><td>-p</td><td>当name为外部命令时显示完整文件名</td></tr><tr><td>-a</td><td>显示PATH中全部name</td></tr></tbody></table><h2 id="命令的执行小技巧"><a href="#命令的执行小技巧" class="headerlink" title="命令的执行小技巧"></a>命令的执行小技巧</h2><table><thead><tr><th>组合键</th><th>功能</th></tr></thead><tbody><tr><td>ctrl+u&#x2F;ctrl+k</td><td>从光标处向前或向后删除命令串</td></tr><tr><td>ctrl+a&#x2F;ctrl+e</td><td>让光标移动到整个命令行最前面或最后面</td></tr></tbody></table><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><pre><code class="highlight bash"><span class="comment"># 查看变量</span><span class="built_in">echo</span> <span class="variable">$var</span><span class="built_in">echo</span> <span class="variable">$&#123;var&#125;</span><span class="comment"># 设置变量</span>name=kawhicurry <span class="comment"># 变量只能以字母开头，只能包含数字和字母</span><span class="comment"># 不能随意空格，加空格方式如下</span>name=<span class="string">&quot;kawhi curry&quot;</span>name=kawhi\ curry<span class="comment"># 单引号和双引号的区别</span>name=‘<span class="variable">$USER</span>’ <span class="comment"># 单引号内仅为普通字符</span>name=<span class="string">&quot;<span class="variable">$USER</span>&quot;</span> <span class="comment"># 双引号内变量保持原本含义</span><span class="comment"># 取得其他指令所提供的信息</span>version=$(<span class="built_in">uname</span> -r)version=`<span class="built_in">uname</span> -r`<span class="comment"># 扩增变量内容</span>PATH=<span class="string">&quot;<span class="variable">$PATH</span>&quot;</span>:/home/binPATH=<span class="variable">$&#123;PATH&#125;</span>:/home/bin<span class="comment"># 变量需要在其他子程序执行</span><span class="built_in">export</span> PATH <span class="comment"># 注意不需要加$</span><span class="comment"># 取消变量</span><span class="built_in">unset</span> version <span class="comment"># 也不需要加$</span></code></pre><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><h3 id="env"><a href="#env" class="headerlink" title="env"></a>env</h3><p>查看环境变量</p><pre><code class="highlight bash">$ <span class="built_in">env</span>XDG_SESSION_ID=5747HOSTNAME=ShuihuaTERM=xterm <span class="comment"># 终端环境</span>SHELL=/bin/bash <span class="comment"># shell环境</span>HISTSIZE=1000 <span class="comment"># history记录的条数</span>SSH_TTY=/dev/pts/1USER=root <span class="comment"># 当前用户名称</span>MAIL=/var/spool/mail/root <span class="comment"># 邮箱</span>PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/binPWD=/rootLANG=en_US.UTF-8 <span class="comment"># 语系</span>HISTCONTROL=ignoredupsSHLVL=1HOME=/rootLOGNAME=root <span class="comment">#登陆人</span>SSH_CONNECTION=175.5.235.93 43351 172.29.89.99 22LESSOPEN=||/usr/bin/lesspipe.sh %sXDG_RUNTIME_DIR=/run/user/0_=/usr/bin/env <span class="comment"># 上一次使用的命令的最后一个参数（或是命令本身）</span><span class="comment"># 其他</span>RANDOM <span class="comment"># 位于/dev/random的随机数生成器，生成0~32768的随机数</span></code></pre><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>查看所有变量</p><pre><code class="highlight bash">$ <span class="built_in">set</span> <span class="comment"># 节选</span>HOSTNAME=ShuihuaHOSTTYPE=x86_64 <span class="comment"># cpu架构</span>ID=0MACHTYPE=x86_64-redhat-linux-gnu <span class="comment"># 机器硬件等级</span>MAIL=/var/spool/mail/rootMAILCHECK=60OPTERR=1OPTIND=1OSTYPE=linux-gnu <span class="comment"># 操作系统等级</span>PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/binPIPESTATUS=([0]=<span class="string">&quot;0&quot;</span>)PPID=26032PROMPT_COMMAND=<span class="string">&#x27;printf &quot;\033]0;%s@%s:%s\007&quot; &quot;$&#123;USER&#125;&quot; &quot;$&#123;HOSTNAME%%.*&#125;&quot; &quot;$&#123;PWD/#$HOME/~&#125;&quot;&#x27;</span>PS1=<span class="string">&#x27;[\u@\h \W]\$ &#x27;</span> <span class="comment"># cmd-line 的 prompt</span>PS2=<span class="string">&#x27;&gt; &#x27;</span>PS4=<span class="string">&#x27;+ &#x27;</span>PWD=/rootSHELL=/bin/bashSHELLOPTS=braceexpand:emacs:hashall:histexpand:<span class="built_in">history</span>:interactive-comments:monitorSHLVL=1SSH_TTY=/dev/pts/1TERM=xtermUID=0USER=rootXDG_RUNTIME_DIR=/run/user/0XDG_SESSION_ID=5747_=<span class="built_in">set</span>colors=/root/.dircolors</code></pre><h2 id="语系变量"><a href="#语系变量" class="headerlink" title="语系变量"></a>语系变量</h2><h3 id="locale"><a href="#locale" class="headerlink" title="locale"></a>locale</h3><pre><code class="highlight bash">locale -a <span class="comment"># 查看所有支持的语系</span>locale <span class="comment"># 查看当前使用的语系</span>LANG=en_US.UTF-8LC_CTYPE=<span class="string">&quot;en_US.UTF-8&quot;</span>LC_NUMERIC=<span class="string">&quot;en_US.UTF-8&quot;</span>LC_TIME=<span class="string">&quot;en_US.UTF-8&quot;</span>LC_COLLATE=<span class="string">&quot;en_US.UTF-8&quot;</span>LC_MONETARY=<span class="string">&quot;en_US.UTF-8&quot;</span>LC_MESSAGES=<span class="string">&quot;en_US.UTF-8&quot;</span>LC_PAPER=<span class="string">&quot;en_US.UTF-8&quot;</span>LC_NAME=<span class="string">&quot;en_US.UTF-8&quot;</span>LC_ADDRESS=<span class="string">&quot;en_US.UTF-8&quot;</span>LC_TELEPHONE=<span class="string">&quot;en_US.UTF-8&quot;</span>LC_MEASUREMENT=<span class="string">&quot;en_US.UTF-8&quot;</span>LC_IDENTIFICATION=<span class="string">&quot;en_US.UTF-8&quot;</span>LC_ALL=<span class="comment"># 系统的整体语系</span><span class="built_in">cat</span> /etc/locale.conf<span class="comment"># 修改语系</span><span class="built_in">export</span> locale_var=language</code></pre><h2 id="变量的赋值，声明"><a href="#变量的赋值，声明" class="headerlink" title="变量的赋值，声明"></a>变量的赋值，声明</h2><h3 id="read"><a href="#read" class="headerlink" title="read"></a>read</h3><pre><code class="highlight bash"><span class="comment"># read [-pt] var</span><span class="comment"># -p 后面跟提示信息</span><span class="comment"># -t 实践限制，单位秒</span></code></pre><h3 id="declare-typeset"><a href="#declare-typeset" class="headerlink" title="declare,typeset"></a>declare,typeset</h3><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-a</td><td>将后面的变量设置为数组</td></tr><tr><td>-i</td><td>将后面的变量设置为整数</td></tr><tr><td>-x</td><td>export</td></tr><tr><td>-r</td><td>readonly</td></tr><tr><td>-p</td><td>查看变量类型</td></tr></tbody></table><pre><code class="highlight bash"><span class="comment"># declare [-aixr] var</span><span class="built_in">declare</span> -x <span class="built_in">sum</span> <span class="comment"># sum 变为环境变量</span><span class="built_in">declare</span> +x <span class="built_in">sum</span> <span class="comment"># 取消sum的环境变量属性</span></code></pre><h2 id="文件系统和程序的限制"><a href="#文件系统和程序的限制" class="headerlink" title="文件系统和程序的限制"></a>文件系统和程序的限制</h2><h3 id="ulimit"><a href="#ulimit" class="headerlink" title="ulimit"></a>ulimit</h3><pre><code class="highlight bash"><span class="comment"># ulimit [-option] [配额]</span><span class="built_in">ulimit</span> -a <span class="comment"># 查看当前所有的限制额度</span><span class="comment"># 具体选项通过上面这条看看就知道了</span></code></pre><h2 id="变量中的内容的删除、取代和替换"><a href="#变量中的内容的删除、取代和替换" class="headerlink" title="变量中的内容的删除、取代和替换"></a>变量中的内容的删除、取代和替换</h2><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>使用<code>#</code>和<code>%</code></p><ul><li><code>#</code>删除<strong>从前往后</strong>符合替换条件的<strong>最短</strong>的那个</li><li><code>##</code>删除<strong>从前往后</strong>符合替换条件的<strong>最长</strong>的那个</li><li><code>%</code>删除<strong>从后往前</strong>符合替换条件的<strong>最短</strong>的那个</li><li><code>%</code>删除<strong>从后往前</strong>符合替换条件的<strong>最长</strong>的那个</li><li>使用通配符<code>*</code></li></ul><h3 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h3><p>使用<code>/</code>和<code>//</code></p><ul><li><code>/</code>会将<strong>第一个</strong>符合条件的内容替换</li><li><code>//</code>会将<strong>所有</strong>符合条件的内容替换</li></ul><pre><code class="highlight bash"><span class="built_in">echo</span> path=<span class="variable">$&#123;PATH&#125;</span><span class="built_in">echo</span> <span class="variable">$&#123;path#/*local/bin:&#125;</span> <span class="comment"># 删除path变量中从前往后最短的符合该条件的内容</span><span class="built_in">echo</span> <span class="variable">$&#123;path/sbin/SBIN&#125;</span> <span class="comment"># 将path变量中第一个符合sbin的字符串替换为后面的SBIN</span></code></pre><h3 id="默认变量和变量检测"><a href="#默认变量和变量检测" class="headerlink" title="默认变量和变量检测"></a>默认变量和变量检测</h3><p>使用<code>-</code>，<code>+</code>，<code>?</code>和<code>:</code></p><p><strong>这个功能超好，但是没法写笔记</strong></p>]]></content>
      
      
      <categories>
          
          <category> Operation </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 专栏：重学linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重学linux（5）</title>
      <link href="/Operation/Linux/c074b627/"/>
      <url>/Operation/Linux/c074b627/</url>
      
        <content type="html"><![CDATA[<h1 id="这章用来记录一些linux里需要单独去学习的东西"><a href="#这章用来记录一些linux里需要单独去学习的东西" class="headerlink" title="这章用来记录一些linux里需要单独去学习的东西"></a>这章用来记录一些linux里需要单独去学习的东西</h1><ul><li>vim，看看practical vim，一天一个vim小技巧</li><li>正则，需要好好理解下哪个神仙想出来的操作逻辑</li><li>shell脚本，这玩意纯艺术</li><li>SELinux，高级话题了属于是</li></ul>]]></content>
      
      
      <categories>
          
          <category> Operation </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 专栏：重学linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重学linux（4）</title>
      <link href="/Operation/Linux/78c8d142/"/>
      <url>/Operation/Linux/78c8d142/</url>
      
        <content type="html"><![CDATA[<h1 id="文件与文件系统的压缩"><a href="#文件与文件系统的压缩" class="headerlink" title="文件与文件系统的压缩"></a>文件与文件系统的压缩</h1><h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><table><thead><tr><th>后缀</th><th>含义</th></tr></thead><tbody><tr><td>.Z</td><td>compress压缩程序压缩的文件</td></tr><tr><td>.zip</td><td>zip</td></tr><tr><td>.gz</td><td>gzip</td></tr><tr><td>.bz2</td><td>bzip2</td></tr><tr><td>.xz</td><td>xz</td></tr><tr><td>.tar</td><td>tar程序打包的文件，没有压缩过</td></tr><tr><td>.tar.gz</td><td>tar打包，gzip压缩</td></tr><tr><td>.tar.bz2</td><td>tar打包，bzip2压缩</td></tr><tr><td>.tar.xz</td><td>tar打包，xz压缩</td></tr></tbody></table><h2 id="压缩与解压缩"><a href="#压缩与解压缩" class="headerlink" title="压缩与解压缩"></a>压缩与解压缩</h2><h3 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h3><p>向下兼容compress软件</p><pre><code class="highlight bash"><span class="comment"># gzip [-cdtv#] filename</span>gzip -v -9 filename <span class="comment"># 以最高压缩比压缩并显示信息，压缩比1~9，直接压缩会替换掉源文件</span>gzip -d *.gz <span class="comment"># 解压缩，直接解压缩会替换掉原压缩文件</span><span class="comment"># zcat/zmore/zless *.gz</span>zcat *.gz <span class="comment"># 都可以尝试读取</span><span class="comment"># 其他的一些指令</span>zcmp <span class="comment"># 解压文件并且 byte by byte 比较两个文件</span>zdiff <span class="comment"># 解压文件并且 line by line 比较两个文件</span>zgrep <span class="comment"># 解压文件并且根据正则搜索文件内容</span>ztest <span class="comment"># Tests integrity of compressed files.</span>zupdate <span class="comment"># Recompresses files to lzip format.</span></code></pre><h3 id="bzip2"><a href="#bzip2" class="headerlink" title="bzip2"></a>bzip2</h3><p>比gzip压缩比更好，用法和gzip完全一致，除了文件名末尾变为bz2。</p><h3 id="xz"><a href="#xz" class="headerlink" title="xz"></a>xz</h3><p>比bzip2压缩比更好，用法和gzip完全一致，除了文件名末尾变为bz2。</p><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><h3 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h3><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-c</td><td>打包文件</td></tr><tr><td>-t</td><td>查看打包文件的文件名</td></tr><tr><td>-x</td><td>解压缩</td></tr><tr><td>-z</td><td>通过gzip解压，适用于*.tar.gz</td></tr><tr><td>-j</td><td>通过bzip解压，适用于*.tar.bz2</td></tr><tr><td>-J</td><td>通过xz解压，适用于*.tar.xz</td></tr><tr><td>-f</td><td>指定文件名</td></tr><tr><td>-p</td><td>保留权限与属性等信息</td></tr><tr><td>-P</td><td>保留绝对路径</td></tr></tbody></table><p><strong>注</strong>：-c，-t，-x不可同时出现</p><pre><code class="highlight bash"><span class="comment"># 常用</span>tar -jcv -f filename.tar.bz2 <span class="comment"># 压缩</span>tar -jtv -f filename.tar.bz2 <span class="comment"># 查看</span>tar -jxvf filename.tar.bz2 <span class="comment"># 解压缩</span><span class="comment"># 关于-p -P选项</span>tar -jpcvf /root/etc.tar.bz2 /etc <span class="comment"># 先打包整个/etc目录</span>tar -jtf /root/etc.tar.bz2-rw-r--r-- root/root 131 2022-01-24 10:30 etc/locale.conf <span class="comment"># 里面的文件都被移除了根目录，这样解压时就不会被放回原来的目录，如果将p选项改为P，则会保留根目录</span><span class="comment">## 只解压解压包中某个文件的做法</span>tar -jtvf *.tar.bz2 filename</code></pre><h2 id="xfs文件系统备份"><a href="#xfs文件系统备份" class="headerlink" title="xfs文件系统备份"></a>xfs文件系统备份</h2><ul><li>完整备份</li><li>增量备份</li></ul><h3 id="xfsdump"><a href="#xfsdump" class="headerlink" title="xfsdump"></a>xfsdump</h3><p>一些限制条件</p><ul><li>xfsdump不支持没有挂载的文件系统备份</li><li>需要root权限</li><li>只能备份完整的xfs</li><li>备份后的数据只能让<code>xfsrestore</code></li><li>文件UUID不能相同</li></ul><pre><code class="highlight bash"><span class="comment"># xfsdump [-L S_label] [-M M_label] [-l #] [-f 备份文件] data</span>xfsdump -I <span class="comment"># 查看已有的备份信息</span>xfsdump -l 1 ... <span class="comment"># 使用level来完成增量备份</span></code></pre><h3 id="xfsrestore"><a href="#xfsrestore" class="headerlink" title="xfsrestore"></a>xfsrestore</h3><pre><code class="highlight bash"><span class="comment"># xfsrestore [-L S_label] [-f 备份文件] directory</span>xfsrestore -I</code></pre><h2 id="光盘写入工具"><a href="#光盘写入工具" class="headerlink" title="光盘写入工具"></a>光盘写入工具</h2><h3 id="mkisofs"><a href="#mkisofs" class="headerlink" title="mkisofs"></a>mkisofs</h3><pre><code class="highlight bash"><span class="comment"># mkisofs [-o isoname] filename/directory_name</span></code></pre><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-o</td><td>镜像名</td></tr><tr><td>-r</td><td>记录更多信息，包括UID&#x2F;GID和权限</td></tr><tr><td>-V</td><td>建立卷标</td></tr><tr><td>-J</td><td>产生兼容windows的文件名结构</td></tr><tr><td>-graft-point</td><td>好东西，分类镜像必备</td></tr></tbody></table><p>怀疑书上的刻录过程可能过于古老了，遇到这样的任务再说。</p><h2 id="其他常见的压缩备份工具"><a href="#其他常见的压缩备份工具" class="headerlink" title="其他常见的压缩备份工具"></a>其他常见的压缩备份工具</h2><h3 id="dd"><a href="#dd" class="headerlink" title="dd"></a>dd</h3><p>（几乎）直接读取磁盘扇区，并备份。</p><h3 id="cpio"><a href="#cpio" class="headerlink" title="cpio"></a>cpio</h3><p>可以备份任何东西，但必须配合find来备份</p>]]></content>
      
      
      <categories>
          
          <category> Operation </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 专栏：重学linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROS学习笔记（3）</title>
      <link href="/Auto/4cdedcde/"/>
      <url>/Auto/4cdedcde/</url>
      
        <content type="html"><![CDATA[<h1 id="写一个简单的publisher和subscriber"><a href="#写一个简单的publisher和subscriber" class="headerlink" title="写一个简单的publisher和subscriber"></a>写一个简单的publisher和subscriber</h1><h2 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h2><ol><li>在package目录下建立<code>src</code>文件夹</li><li>向其中写入一个<code>talker.cpp</code>和一个<code>listener.cpp</code></li><li>向<code>CMakeLists.txt</code>中写入依赖项</li><li>回到workspace目录，<code>catkin_make</code></li><li>切换到workspace环境，并启动roscore</li><li><code>rosrun begginer_tutorials talker</code></li><li><code>rosrun begginer_tutorials listener</code></li></ol><h2 id="文件说明"><a href="#文件说明" class="headerlink" title="文件说明"></a>文件说明</h2><pre><code class="highlight cpp"><span class="comment">// talker.cpp</span><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ros/ros.h&quot;</span> <span class="comment">//这是一个大的头文件，包含了所有需要的头文件，偷懒专用</span></span><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;std_msgs/String.h&quot;</span> <span class="comment">//使用msg包</span></span><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span><span class="comment">/**</span><span class="comment"> * This tutorial demonstrates simple sending of messages over the ROS system.</span><span class="comment"> */</span><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span><span class="function"></span>&#123;  <span class="comment">/**</span><span class="comment">   * The ros::init() function needs to see argc and argv so that it can perform</span><span class="comment">   * any ROS arguments and name remapping that were provided at the command line.</span><span class="comment">   * For programmatic remappings you can use a different version of init() which takes</span><span class="comment">   * remappings directly, but for most command-line programs, passing argc and argv is</span><span class="comment">   * the easiest way to do it.  The third argument to init() is the name of the node.</span><span class="comment">   *</span><span class="comment">   * You must call one of the versions of ros::init() before using any other</span><span class="comment">   * part of the ROS system.</span><span class="comment">   */</span>  ros::<span class="built_in">init</span>(argc, argv, <span class="string">&quot;talker&quot;</span>); <span class="comment">//初始化ros，并将该node的名字定为“talker”</span>  <span class="comment">/**</span><span class="comment">   * NodeHandle is the main access point to communications with the ROS system.</span><span class="comment">   * The first NodeHandle constructed will fully initialize this node, and the last</span><span class="comment">   * NodeHandle destructed will close down the node.</span><span class="comment">   */</span>  ros::NodeHandle n; <span class="comment">//</span>  <span class="comment">/**</span><span class="comment">   * The advertise() function is how you tell ROS that you want to</span><span class="comment">   * publish on a given topic name. This invokes a call to the ROS</span><span class="comment">   * master node, which keeps a registry of who is publishing and who</span><span class="comment">   * is subscribing. After this advertise() call is made, the master</span><span class="comment">   * node will notify anyone who is trying to subscribe to this topic name,</span><span class="comment">   * and they will in turn negotiate a peer-to-peer connection with this</span><span class="comment">   * node.  advertise() returns a Publisher object which allows you to</span><span class="comment">   * publish messages on that topic through a call to publish().  Once</span><span class="comment">   * all copies of the returned Publisher object are destroyed, the topic</span><span class="comment">   * will be automatically unadvertised.</span><span class="comment">   *</span><span class="comment">   * The second parameter to advertise() is the size of the message queue</span><span class="comment">   * used for publishing messages.  If messages are published more quickly</span><span class="comment">   * than we can send them, the number here specifies how many messages to</span><span class="comment">   * buffer up before throwing some away.</span><span class="comment">   */</span>  ros::Publisher chatter_pub = n.<span class="built_in">advertise</span>&lt;std_msgs::String&gt;(<span class="string">&quot;chatter&quot;</span>, <span class="number">1000</span>); <span class="comment">// 创建msg的publisher</span>  <span class="function">ros::Rate <span class="title">loop_rate</span><span class="params">(<span class="number">10</span>)</span></span>; <span class="comment">// 设定频率，单位Hz，与sleep（）搭配使用</span>  <span class="comment">/**</span><span class="comment">   * A count of how many messages we have sent. This is used to create</span><span class="comment">   * a unique string for each message.</span><span class="comment">   */</span>  <span class="type">int</span> count = <span class="number">0</span>;  <span class="keyword">while</span> (ros::<span class="built_in">ok</span>()) <span class="comment">// 循环</span>  &#123;    <span class="comment">/**</span><span class="comment">     * This is a message object. You stuff it with data, and then publish it.</span><span class="comment">     */</span>    std_msgs::String msg;    std::stringstream ss;    ss &lt;&lt; <span class="string">&quot;hello world &quot;</span> &lt;&lt; count;    msg.data = ss.<span class="built_in">str</span>();    <span class="built_in">ROS_INFO</span>(<span class="string">&quot;%s&quot;</span>, msg.data.<span class="built_in">c_str</span>()); <span class="comment">//这是print/cout的ros写法</span>    <span class="comment">/**</span><span class="comment">     * The publish() function is how you send messages. The parameter</span><span class="comment">     * is the message object. The type of this object must agree with the type</span><span class="comment">     * given as a template parameter to the advertise&lt;&gt;() call, as was done</span><span class="comment">     * in the constructor above.</span><span class="comment">     */</span>    chatter_pub.<span class="built_in">publish</span>(msg); <span class="comment">// 这里发出去了</span>    ros::<span class="built_in">spinOnce</span>(); <span class="comment">//接受反馈用的，但是在这里没用</span>    loop_rate.<span class="built_in">sleep</span>(); <span class="comment">//和上面的循环搭配使用</span>    ++count;  &#125;  <span class="keyword">return</span> <span class="number">0</span>;&#125;</code></pre><pre><code class="highlight cpp"><span class="comment">// listener.cpp</span><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ros/ros.h&quot;</span></span><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;std_msgs/String.h&quot;</span></span><span class="comment">/**</span><span class="comment"> * This tutorial demonstrates simple receipt of messages over the ROS system.</span><span class="comment"> */</span><span class="function"><span class="type">void</span> <span class="title">chatterCallback</span><span class="params">(<span class="type">const</span> std_msgs::String::ConstPtr&amp; msg)</span></span><span class="function"></span>&#123;  <span class="built_in">ROS_INFO</span>(<span class="string">&quot;I heard: [%s]&quot;</span>, msg-&gt;data.<span class="built_in">c_str</span>());&#125;<span class="comment">// 一个回调函数，便于处理消息</span><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span><span class="function"></span>&#123;  <span class="comment">/**</span><span class="comment">   * The ros::init() function needs to see argc and argv so that it can perform</span><span class="comment">   * any ROS arguments and name remapping that were provided at the command line.</span><span class="comment">   * For programmatic remappings you can use a different version of init() which takes</span><span class="comment">   * remappings directly, but for most command-line programs, passing argc and argv is</span><span class="comment">   * the easiest way to do it.  The third argument to init() is the name of the node.</span><span class="comment">   *</span><span class="comment">   * You must call one of the versions of ros::init() before using any other</span><span class="comment">   * part of the ROS system.</span><span class="comment">   */</span>  ros::<span class="built_in">init</span>(argc, argv, <span class="string">&quot;listener&quot;</span>);  <span class="comment">/**</span><span class="comment">   * NodeHandle is the main access point to communications with the ROS system.</span><span class="comment">   * The first NodeHandle constructed will fully initialize this node, and the last</span><span class="comment">   * NodeHandle destructed will close down the node.</span><span class="comment">   */</span>  ros::NodeHandle n;  <span class="comment">/**</span><span class="comment">   * The subscribe() call is how you tell ROS that you want to receive messages</span><span class="comment">   * on a given topic.  This invokes a call to the ROS</span><span class="comment">   * master node, which keeps a registry of who is publishing and who</span><span class="comment">   * is subscribing.  Messages are passed to a callback function, here</span><span class="comment">   * called chatterCallback.  subscribe() returns a Subscriber object that you</span><span class="comment">   * must hold on to until you want to unsubscribe.  When all copies of the Subscriber</span><span class="comment">   * object go out of scope, this callback will automatically be unsubscribed from</span><span class="comment">   * this topic.</span><span class="comment">   *</span><span class="comment">   * The second parameter to the subscribe() function is the size of the message</span><span class="comment">   * queue.  If messages are arriving faster than they are being processed, this</span><span class="comment">   * is the number of messages that will be buffered up before beginning to throw</span><span class="comment">   * away the oldest ones.</span><span class="comment">   */</span>  ros::Subscriber sub = n.<span class="built_in">subscribe</span>(<span class="string">&quot;chatter&quot;</span>, <span class="number">1000</span>, chatterCallback); <span class="comment">// 创建一个订阅“chatter”topic的subscriber，并使用函数“chatterCallback”来处理</span>  <span class="comment">/**</span><span class="comment">   * ros::spin() will enter a loop, pumping callbacks.  With this version, all</span><span class="comment">   * callbacks will be called from within this thread (the main one).  ros::spin()</span><span class="comment">   * will exit when Ctrl-C is pressed, or the node is shutdown by the master.</span><span class="comment">   */</span>  ros::<span class="built_in">spin</span>(); <span class="comment">// 进入循环</span>  <span class="keyword">return</span> <span class="number">0</span>;&#125;</code></pre><pre><code class="highlight cmake"><span class="comment"># CMakeLists.txt</span><span class="keyword">add_executable</span>(talker src/talker.cpp)<span class="keyword">target_link_libraries</span>(talker <span class="variable">$&#123;catkin_LIBRARIES&#125;</span>)<span class="keyword">add_dependencies</span>(talker beginner_tutorials_generate_messages_cpp)<span class="keyword">add_executable</span>(listener src/listener.cpp)<span class="keyword">target_link_libraries</span>(listener <span class="variable">$&#123;catkin_LIBRARIES&#125;</span>)<span class="keyword">add_dependencies</span>(listener beginner_tutorials_generate_messages_cpp)</code></pre><h1 id="写一个简单的service和client"><a href="#写一个简单的service和client" class="headerlink" title="写一个简单的service和client"></a>写一个简单的service和client</h1><h2 id="基本流程-1"><a href="#基本流程-1" class="headerlink" title="基本流程"></a>基本流程</h2><p>同上</p><h2 id="文件说明-1"><a href="#文件说明-1" class="headerlink" title="文件说明"></a>文件说明</h2><pre><code class="highlight cpp"><span class="comment">// add_two_ints_server.cpp</span><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ros/ros.h&quot;</span></span><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;beginner_tutorials/AddTwoInts.h&quot;</span> <span class="comment">//之前生成的msg头文件</span></span><span class="comment">// 一个相加函数</span><span class="function"><span class="type">bool</span> <span class="title">add</span><span class="params">(beginner_tutorials::AddTwoInts::Request  &amp;req,</span></span><span class="params"><span class="function">         beginner_tutorials::AddTwoInts::Response &amp;res)</span></span><span class="function"></span>&#123;  res.sum = req.a + req.b;  <span class="built_in">ROS_INFO</span>(<span class="string">&quot;request: x=%ld, y=%ld&quot;</span>, (<span class="type">long</span> <span class="type">int</span>)req.a, (<span class="type">long</span> <span class="type">int</span>)req.b);  <span class="built_in">ROS_INFO</span>(<span class="string">&quot;sending back response: [%ld]&quot;</span>, (<span class="type">long</span> <span class="type">int</span>)res.sum);  <span class="keyword">return</span> <span class="literal">true</span>;&#125;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span><span class="function"></span>&#123;  ros::<span class="built_in">init</span>(argc, argv, <span class="string">&quot;add_two_ints_server&quot;</span>);  ros::NodeHandle n;  ros::ServiceServer service = n.<span class="built_in">advertiseService</span>(<span class="string">&quot;add_two_ints&quot;</span>, add); <span class="comment">//创建service</span>  <span class="built_in">ROS_INFO</span>(<span class="string">&quot;Ready to add two ints.&quot;</span>);  ros::<span class="built_in">spin</span>();  <span class="keyword">return</span> <span class="number">0</span>;&#125;</code></pre><pre><code class="highlight cpp"><span class="comment">// add_two_ints_client.cpp</span><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ros/ros.h&quot;</span></span><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;beginner_tutorials/AddTwoInts.h&quot;</span></span><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span><span class="function"></span>&#123;  ros::<span class="built_in">init</span>(argc, argv, <span class="string">&quot;add_two_ints_client&quot;</span>);  <span class="keyword">if</span> (argc != <span class="number">3</span>)  &#123;    <span class="built_in">ROS_INFO</span>(<span class="string">&quot;usage: add_two_ints_client X Y&quot;</span>);    <span class="keyword">return</span> <span class="number">1</span>;  &#125;  ros::NodeHandle n;  ros::ServiceClient client = n.<span class="built_in">serviceClient</span>&lt;beginner_tutorials::AddTwoInts&gt;(<span class="string">&quot;add_two_ints&quot;</span>); <span class="comment">// 创建client</span>  beginner_tutorials::AddTwoInts srv; <span class="comment">//创建service</span>  srv.request.a = <span class="built_in">atoll</span>(argv[<span class="number">1</span>]);  srv.request.b = <span class="built_in">atoll</span>(argv[<span class="number">2</span>]);  <span class="keyword">if</span> (client.<span class="built_in">call</span>(srv)) <span class="comment">//调用service</span>  &#123;    <span class="built_in">ROS_INFO</span>(<span class="string">&quot;Sum: %ld&quot;</span>, (<span class="type">long</span> <span class="type">int</span>)srv.response.sum);  &#125;  <span class="keyword">else</span>  &#123;    <span class="built_in">ROS_ERROR</span>(<span class="string">&quot;Failed to call service add_two_ints&quot;</span>);    <span class="keyword">return</span> <span class="number">1</span>;  &#125;  <span class="keyword">return</span> <span class="number">0</span>;&#125;</code></pre><pre><code class="highlight cmake"><span class="comment"># CMakeLists.txt</span><span class="keyword">add_executable</span>(add_two_ints_server src/add_two_ints_server.cpp)<span class="keyword">target_link_libraries</span>(add_two_ints_server <span class="variable">$&#123;catkin_LIBRARIES&#125;</span>)<span class="keyword">add_dependencies</span>(add_two_ints_server beginner_tutorials_gencpp)<span class="keyword">add_executable</span>(add_two_ints_client src/add_two_ints_client.cpp)<span class="keyword">target_link_libraries</span>(add_two_ints_client <span class="variable">$&#123;catkin_LIBRARIES&#125;</span>)<span class="keyword">add_dependencies</span>(add_two_ints_client beginner_tutorials_gencpp)</code></pre><h1 id="记录与回放数据"><a href="#记录与回放数据" class="headerlink" title="记录与回放数据"></a>记录与回放数据</h1><h2 id="记录流程"><a href="#记录流程" class="headerlink" title="记录流程"></a>记录流程</h2><p>使用<code>rosbag</code></p><pre><code class="highlight bash"><span class="built_in">mkdir</span> ~/bagfiles<span class="built_in">cd</span> ~/bagfilesrosbag record -a</code></pre><h2 id="查看记录信息"><a href="#查看记录信息" class="headerlink" title="查看记录信息"></a>查看记录信息</h2><pre><code class="highlight bash">rosbag info &lt;your bagfile&gt;</code></pre><h2 id="回放"><a href="#回放" class="headerlink" title="回放"></a>回放</h2><pre><code class="highlight bash">rosbag play &lt;your bagfile&gt;</code></pre><h2 id="记录信息中的一部分"><a href="#记录信息中的一部分" class="headerlink" title="记录信息中的一部分"></a>记录信息中的一部分</h2><pre><code class="highlight bash">rosbag record -O subset /turtle1/cmd_vel /turtle1/pose</code></pre><h2 id="回放的偏差"><a href="#回放的偏差" class="headerlink" title="回放的偏差"></a>回放的偏差</h2><blockquote><p>In the previous section you may have noted that the turtle’s path may not have exactly mapped to the original keyboard input - the rough shape should have been the same, but the turtle may not have exactly tracked the same path. The reason for this is that the path tracked by turtlesim is very sensitive to small changes in timing in the system, and rosbag is limited in its ability to exactly duplicate the behavior of a running system in terms of when messages are recorded and processed by rosbag record, and when messages are produced and processed when using rosbag play. For nodes like turtlesim, where minor timing changes in when command messages are processed can subtly alter behavior, the user should not expect perfectly mimicked behavior.</p></blockquote><h1 id="从bag文件中读取信息"><a href="#从bag文件中读取信息" class="headerlink" title="从bag文件中读取信息"></a>从bag文件中读取信息</h1><h2 id="法一"><a href="#法一" class="headerlink" title="法一"></a>法一</h2><p>跑一遍，看terminal输出</p><h2 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h2><p>用<code>ros_readbagfile</code>脚本</p><h1 id="纠错"><a href="#纠错" class="headerlink" title="纠错"></a>纠错</h1><p>使用<code>roswtf</code>。这个名字真的wtf。</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>看了三四天吧，把官方的<code>begging level tutorial</code>看完了，然后分配任务发现以后可能用不到ROS，不过也算是有收获。ROS这种把自己建在另一个操作系统上的方式还真的有意思，它的设计让它很适合作为分布式系统，适用于解决多agent协同。以后用到了再说吧。</p>]]></content>
      
      
      <categories>
          
          <category> Auto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> ros </tag>
            
            <tag> 专栏：ros学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROS学习笔记（2）</title>
      <link href="/Auto/f462bbbb/"/>
      <url>/Auto/f462bbbb/</url>
      
        <content type="html"><![CDATA[<h1 id="ROS-Service"><a href="#ROS-Service" class="headerlink" title="ROS Service"></a>ROS Service</h1><h2 id="rosservice"><a href="#rosservice" class="headerlink" title="rosservice"></a>rosservice</h2><blockquote><p>Services are another way that nodes can communicate with each other. Services allow nodes to send a <strong>request</strong> and receive a <strong>response</strong>.</p></blockquote><pre><code class="highlight bash">rosservice list         <span class="built_in">print</span> information about active servicesrosservice call         call the service with the provided argsrosservice <span class="built_in">type</span>         <span class="built_in">print</span> service <span class="built_in">type</span>rosservice find         find services by service <span class="built_in">type</span>rosservice uri          <span class="built_in">print</span> service ROSRPC uri</code></pre><h2 id="rosparam"><a href="#rosparam" class="headerlink" title="rosparam"></a>rosparam</h2><pre><code class="highlight bash">rosparam <span class="built_in">set</span>            <span class="built_in">set</span> parameterrosparam get            get parameterrosparam load           load parameters from filerosparam dump           dump parameters to filerosparam delete         delete parameterrosparam list           list parameter names</code></pre><h1 id="使用rqt-console和roslaunch"><a href="#使用rqt-console和roslaunch" class="headerlink" title="使用rqt_console和roslaunch"></a>使用rqt_console和roslaunch</h1><h2 id="rqt-console"><a href="#rqt-console" class="headerlink" title="rqt_console"></a>rqt_console</h2><pre><code class="highlight bash">rosrun rqt_console rqt_console <span class="comment"># 查看日志</span>rosrun rqt_logger_level rqt_logger_level <span class="comment"># 设置日志等级，来源</span></code></pre><h2 id="roslaunch"><a href="#roslaunch" class="headerlink" title="roslaunch"></a>roslaunch</h2><p>自定义xml文件，使一只小海龟模仿另一只。</p><pre><code class="highlight bash">roslaunch [package] [filename.launch]</code></pre><h1 id="ROS-ed"><a href="#ROS-ed" class="headerlink" title="ROS ed"></a>ROS ed</h1><h3 id="rosed"><a href="#rosed" class="headerlink" title="rosed"></a>rosed</h3><pre><code class="highlight bash"><span class="comment"># rosed [package_name] [filename]</span>rosed roscpp Logger.msg</code></pre><p>使用<code>echo $EDITOR</code>查看当前的编辑器（为空说明使用了默认的<code>vim</code>）</p><p>可使用<code>export EDITOR=&#39;nano -w&#39;</code>之类的方式修改编辑器（永久修改的话最好把这行加入<code>.bashrc</code>）</p><h1 id="创建ROS-msg和srv文件"><a href="#创建ROS-msg和srv文件" class="headerlink" title="创建ROS msg和srv文件"></a>创建ROS msg和srv文件</h1><blockquote><ul><li><a href="http://wiki.ros.org/msg">msg</a>: msg files are simple text files that describe the fields of a ROS message. They are used to generate source code for messages in different languages.</li><li><a href="http://wiki.ros.org/srv">srv</a>: an srv file describes a service. It is composed of two parts: a request and a response.</li></ul></blockquote><blockquote><p>msgs are just simple text files with a field type and field name per line. The field types you can use are:</p><ul><li>int8, int16, int32, int64 (plus uint*)</li><li>float32, float64</li><li>string</li><li>time, duration</li><li>other msg files</li><li>variable-length array[] and fixed-length array[C]</li></ul></blockquote><blockquote><p>srv files are just like msg files, except they contain two parts: a request and a response. The two parts are separated by a ‘—‘ line. Here is an example of a srv file:</p><pre><code class="highlight bash">int64 Aint64 B---int64 Sum</code></pre></blockquote><h2 id="创建msg文件"><a href="#创建msg文件" class="headerlink" title="创建msg文件"></a>创建msg文件</h2><ol><li><p>在package目录下建立<code>msg</code>文件夹，向该文件夹写入一个<code>.msg</code>文件。</p></li><li><p>回到package目录下，修改<code>package.xml</code>文件</p><pre><code class="highlight xml"><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>message_generation<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span><span class="tag">&lt;<span class="name">exec_depend</span>&gt;</span>message_runtime<span class="tag">&lt;/<span class="name">exec_depend</span>&gt;</span></code></pre></li><li><p>修改<code>CMakeLists.txt</code></p><ol><li><code>find_package</code>中添加<code>message_generation</code></li><li><code>catkin_package</code>的<code>CATKIN_DEPENDS</code>后添加<code>message_runtime</code></li><li>取消<code>add_message_files</code>的注释，并向其中添加之前写的<code>.msg</code>文件</li><li>取消<code>generate_messages</code>的注释</li></ol></li><li><p>查看msg文件，使用<code>rosmsg show</code>如果文件格式没问题，会显示出定义的数据</p></li></ol><h3 id="rosmsg"><a href="#rosmsg" class="headerlink" title="rosmsg"></a>rosmsg</h3><pre><code class="highlight bash">rosmsg show     Show message descriptionrosmsg list     List all messagesrosmsg md5      Display message <span class="built_in">md5sum</span>rosmsg package  List messages <span class="keyword">in</span> a packagerosmsg packages List packages that contain messages</code></pre><h2 id="创建srv文件"><a href="#创建srv文件" class="headerlink" title="创建srv文件"></a>创建srv文件</h2><ol><li>在package下建立<code>srv</code>文件夹</li><li>使用<code>roscp</code>从其他地方复制个写好的<code>.srv</code>文件过来（肯定也能自己写拉）</li><li>同<a href="#%E5%88%9B%E5%BB%BAmsg%E6%96%87%E4%BB%B6">创建msg文件</a> ，要确保<code>package.xml</code>和<code>CMakeLists.txt</code>中有相应的内容</li><li><code>CMakeLists.txt</code>中，取消<code>add_service_files</code>的注释，并向其中添加之前写的<code>.srv</code>文件</li></ol><h3 id="roscp"><a href="#roscp" class="headerlink" title="roscp"></a>roscp</h3><pre><code class="highlight bash">$ roscp [package_name] [file_to_copy_path] [copy_path]</code></pre><h3 id="rossrv"><a href="#rossrv" class="headerlink" title="rossrv"></a>rossrv</h3><pre><code class="highlight bash">rossrv show &lt;service <span class="built_in">type</span>&gt;</code></pre><h2 id="生成msg和srv文件"><a href="#生成msg和srv文件" class="headerlink" title="生成msg和srv文件"></a>生成msg和srv文件</h2><ol><li>切换到package目录的上两层（就是workspace所在的目录，这里是<code>~/catkin_ws</code>）</li><li><code>catkin build</code>或者<code>catkin_make</code></li><li>文件生成好了，具体放在哪见下方参考</li></ol><blockquote><p>Any .msg file in the msg directory will generate code for use in all supported languages. The C++ message header file will be generated in <code>~/catkin_ws/devel/include/beginner_tutorials/</code>. The Python script will be created in <code>~/catkin_ws/devel/lib/python2.7/dist-packages/beginner_tutorials/msg</code>. The lisp file appears in <code>~/catkin_ws/devel/share/common-lisp/ros/beginner_tutorials/msg/</code>.</p><p>Similarly, any .srv files in the srv directory will have generated code in supported languages. For C++, this will generate header files in the same directory as the message header files. For Python and Lisp, there will be an ‘srv’ folder beside the ‘msg’ folders.</p><p>The full specification for the message format is available at the <a href="http://wiki.ros.org/ROS/Message_Description_Language">Message Description Language</a> page.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Auto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> ros </tag>
            
            <tag> 专栏：ros学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重学linux（3）.md</title>
      <link href="/Operation/Linux/ec3bdbd7/"/>
      <url>/Operation/Linux/ec3bdbd7/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux磁盘与文件系统管理"><a href="#Linux磁盘与文件系统管理" class="headerlink" title="Linux磁盘与文件系统管理"></a>Linux磁盘与文件系统管理</h1><h2 id="磁盘与分区"><a href="#磁盘与分区" class="headerlink" title="磁盘与分区"></a>磁盘与分区</h2><p>命名：</p><ul><li>&#x2F;dev&#x2F;sa[a-p][1-128]：物理磁盘的文件名</li><li>&#x2F;dev&#x2F;sa[a-d][1-128]：虚拟磁盘的文件名</li></ul><h2 id="文件系统特性"><a href="#文件系统特性" class="headerlink" title="文件系统特性"></a>文件系统特性</h2><h3 id="索引式文件系统：FAT、ext2"><a href="#索引式文件系统：FAT、ext2" class="headerlink" title="索引式文件系统：FAT、ext2"></a>索引式文件系统：FAT、ext2</h3><ul><li>superblock：记录文件系统的整体信息</li><li>inode：记录文件的属性</li><li>data block：实际记录文件的内容</li></ul><p>ext系列可以使用<code>dumpe2fs [dev]</code>来观测<code>superblock</code>。</p><p>xfs系统可以使用<code>xfs_info</code></p><h3 id="日志式文件系统"><a href="#日志式文件系统" class="headerlink" title="日志式文件系统"></a>日志式文件系统</h3><p>解决故障时存放数据与记录数据不一致的问题</p><p>查看linux支持的文件系统<code>cat /proc/filesystems</code></p><h2 id="文件系统的简单操作"><a href="#文件系统的简单操作" class="headerlink" title="文件系统的简单操作"></a>文件系统的简单操作</h2><h3 id="df-du"><a href="#df-du" class="headerlink" title="df du"></a>df du</h3><h3 id="ln"><a href="#ln" class="headerlink" title="ln"></a>ln</h3><p>硬链接不能对文件夹使用</p><h2 id="磁盘的分区、格式化、检验与挂载"><a href="#磁盘的分区、格式化、检验与挂载" class="headerlink" title="磁盘的分区、格式化、检验与挂载"></a>磁盘的分区、格式化、检验与挂载</h2><h3 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h3><h4 id="查看分区信息"><a href="#查看分区信息" class="headerlink" title="查看分区信息"></a>查看分区信息</h4><p>查看所有的磁盘<code>lsblk</code></p><p>查看UUID（universally unique identifier）<code>blkid</code></p><p>查看磁盘的分区信息<code>parted device_name print</code></p><p><strong>注</strong>：MBR使用fdisk分区，GPT使用gdisk分区</p><h4 id="添加分区"><a href="#添加分区" class="headerlink" title="添加分区"></a>添加分区</h4><pre><code class="highlight bash">gdisk the_devicep <span class="comment"># 查看磁盘目前的状态</span>n <span class="comment"># 开始新增分区</span>4 <span class="comment"># partion number（第n个分区）</span>65026048 <span class="comment"># first sector，某个inode的值</span>+1G <span class="comment"># last sector，可以和上面一样输入某个inode，但更好的方式是输入+xG让软件自行计算，默认为用完所有容量</span>L <span class="comment"># 或l，查看分区使用的文件系统</span>8300 <span class="comment"># 默认的Linux 文件系统，其他值在上面可以看到</span>w <span class="comment"># 确定分区</span>partprobe -s <span class="comment"># 更新linux内核的分区表信息</span></code></pre><h4 id="删除分区"><a href="#删除分区" class="headerlink" title="删除分区"></a>删除分区</h4><pre><code class="highlight bash">fdisk the_deviced</code></pre><h4 id="fdisk与gdisk的区别"><a href="#fdisk与gdisk的区别" class="headerlink" title="fdisk与gdisk的区别"></a>fdisk与gdisk的区别</h4><ul><li>fdisk通过m查看帮助，gdisk通过？</li><li>fdisk面向小磁盘，处理MBR分区表，gdisk面向更大的磁盘，处理GPT分区表</li></ul><p>其他注意：不要删除正在使用的分区，要先unmount</p><h3 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h3><pre><code class="highlight bash"><span class="comment"># mkfs</span>mkfs.xfs device <span class="comment">#格式化为xfs文件系统</span>mkfs.ext4 device <span class="comment"># 格式化为ext4</span></code></pre><table><thead><tr><th>参数</th><th>内容</th></tr></thead><tbody><tr><td>-b</td><td>区块容量，512到64k，最大限制为linux的4k</td></tr><tr><td>-L</td><td>文件系统标头的名称，Label name</td></tr><tr><td>-f</td><td>强制格式化</td></tr></tbody></table><p>ext4的默认配置位于<code>/etc/mke2fs.conf</code>中 </p><h4 id="格式化中的调优"><a href="#格式化中的调优" class="headerlink" title="格式化中的调优"></a>格式化中的调优</h4><ul><li>agcount：按照cpu的线程数来确定，<code>grep processor | /proc/cpuinfo</code></li><li>stripe：阵列里有特殊优化</li><li>sw：整列中盘数-1</li><li>extsize：数据宽度（swidth）stripe*sw</li></ul><h3 id="校验"><a href="#校验" class="headerlink" title="校验"></a>校验</h3><ul><li>xfs：<code>xfs_repair</code></li><li>ext4：<code>fsck.ext4</code></li></ul><h3 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h3> <pre><code class="highlight bash"><span class="comment"># mount</span>mount [-t filesystem] LABEL=<span class="string">&#x27;&#x27;</span> mount_pointmount UUID=<span class="string">&#x27;&#x27;</span> mount_pointmount device_name mount_pointmount -o remount,<span class="built_in">rm</span>,auto / <span class="comment"># 重新挂载根目录</span></code></pre><pre><code class="highlight bash"><span class="comment"># umount</span>umount device_nameumount mount_point</code></pre><h4 id="修改硬件类型"><a href="#修改硬件类型" class="headerlink" title="修改硬件类型"></a>修改硬件类型</h4><p>linux中一切皆文件，而设备使用两个数字来表示其类型</p><ul><li>major：主要设备代码</li><li>minor：次要设备代码</li></ul><p>使用<code>mknod</code>修改设备类型</p><pre><code class="highlight bash"><span class="built_in">mknod</span> device [bcp] [Major] [Minor]</code></pre><h4 id="添加文件系统的UUID和Label"><a href="#添加文件系统的UUID和Label" class="headerlink" title="添加文件系统的UUID和Label"></a>添加文件系统的UUID和Label</h4><ul><li>xfs：使用<code>xfs_admin</code></li><li>ext4：使用<code>tune2fs</code></li></ul><p><strong>注</strong>：为什么要使用UUID来进行挂载而不是简单的使用设备文件名?因为你无法保证该设备在所有linux系统中都有相同的文件名。</p><h2 id="设置启动挂载"><a href="#设置启动挂载" class="headerlink" title="设置启动挂载"></a>设置启动挂载</h2><p> 修改以下文件，参数在文件中会有注释说明的</p><ul><li><code>/etc/fstab</code>：普通硬盘挂载等</li><li><code>/etc/mtab</code>：让镜像文件在不刻录的情况下读取，使用loop挂载</li></ul><h2 id="swap分区"><a href="#swap分区" class="headerlink" title="swap分区"></a>swap分区</h2><h4 id="使用物理分区"><a href="#使用物理分区" class="headerlink" title="使用物理分区"></a>使用物理分区</h4><ol><li>先分一块区出来</li><li><code>mkswap device</code></li><li><code>free</code>看一眼成了 没</li></ol><h4 id="使用文件"><a href="#使用文件" class="headerlink" title="使用文件"></a>使用文件</h4><ol><li><code>dd</code>建立一个空的大文件</li><li><code>mkswap filename</code></li><li>同上</li></ol><p><em>注</em>：dd在后面讲</p><h2 id="parted分区"><a href="#parted分区" class="headerlink" title="parted分区"></a>parted分区</h2><pre><code class="highlight bash"><span class="comment"># parted [device] [command[arguments]]</span><span class="comment"># command</span><span class="comment"># mkpart [primary|logical|Extended] [ext4|vfat|xfs] start end</span><span class="comment">#print</span><span class="comment">#rm [partition]</span><span class="comment"># notice: start end use capacity(default MB) as unit</span>parted /dev/vda mkpart primary fat32 36.0GB 36.5GB</code></pre>]]></content>
      
      
      <categories>
          
          <category> Operation </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 专栏：重学linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重学linux（2）</title>
      <link href="/Operation/Linux/5da38e9e/"/>
      <url>/Operation/Linux/5da38e9e/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux目录与文件管理"><a href="#Linux目录与文件管理" class="headerlink" title="Linux目录与文件管理"></a>Linux目录与文件管理</h1><h2 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h2><h3 id="相对路径与绝对路径"><a href="#相对路径与绝对路径" class="headerlink" title="相对路径与绝对路径"></a>相对路径与绝对路径</h3><p>略</p><p>快捷关键字：</p><blockquote><p>.表示此层目录、</p><p>..上层</p><p>-前一个工作目录</p><p>~[user]某个用户的家目录</p><p>​空白也可表示自己的家目录 </p></blockquote><h2 id="PATH"><a href="#PATH" class="headerlink" title="$PATH"></a>$PATH</h2><p>添加方式：</p><pre><code class="highlight bash">PATH=<span class="string">&quot;<span class="variable">$&#123;PATH&#125;</span>:/directory&quot;</span></code></pre><h2 id="目录相关操作"><a href="#目录相关操作" class="headerlink" title="目录相关操作"></a>目录相关操作</h2><ul><li>cd</li><li>pwd -P：表示真实地址，而非链接地址</li><li>mkdir<ul><li>-m 设置文件权限</li><li>-p 递归创建</li></ul></li><li>rmdir<ul><li>-p 连同上层空目录一起删除</li></ul></li></ul><h2 id="文件相关操作"><a href="#文件相关操作" class="headerlink" title="文件相关操作"></a>文件相关操作</h2><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><p>略</p><h3 id="cp-rm-mv"><a href="#cp-rm-mv" class="headerlink" title="cp rm mv"></a>cp rm mv</h3><h4 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h4><table><thead><tr><th>参数</th><th>选项</th></tr></thead><tbody><tr><td>-a -dr –preserve-all</td><td>复制所有属性</td></tr><tr><td>-i</td><td>若存在，询问是否覆盖</td></tr><tr><td>-l</td><td>硬链接，相应的s为symbolic link</td></tr><tr><td>-p</td><td>带权限赋值</td></tr><tr><td>-r</td><td>递归赋值，用于文件夹赋值</td></tr><tr><td>-u</td><td>更新式复制，当destination比source旧才复制</td></tr></tbody></table><p>还有一点，如果cp的source有两个以上，destination一定要是目录。</p><h4 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h4><table><thead><tr><th>参数</th><th>选项</th></tr></thead><tbody><tr><td>-f</td><td>force</td></tr><tr><td>-i</td><td>询问</td></tr><tr><td>-r</td><td>递归</td></tr><tr><td>-v</td><td>verbose</td></tr></tbody></table><p>来自rm的man page：</p><pre><code class="highlight bash">To remove a file whose name starts with a <span class="string">&#x27;-&#x27;</span>, <span class="keyword">for</span> example <span class="string">&#x27;-foo&#x27;</span>, use one of these commands:       <span class="built_in">rm</span> -- -foo       <span class="built_in">rm</span> ./-foo</code></pre><p>其中–可以告诉parser，后面的东西不是option，而是arguments</p><h4 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h4><p>同cp</p><p><strong>注</strong>：rename可用于给多个文件重命名，以下为<code>man page</code>，大概是做匹配然后替换，但是rename有两个版本，C语言版使用通配符匹配，perl版本使用正则表达式匹配。可以使用<code>rename --verson</code>查看具体版本。</p><pre><code class="highlight bash">SYNOPSIS       rename [options] expression replacement file...DESCRIPTION       rename  will  rename  the  specified  files  by  replacing the first occurrence of expression <span class="keyword">in</span> their name by       replacement.OPTIONS       -s, --symlink              Do not rename a symlink but its target.       -v, --verbose              Show <span class="built_in">which</span> files <span class="built_in">where</span> renamed, <span class="keyword">if</span> any.       -n, --no-act              Do not make any changes.       -o, --no-overwrite              Do not overwrite existing files.       -V, --version              Display version information and <span class="built_in">exit</span>.       -h, --<span class="built_in">help</span>              Display <span class="built_in">help</span> text and <span class="built_in">exit</span></code></pre><pre><code class="highlight bash">区分方法: rename --version如果返回结果中包含 util-linux , 说明是 C 语言版本, 反之是 Perl 版本</code></pre><h3 id="获取文件名和目录名"><a href="#获取文件名和目录名" class="headerlink" title="获取文件名和目录名"></a>获取文件名和目录名</h3><pre><code class="highlight bash">$ <span class="built_in">basename</span> /etc/sysconfig/networknetwork$ <span class="built_in">dirname</span> /etc/sysconfig/network/etc/sysconfig</code></pre><h2 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h2><h3 id="直接查看"><a href="#直接查看" class="headerlink" title="直接查看"></a>直接查看</h3><h4 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h4><p>concatenate（串联）：正向全部显示</p><table><thead><tr><th>参数</th><th>选项</th></tr></thead><tbody><tr><td>-n</td><td>打印行号</td></tr><tr><td>-T</td><td>显示tab键</td></tr><tr><td>-v</td><td>显示看不出来的特殊字符</td></tr><tr><td>-A</td><td>相当于-vET</td></tr><tr><td>-E</td><td>显示换行符</td></tr></tbody></table><h4 id="tac"><a href="#tac" class="headerlink" title="tac"></a>tac</h4><p>cat的反向</p><h4 id="nl"><a href="#nl" class="headerlink" title="nl"></a>nl</h4><p>添加行号打印</p><h3 id="可翻页查看"><a href="#可翻页查看" class="headerlink" title="可翻页查看"></a>可翻页查看</h3><h4 id="more"><a href="#more" class="headerlink" title="more"></a>more</h4><p>vim操作模式，只能向后翻页</p><h4 id="less"><a href="#less" class="headerlink" title="less"></a>less</h4><p>vim操作模式，更灵活</p><h3 id="数据截取"><a href="#数据截取" class="headerlink" title="数据截取"></a>数据截取</h3><h4 id="head"><a href="#head" class="headerlink" title="head"></a>head</h4><pre><code class="highlight bash"><span class="built_in">head</span> -n [行数] 文件</code></pre><h4 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h4><pre><code class="highlight bash"><span class="built_in">tail</span> -n [行数] 文件 [-f] <span class="comment"># f表示持续刷新</span></code></pre><h3 id="非纯文本文件"><a href="#非纯文本文件" class="headerlink" title="非纯文本文件"></a>非纯文本文件</h3><h4 id="od"><a href="#od" class="headerlink" title="od"></a>od</h4><p>略了吧，没人会看二进制的</p><h3 id="修改文件时间or建立新文件"><a href="#修改文件时间or建立新文件" class="headerlink" title="修改文件时间or建立新文件"></a>修改文件时间or建立新文件</h3><p>touch</p><p>略了吧，一年到头改不了几次</p><h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><h3 id="默认权限"><a href="#默认权限" class="headerlink" title="默认权限"></a>默认权限</h3><pre><code class="highlight bash"><span class="built_in">umask</span> [-S] <span class="comment"># 查看默认权限</span><span class="built_in">umask</span> 002 <span class="comment"># 修改默认权限,这里的数字表示被拿走的权限</span><span class="comment">#而默认情况下，文件不会有x权限，文件夹一定有x权限</span><span class="comment">#即文件为-rw-rw-rw，目录为drwxrwxrwx</span></code></pre><h3 id="隐藏属性"><a href="#隐藏属性" class="headerlink" title="隐藏属性"></a>隐藏属性</h3><pre><code class="highlight bash">lsattr <span class="comment"># 显示文件隐藏属性</span>chattr <span class="comment"># 修改文件隐藏属性</span></code></pre><p>一些隐藏属性</p><table><thead><tr><th>属性</th><th>内容</th></tr></thead><tbody><tr><td>a</td><td>该文件只能增加，不能删除或修改数据</td></tr><tr><td>i</td><td>该文件不能被删除，改名，设置链接或写入数据</td></tr><tr><td>s与u</td><td>s是该文件被删除后将彻底删除，无法找回，u相反</td></tr></tbody></table><h3 id="特殊权限"><a href="#特殊权限" class="headerlink" title="特殊权限"></a>特殊权限</h3><h4 id="SUID–Set-UID"><a href="#SUID–Set-UID" class="headerlink" title="SUID–Set UID"></a>SUID–Set UID</h4><ul><li>只能用于binary</li><li>执行者要拥有该文件的x权限</li><li>执行者执行该文件时会获得该文件的owner的权限</li><li>举例：&#x2F;usr&#x2F;bin&#x2F;passwd（权限为<code>-rwsr-xr-x</code>）</li></ul><h4 id="SGID–Set-GID"><a href="#SGID–Set-GID" class="headerlink" title="SGID–Set GID"></a>SGID–Set GID</h4><p>同上，不过</p><ul><li>获得的是该文件group的权限</li><li>可用于目录和binary</li><li>举例：&#x2F;usr&#x2F;bin&#x2F;locate（权限为<code>-rwx--s--x</code>）</li></ul><h4 id="SBIT–Sticky-Bit"><a href="#SBIT–Sticky-Bit" class="headerlink" title="SBIT–Sticky Bit"></a>SBIT–Sticky Bit</h4><ul><li>只对目录有效</li><li>当用户对该目录有r和x权限，就自动拥有该目录内的w权限</li><li>当用户在该目录下建立文件或目录的时候，只有自己和root有权限删除该文件</li><li>举例：&#x2F;tmp（权限为<code>drwxrwxrwt</code>）</li></ul><h4 id="特殊权限的设置"><a href="#特殊权限的设置" class="headerlink" title="特殊权限的设置"></a>特殊权限的设置</h4><p>以上三者也遵循421，举例：<code>chmod 4755 filename</code></p><h4 id="查看文件类型"><a href="#查看文件类型" class="headerlink" title="查看文件类型"></a>查看文件类型</h4><pre><code class="highlight bash">file filename</code></pre><h2 id="命令与文件的查找"><a href="#命令与文件的查找" class="headerlink" title="命令与文件的查找"></a>命令与文件的查找</h2><h3 id="命令的查找"><a href="#命令的查找" class="headerlink" title="命令的查找"></a>命令的查找</h3><pre><code class="highlight bash"><span class="built_in">which</span> [-a] <span class="built_in">command</span> <span class="comment"># -a 表示列出所有PATH中的该命令</span><span class="built_in">which</span> <span class="built_in">history</span> <span class="comment"># 找不到history，因为这是bash的内置命令，只能用type来</span><span class="built_in">type</span> <span class="built_in">command</span> <span class="comment"># 后面会说</span></code></pre><h3 id="文件的查找"><a href="#文件的查找" class="headerlink" title="文件的查找"></a>文件的查找</h3><h4 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a>whereis</h4><p>速查重要目录，可用<code>whereis -l</code>查看去找的主要目录</p><h4 id="locate-updatedb"><a href="#locate-updatedb" class="headerlink" title="locate &#x2F; updatedb"></a>locate &#x2F; updatedb</h4><p><code>locate</code>通过数据库速查，<code>updatedb</code>手动更新数据库</p><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><p>查硬盘万能大法。</p><p>时间参数的说明</p><ul><li><code>atime</code>，last access time</li><li><code>ctime</code>，last change time</li><li><code>mtime</code>，last modify time</li></ul><p>时间参数后的数字的说明</p><ul><li>n，表示n天前的<em>一天之内</em></li><li>+n，n天之前（不包括第n天）</li><li>-n，n天之内（包括第n天）</li></ul><p>用户参数</p><ul><li>-uid n</li><li>-gid n</li><li>-user name</li><li>-group name</li><li><strong>-nouser</strong></li><li><strong>-nogroup</strong></li></ul><p>权限参数</p><ul><li>-name filename</li><li>-size [+-]SIZE</li><li>-type TYPE</li><li>-perm mode 权限的精确匹配</li><li>-perm -mode 必须包含某个权限</li><li>-perm &#x2F;mode 包含任意某个权限</li></ul><p>其他操作</p><ul><li>-exec command 查找完之后跟的额外操作</li><li>-print 默认操作，输出至屏幕</li></ul><p>exec举例</p><pre><code class="highlight bash">find /usr/bin /usr/sbin -perm /7000 -<span class="built_in">exec</span> <span class="built_in">ls</span> -l &#123;&#125; \;<span class="comment"># exec后不可使用别名</span><span class="comment"># &#123;&#125;表示find找到的内容</span><span class="comment"># \;表示结束，exec会从`-exec`后面执行到`\;`结束</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Operation </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 专栏：重学linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROS学习笔记（1）</title>
      <link href="/Auto/e6d71455/"/>
      <url>/Auto/e6d71455/</url>
      
        <content type="html"><![CDATA[<h1 id="ROS的环境和基本概念"><a href="#ROS的环境和基本概念" class="headerlink" title="ROS的环境和基本概念"></a>ROS的环境和基本概念</h1><p>ros是一个基于linux的操作系统，它通过提供一套自己的工具，把linux变的像是另一套系统。ros也有众多发行版，我这里选择的是<code>melodic</code>。接下来会用<code>&lt;distro&gt;</code>来表示当前发行版</p><p>通过<code>printenv | grep ROS</code>可以查看当前的ros环境。为了启动时就进入某个ros环境，需要在启动文件<code>.bashrc</code>中加入<code>source /opt/ros/&lt;distro&gt;/setup.bash</code></p><h2 id="Create-ROS-workspace"><a href="#Create-ROS-workspace" class="headerlink" title="Create ROS workspace"></a>Create ROS workspace</h2><p>有两种工具<code>catkin</code>和<code>rosbuild</code>，怎么选？官方这样说</p><blockquote><p>These instructions are for ROS Groovy and later. For ROS Fuerte and earlier, select rosbuild.</p></blockquote><p><code>ROS Groovy</code>是啥？<a href="http://wiki.ros.org/groovy">http://wiki.ros.org/groovy</a>，总之ubuntu12以上都算。</p><pre><code class="highlight bash"><span class="built_in">mkdir</span> -p ~/catkin_ws/src<span class="built_in">cd</span> ~/catkin_ws/catkin_make<span class="comment"># 如果一开始设置成了python3，那就要这样</span>catkin_make -DPYTHON_EXECUTABLE=/usr/bin/python3<span class="comment"># 设置workspace环境</span><span class="built_in">source</span> devel/setup.bash<span class="comment"># 看一眼设置好没有</span><span class="built_in">echo</span> <span class="variable">$ROS_PACKAGE_PATH</span>/home/youruser/catkin_ws/src:/opt/ros/kinetic/share</code></pre><h1 id="ROS文件系统"><a href="#ROS文件系统" class="headerlink" title="ROS文件系统"></a>ROS文件系统</h1><blockquote><p>接下来几章都是ros专门的教程内容，如果安装时选择了<code>full-installation</code>，那下面的不用看，如果没有，请先安装教程</p><pre><code class="highlight bash"><span class="built_in">sudo</span> apt-get install ros-&lt;distro&gt;-ros-tutorials</code></pre></blockquote><p>上一章提到，ros是通过一系列工具让linux看起来像另一个操作系统。这里的文件系统就是个很好的体现。</p><h2 id="rospack"><a href="#rospack" class="headerlink" title="rospack"></a>rospack</h2><pre><code class="highlight bash">rospack find [package_name]rospack install [package_name]</code></pre><p>相当于ros的包管理器</p><h2 id="roscd"><a href="#roscd" class="headerlink" title="roscd"></a>roscd</h2><pre><code class="highlight bash">roscd &lt;package-or-stack&gt;/[/subdir]roscd <span class="built_in">log</span> <span class="comment"># 当某个ros program 跑起来的时候才有用</span></code></pre><p>ros版本的cd，ros可能是有另一套filesystem，不过还是基于linux的fs构建的，所以也算是一个方便的工具，毕竟package可能会被安装在各种地方。package的安装位置可以通过<code>echo $ROS_PACKAGE_PATH</code>查看。</p><h2 id="rosls"><a href="#rosls" class="headerlink" title="rosls"></a>rosls</h2><p>ros版的ls，略了。</p><h2 id="tab补全"><a href="#tab补全" class="headerlink" title="tab补全"></a>tab补全</h2><p>略了</p><h1 id="Create-ROS-Package"><a href="#Create-ROS-Package" class="headerlink" title="Create ROS Package"></a>Create ROS Package</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p><code>catkin package</code>的必要条件</p><ul><li>一个<code>package.xml</code>文件</li><li>一个<code>CMakeLists.txt</code>文件</li><li>为每个package准备独立的文件夹</li></ul><p>像这样</p><pre><code class="highlight bash">workspace_folder/        -- WORKSPACE   src/                   -- SOURCE SPACE     CMakeLists.txt       -- <span class="string">&#x27;Toplevel&#x27;</span> CMake file, provided by catkin     package_1/      CMakeLists.txt     -- CMakeLists.txt file <span class="keyword">for</span> package_1      package.xml        -- Package manifest <span class="keyword">for</span> package_1    ...    package_n/      CMakeLists.txt     -- CMakeLists.txt file <span class="keyword">for</span> package_n      package.xml        -- Package manifest <span class="keyword">for</span> package_n</code></pre><h2 id="开始建立"><a href="#开始建立" class="headerlink" title="开始建立"></a>开始建立</h2><pre><code class="highlight bash"><span class="comment"># cd ~/catkin_ws/src</span>catkin_create_pkg beginner_tutorials std_msgs rospy roscpp<span class="built_in">cd</span> ~/catkin_wscatkin_make. ~/catkin_ws/devel/setup.bash <span class="comment"># . 相当于source</span></code></pre><p>以下为<code>catkin_create_pkg</code>的用法</p><pre><code class="highlight bash"><span class="comment"># 格式</span>catkin_create_pkg &lt;package_name&gt; [depend1] [depend2] [depend3]</code></pre><h2 id="查看依赖"><a href="#查看依赖" class="headerlink" title="查看依赖"></a>查看依赖</h2><h3 id="查看直接依赖"><a href="#查看直接依赖" class="headerlink" title="查看直接依赖"></a>查看直接依赖</h3><ol><li>通过rospack查看</li></ol><pre><code class="highlight bash">rospack depends1 beginner_tutorials roscpprospystd_msgs</code></pre><ol start="2"><li>通过xml文件查看</li></ol><pre><code class="highlight bash">roscd beginner_tutorials<span class="built_in">cat</span> package.xml</code></pre><h3 id="查看间接依赖"><a href="#查看间接依赖" class="headerlink" title="查看间接依赖"></a>查看间接依赖</h3><pre><code class="highlight bash">rospack depends1 rospy <span class="comment"># 子依赖的直接依赖</span>rospack depends beginner_tutorials <span class="comment"># 查看包括嵌套的所有子依赖项</span></code></pre><h2 id="自定义package"><a href="#自定义package" class="headerlink" title="自定义package"></a>自定义package</h2><h3 id="首先要修改xml文件"><a href="#首先要修改xml文件" class="headerlink" title="首先要修改xml文件"></a>首先要修改xml文件</h3><pre><code class="highlight xml"><span class="comment">&lt;!--首先是描述标签--&gt;</span><span class="tag">&lt;<span class="name">description</span>&gt;</span>The beginner_tutorials package<span class="tag">&lt;/<span class="name">description</span>&gt;</span></code></pre><pre><code class="highlight xml"><span class="comment">&lt;!--然后是持有者信息标签--&gt;</span><span class="comment">&lt;!-- One maintainer tag required, multiple allowed, one person per tag --&gt;</span> <span class="comment">&lt;!-- Example:  --&gt;</span><span class="comment">&lt;!-- &lt;maintainer email=&quot;jane.doe@example.com&quot;&gt;Jane Doe&lt;/maintainer&gt; --&gt;</span><span class="tag">&lt;<span class="name">maintainer</span> <span class="attr">email</span>=<span class="string">&quot;user@todo.todo&quot;</span>&gt;</span>user<span class="tag">&lt;/<span class="name">maintainer</span>&gt;</span></code></pre><pre><code class="highlight xml"><span class="comment">&lt;!--然后是license--&gt;</span><span class="comment">&lt;!-- One license tag required, multiple allowed, one license per tag --&gt;</span><span class="comment">&lt;!-- Commonly used license strings: --&gt;</span><span class="comment">&lt;!--   BSD, MIT, Boost Software License, GPLv2, GPLv3, LGPLv2.1, LGPLv3 --&gt;</span><span class="tag">&lt;<span class="name">license</span>&gt;</span>TODO<span class="tag">&lt;/<span class="name">license</span>&gt;</span></code></pre><pre><code class="highlight xml"><span class="comment">&lt;!--然后是依赖标签--&gt;</span><span class="comment">&lt;!-- The *_depend tags are used to specify dependencies --&gt;</span><span class="comment">&lt;!-- Dependencies can be catkin packages or system dependencies --&gt;</span><span class="comment">&lt;!-- Examples: --&gt;</span><span class="comment">&lt;!-- Use build_depend for packages you need at compile time: --&gt;</span><span class="comment">&lt;!--   &lt;build_depend&gt;genmsg&lt;/build_depend&gt; --&gt;</span><span class="comment">&lt;!-- Use buildtool_depend for build tool packages: --&gt;</span><span class="comment">&lt;!--   &lt;buildtool_depend&gt;catkin&lt;/buildtool_depend&gt; --&gt;</span><span class="comment">&lt;!-- Use exec_depend for packages you need at runtime: --&gt;</span><span class="comment">&lt;!--   &lt;exec_depend&gt;python-yaml&lt;/exec_depend&gt; --&gt;</span><span class="comment">&lt;!-- Use test_depend for packages you need only for testing: --&gt;</span><span class="comment">&lt;!--   &lt;test_depend&gt;gtest&lt;/test_depend&gt; --&gt;</span><span class="tag">&lt;<span class="name">buildtool_depend</span>&gt;</span>catkin<span class="tag">&lt;/<span class="name">buildtool_depend</span>&gt;</span><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>roscpp<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>rospy<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>std_msgs<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></code></pre><pre><code class="highlight xml"><span class="comment">&lt;!--对于希望在build和run的时候能用上的依赖，还要加上下面的--&gt;</span><span class="tag">&lt;<span class="name">exec_depend</span>&gt;</span>roscpp<span class="tag">&lt;/<span class="name">exec_depend</span>&gt;</span><span class="tag">&lt;<span class="name">exec_depend</span>&gt;</span>rospy<span class="tag">&lt;/<span class="name">exec_depend</span>&gt;</span><span class="tag">&lt;<span class="name">exec_depend</span>&gt;</span>std_msgs<span class="tag">&lt;/<span class="name">exec_depend</span>&gt;</span></code></pre><p>最后的结果</p><pre><code class="highlight xml"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span><span class="tag">&lt;<span class="name">package</span> <span class="attr">format</span>=<span class="string">&quot;2&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">name</span>&gt;</span>beginner_tutorials<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  <span class="tag">&lt;<span class="name">description</span>&gt;</span>The beginner_tutorials package<span class="tag">&lt;/<span class="name">description</span>&gt;</span>  <span class="tag">&lt;<span class="name">maintainer</span> <span class="attr">email</span>=<span class="string">&quot;you@yourdomain.tld&quot;</span>&gt;</span>Your Name<span class="tag">&lt;/<span class="name">maintainer</span>&gt;</span>  <span class="tag">&lt;<span class="name">license</span>&gt;</span>BSD<span class="tag">&lt;/<span class="name">license</span>&gt;</span>  <span class="tag">&lt;<span class="name">url</span> <span class="attr">type</span>=<span class="string">&quot;website&quot;</span>&gt;</span>http://wiki.ros.org/beginner_tutorials<span class="tag">&lt;/<span class="name">url</span>&gt;</span>  <span class="tag">&lt;<span class="name">author</span> <span class="attr">email</span>=<span class="string">&quot;you@yourdomain.tld&quot;</span>&gt;</span>Jane Doe<span class="tag">&lt;/<span class="name">author</span>&gt;</span>  <span class="tag">&lt;<span class="name">buildtool_depend</span>&gt;</span>catkin<span class="tag">&lt;/<span class="name">buildtool_depend</span>&gt;</span>  <span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>roscpp<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span>  <span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>rospy<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span>  <span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>std_msgs<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span>  <span class="tag">&lt;<span class="name">exec_depend</span>&gt;</span>roscpp<span class="tag">&lt;/<span class="name">exec_depend</span>&gt;</span>  <span class="tag">&lt;<span class="name">exec_depend</span>&gt;</span>rospy<span class="tag">&lt;/<span class="name">exec_depend</span>&gt;</span>  <span class="tag">&lt;<span class="name">exec_depend</span>&gt;</span>std_msgs<span class="tag">&lt;/<span class="name">exec_depend</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></code></pre><h2 id="然后修改CMakeLists-txt"><a href="#然后修改CMakeLists-txt" class="headerlink" title="然后修改CMakeLists.txt"></a>然后修改CMakeLists.txt</h2><p>教程没说，自己看吧。</p><h1 id="Build-Ros-Package"><a href="#Build-Ros-Package" class="headerlink" title="Build Ros Package"></a>Build Ros Package</h1><pre><code class="highlight bash"><span class="comment"># 常规的CMake</span><span class="comment"># In a CMake project</span>$ <span class="built_in">mkdir</span> build$ <span class="built_in">cd</span> build$ cmake ..$ make$ make install  <span class="comment"># (optionally)</span><span class="comment"># 现在的catkin_make</span><span class="comment"># In a catkin workspace</span>$ catkin_make --<span class="built_in">source</span> my_src$ catkin_make install --<span class="built_in">source</span> my_src  <span class="comment"># (optionally)</span></code></pre><h1 id="ROS-Nodes"><a href="#ROS-Nodes" class="headerlink" title="ROS Nodes"></a>ROS Nodes</h1><h2 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h2><ul><li><a href="http://wiki.ros.org/Nodes">Nodes</a>: A node is an executable that uses ROS to communicate with other nodes.</li><li><a href="http://wiki.ros.org/Messages">Messages</a>: ROS data type used when subscribing or publishing to a topic.</li><li><a href="http://wiki.ros.org/Topics">Topics</a>: Nodes can <em>publish</em> messages to a topic as well as <em>subscribe</em> to a topic to receive messages.</li><li><a href="http://wiki.ros.org/Master">Master</a>: Name service for ROS (i.e. helps nodes find each other)</li><li><a href="http://wiki.ros.org/rosout">rosout</a>: ROS equivalent of stdout&#x2F;stderr</li><li><a href="http://wiki.ros.org/roscore">roscore</a>: Master + rosout + parameter server (parameter server will be introduced later)</li></ul><h2 id="Nodes"><a href="#Nodes" class="headerlink" title="Nodes"></a>Nodes</h2><blockquote><p>Nodes can publish or subscribe to a Topic. Nodes can also provide or use a Service.</p></blockquote><h2 id="rosnode"><a href="#rosnode" class="headerlink" title="rosnode"></a>rosnode</h2><pre><code class="highlight bash"><span class="comment"># run roscore first</span>roscore<span class="comment"># using rosnode</span>rosnode list/rosoutrosnode info /rosout</code></pre><h2 id="rosrun"><a href="#rosrun" class="headerlink" title="rosrun"></a>rosrun</h2><pre><code class="highlight bash"><span class="comment"># rosrun [package_name] [node_name]</span>rosrun turtlesim turtlesim_noderosrun turtlesim turtlesim_node __name:=my_turtle<span class="comment"># 使用rosnode list 查看</span>rosnode list/my_turtle/rosout<span class="comment"># 使用rosnode ping 检查</span>rosnode ping</code></pre><h1 id="ROS-Topics"><a href="#ROS-Topics" class="headerlink" title="ROS Topics"></a>ROS Topics</h1><h2 id="启动小海龟"><a href="#启动小海龟" class="headerlink" title="启动小海龟"></a>启动小海龟</h2><pre><code class="highlight bash">roscore &amp;rosrun turtlesim turtlesim_node &amp;torrun turtlesim turtle_teletop_key<span class="comment"># new terminal</span>rosrun rqt_graph rqt_graph<span class="comment"># 打开rqt_graph工具，查看nodes和topics之间的通信方式（订阅关系）</span></code></pre><h2 id="rostopic"><a href="#rostopic" class="headerlink" title="rostopic"></a>rostopic</h2><pre><code class="highlight bash">$ rostopic -hrostopic bw     display bandwidth used by topicrostopic <span class="built_in">echo</span>   <span class="built_in">print</span> messages to screenrostopic hz     display publishing rate of topic    rostopic list   <span class="built_in">print</span> information about active topicsrostopic pub    publish data to topicrostopic <span class="built_in">type</span>   <span class="built_in">print</span> topic <span class="built_in">type</span></code></pre><h3 id="rostopic-echo"><a href="#rostopic-echo" class="headerlink" title="rostopic echo"></a>rostopic echo</h3><pre><code class="highlight bash"><span class="comment"># rostopic echo [topic]</span><span class="comment"># For ROS Hydro and later, this data is published on the /turtle1/cmd_vel topic.</span>rostopic <span class="built_in">echo</span> /turtle1/cmd_vel<span class="comment"># For ROS Groovy and earlier, this data is published on the /turtle1/command_velocity topic.</span><span class="comment"># 略了</span></code></pre><p>此时在rqt刷新一下可以看到，rostopic也在获取信息</p><h3 id="rostopic-list"><a href="#rostopic-list" class="headerlink" title="rostopic list"></a>rostopic list</h3><pre><code class="highlight bash">rostopic list -hUsage: rostopic list [/topic]Options:  -h, --<span class="built_in">help</span>            show this <span class="built_in">help</span> message and <span class="built_in">exit</span>  -b BAGFILE, --bag=BAGFILE                        list topics <span class="keyword">in</span> .bag file  -v, --verbose         list full details about each topic  -p                    list only publishers  -s                    list only subscribers</code></pre><p>verbose option</p><pre><code class="highlight bash">rostopic list -v</code></pre><h3 id="rostopic-type-rosmsg初探"><a href="#rostopic-type-rosmsg初探" class="headerlink" title="rostopic type &amp;&amp; rosmsg初探"></a>rostopic type &amp;&amp; rosmsg初探</h3><p>上面都是对node的查看，下面是对<code>ros message</code>的查看。</p><pre><code class="highlight bash"><span class="comment"># rostopic type [topic]</span><span class="comment"># 首先查看topic的类型</span>rostopic <span class="built_in">type</span> /turtle1/cmd_vel<span class="comment"># 然后使用rosmsg查看msg的内容</span>rosmsg show geometry_msgs/Twist</code></pre><h3 id="rostopic-pub"><a href="#rostopic-pub" class="headerlink" title="rostopic pub"></a>rostopic pub</h3><p>手动发送信息</p><pre><code class="highlight bash"><span class="comment"># rostopic pub [topic] [msg_type] [args]</span>rostopic pub -1 /turtle1/cmd_vel geometry_msgs/Twist -- <span class="string">&#x27;[2.0, 0.0, 0.0]&#x27;</span> <span class="string">&#x27;[0.0, 0.0, 1.8]&#x27;</span><span class="comment"># 小海龟转圈</span>rostopic pub /turtle1/cmd_vel geometry_msgs/Twist -r 1 -- <span class="string">&#x27;[2.0, 0.0, 0.0]&#x27;</span> <span class="string">&#x27;[0.0, 0.0, -1.8]&#x27;</span></code></pre><h3 id="rostopic-hz"><a href="#rostopic-hz" class="headerlink" title="rostopic hz"></a>rostopic hz</h3><blockquote><p><code>rostopic hz</code> reports the rate at which data is published.</p></blockquote><pre><code class="highlight bash"><span class="comment"># rostopic hz [topic]</span>rostopic hz /turtle1/poserostopic <span class="built_in">type</span> /turtle1/cmd_vel | rosmsg show</code></pre><h3 id="rqt-plot"><a href="#rqt-plot" class="headerlink" title="rqt_plot"></a>rqt_plot</h3><pre><code class="highlight bash">rosrun rqt_plot rqt_plot</code></pre><p>对数据绘图</p>]]></content>
      
      
      <categories>
          
          <category> Auto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tag1 </tag>
            
            <tag> tag2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s权威指南学习笔记（1）</title>
      <link href="/Operation/Cloud/667826cc/"/>
      <url>/Operation/Cloud/667826cc/</url>
      
        <content type="html"><![CDATA[<h1 id="k8s安装配置指南"><a href="#k8s安装配置指南" class="headerlink" title="k8s安装配置指南"></a>k8s安装配置指南</h1><h2 id="kubeadm安装"><a href="#kubeadm安装" class="headerlink" title="kubeadm安装"></a>kubeadm安装</h2><h3 id="安装kubeadm"><a href="#安装kubeadm" class="headerlink" title="安装kubeadm"></a>安装kubeadm</h3><p>kubeadm是为了简化集群安装过程引入的工具</p><p>大致步骤为换源，然后包管理工具安装以下套件</p><pre><code class="highlight bash">yum install -y kubelet kubeadm kubectl</code></pre><h3 id="修改kubeadm的默认配置"><a href="#修改kubeadm的默认配置" class="headerlink" title="修改kubeadm的默认配置"></a>修改kubeadm的默认配置</h3><pre><code class="highlight bash">kubeadm config <span class="built_in">print</span> init-defaults <span class="comment"># 输出kubeadm init默认参数</span>kubeadm config <span class="built_in">print</span> join-defaults <span class="comment"># 输出kubeadm join的默认参数</span></code></pre><p>使用以下命令将默认配置保存备用</p><pre><code class="highlight bash">kubeadm config <span class="built_in">print</span> init-defaults &gt; init.default.yaml</code></pre><h3 id="下载kubenetes相关镜像"><a href="#下载kubenetes相关镜像" class="headerlink" title="下载kubenetes相关镜像"></a>下载kubenetes相关镜像</h3><p>为了加快k8s创建集群过程，可预先下载images</p><pre><code class="highlight bash">kubeadm config images list <span class="comment"># 查看镜像列表</span>kubeadm config images pull --config=init-config.yaml# 预下载镜像kubeadm config images pull --image-repository=http://registry.cn-hangzhou.aliyuncs.com/google_containers  <span class="comment"># 或者这样</span></code></pre><p><strong>注</strong>：如果访问不了<a href="k8s.gcr.io">k8s.gcr.io</a>，则需修改<code>/etc/docker/daemon.json</code>中的<code>registry-mirrors</code>项，改为国内地址。</p><p>换源是个很麻烦的问题，以下是另一种方案</p><pre><code class="highlight bash">kubeadm config images list <span class="comment"># 查看所需镜像列表</span>images=(  <span class="comment"># 下面的镜像应该去除&quot;k8s.gcr.io/&quot;的前缀，版本换成上面获取到的版本</span>    kube-apiserver:v1.12.1    kube-controller-manager:v1.12.1    kube-scheduler:v1.12.1    kube-proxy:v1.12.1    pause:3.1    etcd:3.2.24    coredns:1.2.2)<span class="keyword">for</span> imageName <span class="keyword">in</span> <span class="variable">$&#123;images[@]&#125;</span> ; <span class="keyword">do</span>    docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/<span class="variable">$imageName</span>    docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/<span class="variable">$imageName</span> k8s.gcr.io/<span class="variable">$imageName</span>    docker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/<span class="variable">$imageName</span><span class="keyword">done</span><span class="comment"># 使用脚本拉取</span></code></pre><p>该方案来源：<a href="https://zhuanlan.zhihu.com/p/46341911">https://zhuanlan.zhihu.com/p/46341911</a></p><h3 id="使用kube-init-安装master节点"><a href="#使用kube-init-安装master节点" class="headerlink" title="使用kube init 安装master节点"></a>使用kube init 安装master节点</h3><pre><code class="highlight bash">kubeadm init <span class="comment"># 初始化</span>kubeadm init phase preflight <span class="comment"># 只做预检查</span>kubeadm init --ignore-preflight-errors <span class="comment"># 跳过预检查进行初始化</span></code></pre><p><strong>注意</strong>：如果是在启动了kubelet之后再拉取的镜像，请重启kubelet。不然kubeadm会识别不到刚刚拉取的镜像</p><p><em>ps：最后还是挂梯子init完了，有个镜像的名字和要求的不一样，懒得改tag了</em></p><p>对于root用户，直接键入<code>export KUBECONFIG=/etc/kubernetes/admin.conf</code>后即可使用kubectl查看control plane的信息，对于其他用户，需要使用另外的步骤，这些步骤都会在安装完成后显示出来，我贴在下面</p><pre><code class="highlight bash">Your Kubernetes control-plane has initialized successfully!To start using your cluster, you need to run the following as a regular user:  <span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube  <span class="built_in">sudo</span> <span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config  <span class="built_in">sudo</span> <span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/configAlternatively, <span class="keyword">if</span> you are the root user, you can run:  <span class="built_in">export</span> KUBECONFIG=/etc/kubernetes/admin.confYou should now deploy a pod network to the cluster.Run <span class="string">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> with one of the options listed at:  https://kubernetes.io/docs/concepts/cluster-administration/addons/Then you can <span class="built_in">join</span> any number of worker nodes by running the following on each as root:kubeadm <span class="built_in">join</span> 10.0.2.15:6443 --token sddm7y.7eebnrzpl2koekx1 \        --discovery-token-ca-cert-hash sha256:77ed4804b2c367c1f3eb0b3e7114fdbed2bc94748d26d04d14d22af67fbb7e7e</code></pre><p>如果不执行这些步骤，会出现以下报错</p><pre><code class="highlight bash">The connection to the server localhost:8080 was refused - did you specify the right host or port?</code></pre><p>还要注意的一点是，kubeadm默认的安装过程不包含网络插件（CNI）的初始化，这些需要另外的步骤了。</p><h3 id="加入节点"><a href="#加入节点" class="headerlink" title="加入节点"></a>加入节点</h3><p>在节点配置好环境后，将上面的<code>kubeadm join</code>输入到另一节点即可。</p><h3 id="安装CNI网络插件"><a href="#安装CNI网络插件" class="headerlink" title="安装CNI网络插件"></a>安装CNI网络插件</h3><p>略</p><h2 id="二进制形式部署安全高可用k8s集群"><a href="#二进制形式部署安全高可用k8s集群" class="headerlink" title="二进制形式部署安全高可用k8s集群"></a>二进制形式部署安全高可用k8s集群</h2><h3 id="master高可用架构"><a href="#master高可用架构" class="headerlink" title="master高可用架构"></a>master高可用架构</h3><ul><li>master中的kube-apiserver、kube-controller-manager、kube-scheduler至少以三个节点的多实例方式部署</li><li>master启用基于CA认证的HTTPS安全机制</li><li>etcd以至少三个节点的集群模式部署</li><li>etcd启用CA认证的HTTPS安全机制</li><li>master启用RBAC授权模式</li></ul><p>在三个（或多个）master节点前，通过一个负载均衡器提供对客户端唯一访问入口地址。</p><h3 id="CA根证书"><a href="#CA根证书" class="headerlink" title="CA根证书"></a>CA根证书</h3><pre><code class="highlight bash">openssl genrsa -out ca.key 2048openssl req -x509 -new -nodes -key ca.key -subj <span class="string">&quot;/CN=网址&quot;</span> -days 36500 -out ca.crt</code></pre><ul><li>-subj: “&#x2F;CN”的值为master主机名或IP地址</li><li>-days：设置证书的有效期</li><li>将生成的<code>ca.key</code>和<code>ca.crt</code>保存至<code>/etc/kubernetes/pki</code>目录下</li></ul><p>看到这里发现后面的看不太懂了，先跳一跳 </p>]]></content>
      
      
      <categories>
          
          <category> Operation </category>
          
          <category> Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> k8s权威指南学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s权威指南学习笔记（0）</title>
      <link href="/Operation/Cloud/dec441a9/"/>
      <url>/Operation/Cloud/dec441a9/</url>
      
        <content type="html"><![CDATA[<h1 id="k8s入门"><a href="#k8s入门" class="headerlink" title="k8s入门"></a>k8s入门</h1><h2 id="了解k8s"><a href="#了解k8s" class="headerlink" title="了解k8s"></a>了解k8s</h2><p>来自google的borg</p><p>k8s中，<strong>service</strong>是分布式集群架构的核心。</p><pre class="mermaid">graph LR;container-->pod-->node-->cluster;</pre><p>其中：</p><ul><li>pod是k8s调度的最小单位</li><li>pod是service的载体</li></ul><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><p>略</p><h2 id="网络问题"><a href="#网络问题" class="headerlink" title="网络问题"></a>网络问题</h2><p>三个IP</p><ul><li>node ip</li><li>pod ip</li><li>service ip</li></ul><h3 id="三种服务类型"><a href="#三种服务类型" class="headerlink" title="三种服务类型"></a>三种服务类型</h3><ul><li>无状态（大多数）</li><li>有状态（需配合operator使用）</li><li>批处理（job）</li></ul><p>第一章可以说是TLDR，下章见吧。</p>]]></content>
      
      
      <categories>
          
          <category> Operation </category>
          
          <category> Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专栏：k8s权威指南学习笔记 </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重学linux（1）</title>
      <link href="/Operation/Linux/4f162170/"/>
      <url>/Operation/Linux/4f162170/</url>
      
        <content type="html"><![CDATA[<h1 id="文件权限与目录配置"><a href="#文件权限与目录配置" class="headerlink" title="文件权限与目录配置"></a>文件权限与目录配置</h1><h2 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h2><table><thead><tr><th>权限</th><th>链接数</th><th>拥有者</th><th>用户组</th><th>大小</th><th>修改日期</th><th>文件名</th></tr></thead><tbody><tr><td>dr-xrw-r—</td><td>5</td><td>root</td><td>root</td><td>1864</td><td>May 19 12:01</td><td>1.cfg</td></tr></tbody></table><h3 id="权限的第一个字符"><a href="#权限的第一个字符" class="headerlink" title="权限的第一个字符"></a>权限的第一个字符</h3><table><thead><tr><th>字符</th><th>类型</th></tr></thead><tbody><tr><td>d</td><td>目录</td></tr><tr><td>-</td><td>文件</td></tr><tr><td>l</td><td>链接</td></tr><tr><td>b</td><td>块设备（可随机读写的存储设备）</td></tr><tr><td>c</td><td>串口设备（一次性读取的设备）</td></tr><tr><td>p</td><td>管道（pipe）</td></tr><tr><td>s</td><td>socket</td></tr></tbody></table><h3 id="三组权限"><a href="#三组权限" class="headerlink" title="三组权限"></a>三组权限</h3><ul><li>拥有者</li><li>用户组</li><li>其他人</li></ul><h3 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h3><p>太久远会被折叠，使用<code>ls -l --full-time</code>查看具体时间</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>文件名长度：255个字符，128个汉字</p><p>文件名限制：少用特殊符号，如果有特殊符号，使用单引号</p><h2 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h2><h3 id="chgrp"><a href="#chgrp" class="headerlink" title="chgrp"></a>chgrp</h3><pre><code class="highlight bash"><span class="built_in">chgrp</span> [-R] <span class="built_in">dirname</span>/filename ...</code></pre><h3 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h3><pre><code class="highlight bash"><span class="built_in">chown</span> [-R] username:groupname <span class="built_in">dirname</span>/filename ...</code></pre><h3 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h3><pre><code class="highlight bash"><span class="comment"># x,y,z = 4/2/1</span><span class="built_in">chmod</span> [-R] xyz <span class="built_in">dirname</span>/filename ...<span class="comment"># id = u g o a; ac = r w x</span><span class="built_in">chmod</span> [-R] u+r <span class="built_in">dirname</span>/filename ...</code></pre><h2 id="目录配置"><a href="#目录配置" class="headerlink" title="目录配置"></a>目录配置</h2><p>标准：FHS</p><h3 id="FHS要求存在的目录"><a href="#FHS要求存在的目录" class="headerlink" title="FHS要求存在的目录"></a>FHS要求存在的目录</h3><table><thead><tr><th>目录</th><th>内容</th></tr></thead><tbody><tr><td>&#x2F;bin</td><td>单人维护下仍然可以正常使用的可执行文件</td></tr><tr><td>&#x2F;boot</td><td>启动所需，包括内核文件，启动选项，grub2</td></tr><tr><td>&#x2F;dev</td><td>块设备，包括硬盘、外设，以及特有的&#x2F;dev&#x2F;null &#x2F;dev&#x2F;tty</td></tr><tr><td>&#x2F;etc</td><td>系统的主要配置文件，<strong>建议不要放可执行文件进来</strong></td></tr><tr><td>&#x2F;lib</td><td>函数库，&#x2F;lib&#x2F;modules中有主要的内核中驱动程序</td></tr><tr><td>&#x2F;media</td><td>可删除的设备，软盘光盘</td></tr><tr><td>&#x2F;mnt</td><td>用于临时挂载</td></tr><tr><td>&#x2F;opt</td><td>第三方独立软件，如kde</td></tr><tr><td>&#x2F;run</td><td>系统启动后所生成的各项信息，该目录又内存来模拟</td></tr><tr><td>&#x2F;sbin</td><td>启动过程中，启动、修复、还原系统的命令</td></tr><tr><td>&#x2F;srv</td><td>网络服务的数据目录</td></tr><tr><td>&#x2F;tmp</td><td>正在执行的程序暂时存放文件的位置，建议定期清理</td></tr><tr><td>&#x2F;usr</td><td>稍后介绍</td></tr><tr><td>&#x2F;var</td><td>稍后介绍</td></tr></tbody></table><h3 id="FHS建议存在的目录"><a href="#FHS建议存在的目录" class="headerlink" title="FHS建议存在的目录"></a>FHS建议存在的目录</h3><table><thead><tr><th>目录</th><th>内容</th></tr></thead><tbody><tr><td>&#x2F;home</td><td>家目录，使用<del>来表示自己，</del>123表示123的家目录</td></tr><tr><td>&#x2F;lib<qual></td><td>存放与&#x2F;lib不同格式的函数库</td></tr><tr><td>&#x2F;root</td><td>root的家目录</td></tr></tbody></table><h3 id="FHS未要求但也很重要的目录"><a href="#FHS未要求但也很重要的目录" class="headerlink" title="FHS未要求但也很重要的目录"></a>FHS未要求但也很重要的目录</h3><table><thead><tr><th>目录</th><th>内容</th></tr></thead><tbody><tr><td>&#x2F;lost+found</td><td>文件系统发生错误时，用于找回的目录</td></tr><tr><td>&#x2F;proc</td><td>虚拟的文件系统，存放在内存中，包括系统内核，进程信息，外设和网络的状态</td></tr><tr><td>&#x2F;sys</td><td>虚拟文件系统，记录内核和系统硬件的信息，包括已加载的内核模块和检测到的硬件的信息</td></tr></tbody></table><h3 id="usr目录"><a href="#usr目录" class="headerlink" title="&#x2F;usr目录"></a>&#x2F;usr目录</h3><p>usr的全称不是user，而是<code>UNIX Software Resource</code></p><h4 id="FHS要求必须存在的目录"><a href="#FHS要求必须存在的目录" class="headerlink" title="FHS要求必须存在的目录"></a>FHS要求必须存在的目录</h4><table><thead><tr><th>目录</th><th>内容</th></tr></thead><tbody><tr><td>&#x2F;usr&#x2F;bin</td><td>一般用户能使用的命令，&#x2F;bin目录也被链接至此，FHS建议此目录下不要有子目录（为了加快查找速度？）</td></tr><tr><td>&#x2F;usr&#x2F;lib</td><td>同上，&#x2F;lib也被链接至此</td></tr><tr><td>&#x2F;usr&#x2F;local</td><td>自己下载的软件安装至此</td></tr><tr><td>&#x2F;usr&#x2F;sbin</td><td>非系统正常运行所需的系统命令，常见的是网络服务器中的daemo，&#x2F;sbin被链接至此</td></tr><tr><td>&#x2F;usr&#x2F;share</td><td>存放只读的数据文件，尤其是共享文件，如man，doc，zoneinfo（时区文件）</td></tr></tbody></table><h4 id="FHS建议存在的目录-1"><a href="#FHS建议存在的目录-1" class="headerlink" title="FHS建议存在的目录"></a>FHS建议存在的目录</h4><table><thead><tr><th>目录</th><th>内容</th></tr></thead><tbody><tr><td>&#x2F;usr&#x2F;games</td><td>游戏（woc？？？</td></tr><tr><td>&#x2F;usr&#x2F;include</td><td>c和c++的头文件与包含文件，用于tarball</td></tr><tr><td>&#x2F;usr&#x2F;libexec</td><td>某些不被一般用户常用的执行文件或脚本，如x window下的指令</td></tr><tr><td>&#x2F;usr&#x2F;lib<qual></td><td>同前</td></tr><tr><td>&#x2F;usr&#x2F;src</td><td>存放源码，比如内核源码</td></tr></tbody></table><h3 id="var目录"><a href="#var目录" class="headerlink" title="&#x2F;var目录"></a>&#x2F;var目录</h3><p> &#x2F;var存放流动的文件，如缓存、日志、以及某些软件运行产生的文件</p><h4 id="FHS要求必须存在的目录-1"><a href="#FHS要求必须存在的目录-1" class="headerlink" title="FHS要求必须存在的目录"></a>FHS要求必须存在的目录</h4><table><thead><tr><th>目录</th><th>内容</th></tr></thead><tbody><tr><td>&#x2F;var&#x2F;cache</td><td>程序运行过程中的缓存</td></tr><tr><td>&#x2F;var&#x2F;lib</td><td>程序运行中，用到的链接库</td></tr><tr><td>&#x2F;var&#x2F;lock</td><td>锁的存放位置</td></tr><tr><td>&#x2F;var&#x2F;log</td><td>日志</td></tr><tr><td>&#x2F;var&#x2F;mail</td><td>邮件目录，也会存放到&#x2F;var&#x2F;spool&#x2F;mail中</td></tr><tr><td>&#x2F;var&#x2F;run</td><td>程序启动后PID的存放位置</td></tr><tr><td>&#x2F;var&#x2F;spool</td><td>队列数据</td></tr></tbody></table><p>这里鸟哥推荐再去看看FHS的官方文档，有空去研读一下。</p><h2 id="相对路径与绝对路径"><a href="#相对路径与绝对路径" class="headerlink" title="相对路径与绝对路径"></a>相对路径与绝对路径</h2><p>略</p><h2 id="linux的标准"><a href="#linux的标准" class="headerlink" title="linux的标准"></a>linux的标准</h2><p>FHS之外，还有LSB（Linux Standard Base）。</p><p>需要使用包管理工具安装lsb后，使用<code>lsb_release -a</code>来查看系统信息</p>]]></content>
      
      
      <categories>
          
          <category> Operation </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 专栏：重学linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重学linux（0）</title>
      <link href="/Operation/Linux/f7aa4615/"/>
      <url>/Operation/Linux/f7aa4615/</url>
      
        <content type="html"><![CDATA[<h1 id="把linux的操作再学一遍！"><a href="#把linux的操作再学一遍！" class="headerlink" title="把linux的操作再学一遍！"></a>把linux的操作再学一遍！</h1><p>感受到了之前运维工作中的力不从心，于是乎决定再学一遍</p><p>路线是从鸟哥私房菜的第四章开始，跳过基础知识和安装的章节。</p><h1 id="首次登录与在线求助"><a href="#首次登录与在线求助" class="headerlink" title="首次登录与在线求助"></a>首次登录与在线求助</h1><h2 id="图形界面"><a href="#图形界面" class="headerlink" title="图形界面"></a>图形界面</h2><p>这个略了，不是很想用。</p><p>只要记得有个<code>startx</code>用来启动<code>X Window</code>就行了。</p><h2 id="初识命令行"><a href="#初识命令行" class="headerlink" title="初识命令行"></a>初识命令行</h2><h3 id="登录提示"><a href="#登录提示" class="headerlink" title="登录提示"></a>登录提示</h3><p>文件位于<code>/etc/issue</code>。使用<code>man issue</code>查看帮助，可知文件中反斜杠（escape）内容来自<code>agetty</code>，使用<code>man agetty</code>查询语义后可自定义该文件，示例：</p><pre><code class="highlight bash">Ubuntu 18.04.6 LTS \n \l</code></pre><h3 id="prompt"><a href="#prompt" class="headerlink" title="prompt"></a>prompt</h3><p>小知识：</p><p>root的提示符为<code>#</code></p><p>普通用户为<code>$</code></p><h3 id="查看语言支持"><a href="#查看语言支持" class="headerlink" title="查看语言支持"></a>查看语言支持</h3><pre><code class="highlight bash"><span class="built_in">echo</span> <span class="variable">$LANG</span> <span class="comment"># 现在在用的语言</span>locale <span class="comment"># 语言相关的设定</span></code></pre><h3 id="几个小工具，复习一下："><a href="#几个小工具，复习一下：" class="headerlink" title="几个小工具，复习一下："></a>几个小工具，复习一下：</h3><ol><li>date：看时间</li><li>cal：看日历</li><li>bc：计算器</li></ol><h3 id="几个快捷键"><a href="#几个快捷键" class="headerlink" title="几个快捷键"></a>几个快捷键</h3><ol><li>tab：补全</li><li>ctrl+c：中断</li><li>ctrl+d：EOF（也相当于exit）</li><li>shift+page up&#x2F;down：命令行中翻页</li></ol><h2 id="查看帮助"><a href="#查看帮助" class="headerlink" title="查看帮助"></a>查看帮助</h2><ol><li>–help</li><li>man page（使用vim的操作模式）</li><li>info page（linux独有，使用节点的操作模式）</li><li>查看<code>/usr/share/doc</code></li></ol><h3 id="关于info-page"><a href="#关于info-page" class="headerlink" title="关于info page"></a>关于info page</h3><ol><li>使用tab和上下移动</li><li>enter进入菜单，u键返回</li><li>n和p在子菜单之间移动</li><li>b和e跳到子菜单的第一个node和最后的node</li></ol><h2 id="最简单的文本编辑器"><a href="#最简单的文本编辑器" class="headerlink" title="最简单的文本编辑器"></a>最简单的文本编辑器</h2><p>nano，反正我是不会用的</p><h2 id="关机"><a href="#关机" class="headerlink" title="关机"></a>关机</h2><h3 id="sync"><a href="#sync" class="headerlink" title="sync"></a>sync</h3><p>手动同步到硬盘</p><h3 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h3><p>冷知识：<code>/sbin/shutdown</code></p><p>常用参数：</p><pre><code class="highlight bash">-k <span class="comment"># 不是真关机，只是通知其他用户</span>-r <span class="comment"># 重启</span>-h <span class="comment"># 立即关机</span>-c <span class="comment"># 取消关机</span>[<span class="keyword">time</span>] <span class="comment"># 设定时间，默认一分钟，举例：+10或10（10分钟），20:25（定时），now（现在）</span></code></pre><h3 id="reboot-halt-poweroff"><a href="#reboot-halt-poweroff" class="headerlink" title="reboot&#x2F;halt&#x2F;poweroff"></a>reboot&#x2F;halt&#x2F;poweroff</h3><p>都是关机或重启</p><p>冷知识：<code>init 0</code>关机，<code>init 6</code>重启</p><p>区别</p><pre><code class="highlight bash">reboot <span class="comment"># 重启</span>halt <span class="comment"># 系统停止，但屏幕上会有系统停止的输出</span>poweroff <span class="comment"># 系统关机，没电自然屏幕为空</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Operation </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 专栏：重学linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROS学习笔记（0）</title>
      <link href="/Auto/5e6b7330/"/>
      <url>/Auto/5e6b7330/</url>
      
        <content type="html"><![CDATA[<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p>要开始学机器人咯，从ros开始的那种。有人说不要通过ros来学机器人，没有关系撒。先看看机器人咋样再说。</p><p>官网：<a href="https://www.ros.org/">https://www.ros.org/</a></p><p>文档：<a href="http://wiki.ros.org/">http://wiki.ros.org/</a></p><p>教程：<a href="http://wiki.ros.org/ROS/Tutorials">http://wiki.ros.org/ROS/Tutorials</a></p><h1 id="装环境"><a href="#装环境" class="headerlink" title="装环境"></a>装环境</h1><p>看官方教程，据李总说有很多坑，不过目前看来感觉还好（虽然确实踩了一脚）。</p><p>首先是选发行版吧，ros其实就是一堆工具包，底层还是要依赖别的Operation System的。我选择的方案是先上虚拟机，用apollo那台ubuntu18.04来配。这里李总给的建议是用<code>ROS Melodic Morenia</code>，就是melodic这个版本，它确实也说了这句</p><blockquote><p>ROS Melodic Morenia is primarily targeted at the Ubuntu 18.04 (Bionic) release, though other Linux systems as well as Mac OS X, Android, and Windows are supported to varying degrees.</p></blockquote><p>整挺好，专门适配18.04，那就不客气了。上链接<a href="http://wiki.ros.org/melodic/Installation/Ubuntu">http://wiki.ros.org/melodic/Installation/Ubuntu</a></p><p>这玩意一上来就坑人，他让我用他的源，结果公钥匹配过不了。还好有经验，点了那个mirror发现有清华源。把整个ubuntu的源换成清华源并按照清华源官方的文档加入<code>source.list</code>之后就可以直接<code>apt install</code>了。第一次装毫无疑问是无脑<code>full installation</code>。</p><p>然后按照它说的environment setup把脚本加入<code>./.bashrc</code>里（完全不知道这步在干什么呢，晚点回来看一眼）</p><p>后面的<code>Dependencies for building packages</code>又来坑人了。他给的</p><pre><code class="highlight bash"><span class="built_in">sudo</span> apt install python-rosdep python-rosinstall python-rosinstall-generator python-wstool build-essential</code></pre><p>确实是能跑的，但下一步</p><pre><code class="highlight bash"><span class="built_in">sudo</span> rosdep initrosdep update</code></pre><p>就出问题了，<code>sudo rosdep init</code>会说ubuntu版本不对。查了下发现另一篇文章里是这么写的</p><pre><code class="highlight bash"><span class="built_in">sudo</span> apt install python3-rosdep</code></pre><p>好家伙有python3为啥不用3，然后直接这么输会发现无法安装，因为<code>python3-rosdep</code>要依赖<code>python3-rosinstall</code>，也就是说我装了python2的都得换成python3，彳亍。我还得把上面的包全给删了，然后重新输</p><pre><code class="highlight bash"><span class="built_in">sudo</span> apt install python3-rosdep python3-rosinstall python3-rosinstall-generator python3-wstool</code></pre><p>然后就回到上面<code>init</code>那一步了，这步据说会出网络问题，随便贴个网上的解决方案吧：<a href="https://blog.csdn.net/qq_41484927/article/details/107494715">https://blog.csdn.net/qq_41484927/article/details/107494715</a>，网上一搜一大把。我选择直接挂梯子（</p><p>这里需要注意的一点是<code>sudo rosdep init</code>，是要加<code>sudo</code>的，而<code>rosdep update</code>是万万不能加的，虽然不知道会怎么样，但毕竟官方文档说了这事：</p><blockquote><p>Do <strong>NOT</strong> run <code>rosdep update</code> with sudo. It is not required and will result in permission errors later on.</p></blockquote><p>这玩意前面还有个大感叹号呢，注意点。</p><p>先到这里，收拾东西准备回家去了。</p>]]></content>
      
      
      <categories>
          
          <category> Auto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> ros </tag>
            
            <tag> 专栏：ros学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从2021到2022</title>
      <link href="/Daily/b792517a/"/>
      <url>/Daily/b792517a/</url>
      
        <content type="html"><![CDATA[<p>哇，写了东西的，没保存，不想写了，算了，装作这里有东西吧。</p>]]></content>
      
      
      <categories>
          
          <category> Daily </category>
          
      </categories>
      
      
        <tags>
            
            <tag> daily </tag>
            
            <tag> summary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一次docker迁移</title>
      <link href="/Operation/Tips/1ee5701f/"/>
      <url>/Operation/Tips/1ee5701f/</url>
      
        <content type="html"><![CDATA[<p>最近碰上一次小小的迁移任务，需要在新机器上起docker，并让原来的docker容器在新机器上跑起来。</p><p>这里就涉及到，要查看已经跑起来的容器在启动时输入了哪些参数。实际操作起来有以下几个方法：</p><h2 id="docker-ps-a-–no-trunc"><a href="#docker-ps-a-–no-trunc" class="headerlink" title="docker ps -a –no-trunc"></a>docker ps -a –no-trunc</h2><p>一个简单的方法，但只能看到部分信息</p><h2 id="docker-inspect-“container”"><a href="#docker-inspect-“container”" class="headerlink" title="docker inspect “container”"></a>docker inspect “container”</h2><p>可以看到许多详细的信息，但过于详细了，不容易提取出关键信息</p><h2 id="runlike"><a href="#runlike" class="headerlink" title="runlike"></a>runlike</h2><pre><code class="highlight bash">pip install runlike</code></pre><p>一个小工具，只需<code>runlike &quot;container id&quot;</code>即可获取其启动时的参数</p><p>唯一需要注意的是，runlike不会复原是否会以交互或后台方式启动的参数，所以应该按需要加入<code>-itd</code>选项</p>]]></content>
      
      
      <categories>
          
          <category> Operation </category>
          
          <category> Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> mirror </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一次ssh登录的问题</title>
      <link href="/Operation/Linux/1b1593da/"/>
      <url>/Operation/Linux/1b1593da/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>本想使用rsa公钥的ssh免密登录，发现无论如何都要我输密码。</p><h2 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h2><p>首先是常规思路查看文件权限</p><pre><code class="highlight bash"><span class="comment"># ~/.ssh/authorized_keys</span>-rw-------. 1 root root 1307 Jan 12 12:59 authorized_keys <span class="comment"># 600</span><span class="comment"># ~/.ssh</span>-rw-------. 1 root root 1307 Jan 12 12:59 authorized_keys <span class="comment"># 600</span><span class="comment"># ~</span>drwx------.   6 root   root    147 Jan 12 13:29 root <span class="comment"># 700</span></code></pre><p>接下来查看ssh-server的配置文件<code>/etc/ssh/sshd_config</code>，主要查看以下几项</p><pre><code class="highlight bash">RSAAuthentication <span class="built_in">yes</span>PubkeyAuthentication <span class="built_in">yes</span>PermitRootLogin <span class="built_in">yes</span></code></pre><p>接下来查看登录日志<code>/var/log/secure</code>，注意该文件后面会跟上日期，找最近的即可。</p><p>再然后使用本地ssh加上参数vvv尝试登录，查看输出的debug信息，找到如下信息</p><pre><code class="highlight bash">debug3: send packet: <span class="built_in">type</span> 50debug2: we sent a publickey packet, <span class="built_in">wait</span> <span class="keyword">for</span> replydebug3: receive packet: <span class="built_in">type</span> 51</code></pre><p>该信息说明密钥发送成功，但不匹配。重新复制密钥后仍然无法免密。</p><p>这时候顾神上线了发现，我的<code>/root</code>目录权限是这样的：</p><pre><code class="highlight bash">drwx------.   6 root   1006    147 Jan 12 13:29 root</code></pre><p>不知道为什么root的权限变成了1006。把1006改回root后可正常使用。</p><h2 id="结论和启示"><a href="#结论和启示" class="headerlink" title="结论和启示"></a>结论和启示</h2><p>无法免密登录是由于目录权限不够导致的，但这次权限问题出在<code>group of the owner</code>上面。因此，以后看权限不能只盯着777看，也要注意<code>owner</code>和<code>group</code>。</p>]]></content>
      
      
      <categories>
          
          <category> Operation </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021-2022寒假apollo2d划</title>
      <link href="/Auto/7b72ee84/"/>
      <url>/Auto/7b72ee84/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>加入apollo已经一个学期了，相比于勤奋的3d组，2d这边感觉推进的确实很慢。一方面确实新队员的基础确实有差距，另一方面也确实没怎么催。但毕竟robocup是个很不错的比赛，还是要好好抽时间看一看，学习学习。</p><p>目前已知要用到的一些必要知识有：</p><ul><li>cpp<ul><li>基础语法</li><li>面对对象编程</li><li>多文件（主要使用原生的makefile，可能会考虑CMake和xmake）</li><li>少量设计模式</li></ul></li><li>linux<ul><li>shell</li><li>虚拟机</li></ul></li><li>足球的基本规则和战术</li></ul><p>以及一些可选但最好还是学一学的知识：</p><ul><li>markdown</li><li>git</li><li>python</li></ul><p>以及很有用但是不会用的东西：</p><ul><li>马尔科夫链</li><li>遗传算法</li></ul><h1 id="寒假指南"><a href="#寒假指南" class="headerlink" title="寒假指南"></a>寒假指南</h1><p>这个寒假预计在三个方面做推进：</p><ol><li><p>让cpp基础不好的同学从<code>bhv*</code>文件看起，基础稍好的同学看完后看看决策树。</p></li><li><p>让会python的同学看看已有的优化工具。</p></li><li><p>让搞linux的同学研究研究代码的可移植性。</p></li></ol><p>本假期的目的有三：</p><ol><li>选拔出能看懂cpp代码的正式队员</li><li>搞清楚具体要优化的方向</li><li>完善文档</li></ol><h1 id="已知情况"><a href="#已知情况" class="headerlink" title="已知情况"></a>已知情况</h1><p>预计春天就会开始国赛，时间不等人。不过对国赛也没有什么特别大的期望，毕竟现在开始其实很晚了，至于世界赛肯定会更难啦。</p><h2 id="一些通用技能"><a href="#一些通用技能" class="headerlink" title="一些通用技能"></a>一些通用技能</h2><p>我这里应该贴一份<a href="https://missing-semester-cn.github.io/">计算机教育中缺失的一课</a>，看完这门课，至少也要了解以下这里的工具，后面的路会轻松许多。</p><h2 id="关于Cpp"><a href="#关于Cpp" class="headerlink" title="关于Cpp"></a>关于Cpp</h2><p>已知我们使用的是来自日本的<code>helios base</code>，世界霸主的底层，相应的底层还有中科大的<code>wrighteable</code>和其他的自研底层。底层方面<code>helios</code>已经提供了相当丰富的选项，基于它的<code>agent2d</code>也是一份刚好能用的初始球队。所以对于还不熟悉cpp的同学来说，这份底层以及<code>agent2d</code>将会是最好的学习项目。</p><p>根据传统（？），<code>agent2d</code>最好从<code>bhv</code>文件看起，每个<code>bhv</code>文件封装了某种动作链，我们通过定义、修改和调用这些动作链，来让球员执行某些行为。这些文件往往封装的不错，所以可以从这里看起。</p><p>相对应的，从<code>main</code>函数开始，去看决策树也是一种思路，这样可以了解球员的大体执行流程。</p><p>在阅读相关代码时，趁手的工具相当重要。如果你只是单纯的看看代码，那么你可以选择在windows系统下任何一件趁手的工具来做这件事，我个人推荐的有：</p><ul><li>vscode</li><li>vs</li></ul><blockquote><p>注意，这样做的话，可能会找不到某些依赖，因为agent2d是被设计为在ubuntu操作系统上运行的（虽然理论上win也可以跑，但是环境可能会比较难搞定）</p></blockquote><p>但如果你想要让球队跑起来，那还是选择在ubuntu下跑起来比较好。关于操作系统，ubuntu可以选择虚拟机安装或双系统安装，这里推荐虚拟机。而在ubuntu下推荐的工具有：</p><ul><li>vscode</li><li>kdevelop（来自apollo2d组组长的推荐）</li><li>Clion（来自电子部副部长的推荐）</li></ul><p>我们推荐使用这些现代化的IDE或编辑器以优化读者的源码阅读体验。对于你感兴趣的流程，使用<code>goto</code>功能去往任何函数或变量的调用，声明，实现的位置。（这段怎么听起来这么像英文翻译过来的）</p><h2 id="关于Python"><a href="#关于Python" class="headerlink" title="关于Python"></a>关于Python</h2><p>我们已经搜集到了一部分基于python实现的球队优化工具，但我们对于它们如何运行以及有何效果完全没有概念，因此我希望能有人来告诉我们这些工具做了什么。</p><h2 id="关于linux"><a href="#关于linux" class="headerlink" title="关于linux"></a>关于linux</h2><p>这项工作是留给我自己的，我希望这份代码所需要的编译环境等可以“相当不错”的运行下去。因此需要对其编译过程，以及依赖的包有更深入的了解。同时需要配合做python的同学完成优化工具的开发。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这个假期应该会相当的漫长，希望在这个假期结束后，2d能真正“上道”。</p>]]></content>
      
      
      <categories>
          
          <category> Auto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> apollo </tag>
            
            <tag> robucup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于虚拟机的开发机搭建</title>
      <link href="/Operation/DevOps/f7220f82/"/>
      <url>/Operation/DevOps/f7220f82/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近想装上boost库，写写cpp。捣鼓了半天之后boost才勉强能用。期间不仅要解决安装方式问题，还由vscode的提示、配置等等一大堆问题。这时我又又又又又产生了把win换成linux的冲动。</p><p>但毕竟不是第一次上linux了，win和linux的好坏我多多少少还是清楚的。</p><p>windows的优点</p><ul><li>键鼠协同操作舒服，支持轻微的自定义</li><li>便于查资料，敲代码，有大量现成的工具。</li><li>稳定且高效，笔记本对win还是做了优化的。</li></ul><p>但也有一些我不太能忍受的缺点</p><ul><li>装环境麻烦，安装位置灵活多变，且安装后不便于删除</li><li>自定义程度差，win不支持过于深入的自定义，比如我想搞个全局快捷键都不行，除非我想使用第三方工具，比如<code>quicker</code>，而这又回归了第一点。</li><li>路径中反人类的反斜杠</li></ul><p>反过来，我想用linux正是因为win的这些缺点</p><ul><li>装环境往往只要一行</li><li>高度自定义</li><li>更加熟悉的文件系统和配套的脚本</li></ul><p>而阻止我用linux的也正好是win的优点</p><ul><li>linux的gui大多都不太好使，甚至gui的自定义程度不如win</li><li>中文输入法缺少较好的支持</li><li>由上面这两点，linux查资料也不方便</li><li>笔记本没有专门的优化，稳定性欠佳</li><li>ide不稳定，缺少一些通用工具</li></ul><p>而在win上的wsl现在还远远不够健全，更何况我想偶尔开个linux的gui踢踢robocup。</p><p>这时我想到了远程开发机。先是考虑了云服务器，云服务器没有gui。又想到了台式机，台式机不能保证24小时开机，而且做内网穿透之后速度会跟不上。这时我又想到，为啥不直接开虚拟机。于是乎我又又又开了台虚拟机，并搭建起了开发环境。</p><h2 id="初步设置"><a href="#初步设置" class="headerlink" title="初步设置"></a>初步设置</h2><p><del>因为<code>virtualbox</code>始终是免费的，所以我还是坚持用它而不是<code>vmware</code>。</del></p><p>当我更新这篇文章时，我还是用上了<code>vmware</code>，这玩意在性能和稳定性上都比<code>virtualbox</code>好使。</p><p><del>&#x2F;&#x2F;todo:（因为时间问题，这个坑后面再填）</del></p><p>总之先选好虚拟机安装</p><p>在操作系统上，我还是选择了<code>ubuntu</code>，因为<code>apt</code>确实也用起来舒服，很多需要的环境用apt要好搞定很多。</p><h2 id="连接虚拟机"><a href="#连接虚拟机" class="headerlink" title="连接虚拟机"></a>连接虚拟机</h2><p>连上虚拟机需要注意三件事</p><ul><li>虚拟机网络要设置好，保证有一个可用的ipv4地址</li><li>虚拟机上要装好ssh服务器（openssh-server）</li><li>连接时输入的用户名和ip地址要输对</li></ul><h3 id="虚拟机网络"><a href="#虚拟机网络" class="headerlink" title="虚拟机网络"></a>虚拟机网络</h3><p>在vmware的NAT</p>]]></content>
      
      
      <categories>
          
          <category> Operation </category>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>起一个mongodb</title>
      <link href="/Operation/Tips/e9565578/"/>
      <url>/Operation/Tips/e9565578/</url>
      
        <content type="html"><![CDATA[<p>第一件事：<code>mongodb</code> , 不是</p><ul><li>mongdb</li><li>mogodb</li><li>……</li></ul><p>为了给RssSubcriber起一个数据库，在阿里云上搭了一个，本来想着直接用阿里云的市场镜像的，拿下来之后发现根本不知道咋用。。。还不如自己起一个。</p><p>官方文档中给了使用包管理工具按照的方法：<a href="https://mongodb.net.cn/manual/tutorial/install-mongodb-on-red-hat/">https://mongodb.net.cn/manual/tutorial/install-mongodb-on-red-hat/</a></p><p>大概步骤就是添加仓库然后直接安装完事。</p><p>然后是要改一下配置文件，mongodb的配置文件位于<code>/etc/mongo.conf</code>，主要是将其中的</p><pre><code class="highlight plaintext">net:   bindIp: 127.0.0.1   port: 27017</code></pre><p>这里的<code>bindIp</code>表示监听的地址，这里只监听了本地，我将其该外<code>0.0.0.0</code>即可保证外网随时访问。</p><p>然后下面的<code>port</code>也要记得加入阿里云的安全组。</p>]]></content>
      
      
      <categories>
          
          <category> Operation </category>
          
          <category> Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自制Rss阅读器</title>
      <link href="/Project/9bf3fade/"/>
      <url>/Project/9bf3fade/</url>
      
        <content type="html"><![CDATA[<p>尝试自制了一个rss阅读器，现在还在开发中。</p><p><em>2022&#x2F;2&#x2F;7更新：暂时放弃了，互联网上还有可用的rss订阅方案</em></p><h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p><code>Rss</code>：简单信息聚合。</p><p>互联网使我们得以接触到广泛的信息，而我们往往希望自己关注的创作者（某个网站）有更新时，自己能第一个被通知。Rss便是为此而生。</p><p>Rss的概念其实很简单。它的使用过程大致如下</p><ul><li>创作者使用工具生成一个xml格式的feed。</li><li>Rss订阅工具（一般是第三方提供）获取这些feed后解析其内容并生成易于阅读的内容，随后通知订阅者内容已经更新。</li><li>订阅者得到阅读器提供的清单选择自己感兴趣的内容阅读。</li></ul><p>这个过程看起来简单，但这中间又有以下几个问题：</p><ul><li>创作者不一定会提供feed。</li><li>Rss订阅工具一般由第三方的企业实现，它们会像爬虫一样（或者说就是爬虫）定时获取网站的feed。而使用服务器是有成本的。</li><li>对订阅者的要求，订阅者需要将自己希望阅读的内容加入到订阅工具中。而获取feed对于很多订阅者来说是个难题。当然，浏览器插件一定程度上能解决一部分这个问题。</li><li>阅读器的颜值，可能是因为rss凉了很久了，现在遗留下来的阅读器的ui都是一言难尽。</li><li>阅读器的跨平台，移动设备近几年才普及开来，而rss在此之前就凉了。因此很少有好的rss跨平台解决方案。</li></ul><p>综上，我希望能有一款产品能完美完成我的Rss订阅问题。为何我要如此执着于Rss呢？</p><ul><li>Rss意味着我可以自己选择要看什么，不看什么，而不是被现代的推荐机制牵着鼻子走。</li><li>Rss意味着我可以第一时间得到更新，而不是等到有人推送，或是选择性的推送，抑或是干脆得不到通知。</li><li>好的Rss阅读工具意味着我可以舒服的阅读我想要阅读的内容，甚至可以让内容经过进一步处理后再阅读</li><li>好的Rss阅读工具意味着我可以随时随地收到更新，并且在任意设备上进行阅读。</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>接下来讨论下具体的实现。</p><h3 id="订阅源"><a href="#订阅源" class="headerlink" title="订阅源"></a>订阅源</h3><p>关于订阅源，<a href="https://docs.rsshub.app/">RssHub</a>项目提供了不少有趣的订阅源。</p><p>然后是对于一些不直接提供feed的网站，例如我想订阅B站某位up主的更新。<a href="http://irreader.fatecore.com/">irreader</a>提供了一种不错的思路。让用户手动选择自己想要订阅的区块后，通过网页规则的匹配生成一个订阅规则（像是一种非xml格式的feed）。</p><h3 id="订阅器"><a href="#订阅器" class="headerlink" title="订阅器"></a>订阅器</h3><p>这里的订阅器指定时获取feed的工具。前面提到了部署服务器软件来定时获取feed的做法，除了服务器端的软件外，在用户本地进行同步也是一种办法。</p><p>关于定时获取feed，当然原则上是越频繁越好啦，但也不能使劲的访问，搞成压力测试了。所以关于更新的频率，可以用算法优化优化。</p><p>然后就是feed的判定，订阅器应当有能力判断获取的feed中是否有更新内容，以往的内容是否失效，哪些内容应当被加入数据库，哪些应当从数据库中去除。</p><h3 id="阅读器"><a href="#阅读器" class="headerlink" title="阅读器"></a>阅读器</h3><p>说到阅读，途径就多种多样了，随手枚举一下：网页，win客户端，linux客户端，Android客户端，iPhone客户端，各种平板，微信小程序。</p><p>阅读的方式也有讲究，可以让用户打开链接（调用本地浏览器），或为用户提供一个阅读器，或是其他方式。</p><h2 id="一种方案"><a href="#一种方案" class="headerlink" title="一种方案"></a>一种方案</h2><p>尝试提出一种方案来完成上述所有内容。</p><p>向用户提供：</p><ul><li><p>各种格式的阅读器，包括网页端和微信小程序（写写前端），桌面客户端及平板客户端（qt跨平台完事），手机客户端（qt好像可以跨Android和ios）。</p></li><li><p>订阅工具，与阅读器集成，支持</p><ul><li>与RssHub接入</li><li>添加自定义feed</li><li>添加自定义非feed源</li></ul></li></ul><p>在服务端（不是服务器端）提供：</p><ul><li>feed获取工具，分为两类：<ul><li>服务器端：记录用户的订阅要求后添加至数据库，获得新feed与旧feed对比后写入数据库</li><li>本地端：支持手动或定时获取feed，以本地方式保存数据</li></ul></li><li>feed解析工具，将feed解析为：<ul><li>链接：用户可通过自己的浏览器阅读源内容</li><li>内容：获取feed中的文本后，解析为便于阅读的格式，交由阅读器供用户阅读</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>可以用来阅读源码的工具</title>
      <link href="/Tools/541ba3b7/"/>
      <url>/Tools/541ba3b7/</url>
      
        <content type="html"><![CDATA[<p>今天突然想看看nginx的源码，于是随手下了一份，发现写的挺清楚的。不过看的时候还是有不少麻烦事，比如看着看着就记不得之前看到哪了。之前看robocup2d的代码也是这个问题，这里记录了一下这几天为了看源码找的工具。</p><h2 id="Source-Insight"><a href="#Source-Insight" class="headerlink" title="Source Insight"></a>Source Insight</h2><p>这个说是老牌IDE了，据说有很多好的功能，但是因为</p><ul><li>要钱</li><li>古老的UI</li><li>看起来很复杂</li></ul><p>所以就没用它了</p><h2 id="Source-trail"><a href="#Source-trail" class="headerlink" title="Source trail"></a>Source trail</h2><p>就是因为它我才知道原来有专门看源码用的软件</p><p>这个软件提供了</p><ul><li>对于各种结构（文件，类）的图形化展示</li><li>对于各种component间相互作用的展示</li><li>支持图形化和源码相互对照的功能</li></ul><p>但是也有这些缺点</p><ul><li>程序流程不够清晰（可能这点本来就是给人看的）</li><li>对于宏的处理不够好，不能做到“把宏当变量”（也可能是我不会？）</li><li>程序必须要能完全编译才能生成图形展示。</li></ul><p>上面这些都是看robocup的代码时候的感想，这个工程直接使用了makefile。而软件可能对cmake、vs、qt的工程更友好一些。</p><h2 id="VScode"><a href="#VScode" class="headerlink" title="VScode"></a>VScode</h2><p>最后还是拿vscode看了起来，goto来goto去还是很爽的。不过为了能更爽的看代码，搜了下插件</p><h3 id="insight"><a href="#insight" class="headerlink" title="insight"></a>insight</h3><p>一个快捷搜索用的小插件，可以在左侧快速搜索勾选的word，但是只支持诸如google、stack overflow此类的网站（其实挺好的，但是我不是很方便。。。）</p><p>我考虑考虑学学typescript帮忙更新下这个插件哈。感觉不难（</p><h3 id="codetour"><a href="#codetour" class="headerlink" title="codetour"></a>codetour</h3><p>好东西了属于是。可以按顺序记录每次看的内容并生成一个.tour文件（本质上是json），这玩意可以很轻松的记录我看某个东西的流程，并且支持修改我看的内容。比如我看的时候走错了地方，我还能倒回去）。更进一步，这个工具可以用来记录决策树。</p><p>比起工具，还是更加注重代码本身吧，毕竟目的是“学习源码的精髓”而不是“学几个工具”。</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>修改2d球队的阵型</title>
      <link href="/Auto/8afd9326/"/>
      <url>/Auto/8afd9326/</url>
      
        <content type="html"><![CDATA[<p>其实是很久之前写的了，现在拿过来发布一下</p><h1 id="Formation-after-score"><a href="#Formation-after-score" class="headerlink" title="Formation after score."></a>Formation after score.</h1><h2 id="Principle"><a href="#Principle" class="headerlink" title="Principle"></a>Principle</h2><p>Formation files are saved in a separate folder with surfix .conf.<br>Its form is like below:</p><pre><code class="highlight plaintext">Formation Static# move positions when playmode is BeforeKickOff or AfterGoal.1 Goalie     -49.0   0.02 CenterBack -25.0  -7.03 CenterBack -25.0   7.04 SideBack   -25.0 -15.05 SideBack   -25.0  15.06 DefensiveHalf -20.0   0.07 OffensiveHalf -10.0 -7.08 OffensiveHalf -10.0  7.09  SideForward  -5.0 -10.010 SideForward -5.0  10.011 CenterForward -2.0   0.0</code></pre><p>This is a static one,a dynamic one is like this:</p><pre><code class="highlight plaintext">Formation DelaunayTriangulation 2Begin Roles1 Goalie 02 CenterBack -13 CenterBack 24 SideBack -15 SideBack 46 DefensiveHalf 07 OffensiveHalf -18 OffensiveHalf 79 SideForward -110 SideForward 911 CenterForward 0End RolesBegin Samples 2 45----- 0 -----Ball 0 01 -50 02 -13.63 -5.63 -13.9 5.64 -13.09 -16.135 -13.01 14.516 -11.18 -0.367 -6.58 -8.28 -7.57 8.299 -1.26 -11.9910 -1.8 12.1711 11.72 0----- 1 -----Ball -54.44 -20.731 -50 02 -47.41 -10.723 -45.24 -5.144 -50.02 -17.215 -45.6 3.886 -39.73 -9.87 -40.83 -15.778 -31.82 3.859 -40.78 -29.4710 -27.69 21.9811 -14.9 -5.27</code></pre><p>You can figure out exact coordinate through a location picture in the user-manual.</p><p>In the <code>strategy.cpp</code> ,formation files was first read like this:</p><pre><code class="highlight cpp"><span class="type">const</span> std::string Strategy::BEFORE_KICK_OFF_CONF = <span class="string">&quot;before-kick-off.conf&quot;</span>;<span class="type">const</span> std::string Strategy::NORMAL_FORMATION_CONF = <span class="string">&quot;normal-formation.conf&quot;</span>;</code></pre><p>Then,a function named <code>read()</code> will check whether formation files is available:</p><pre><code class="highlight cpp"><span class="function"><span class="type">bool</span></span><span class="function"><span class="title">Strategy::read</span><span class="params">( <span class="type">const</span> std::string &amp; formation_dir )</span></span><span class="function"></span>&#123;    <span class="type">static</span> <span class="type">bool</span> s_initialized = <span class="literal">false</span>;    <span class="keyword">if</span> ( s_initialized )    &#123;        std::cerr &lt;&lt; __FILE__ &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; __LINE__ &lt;&lt; <span class="string">&quot;: already initialized.&quot;</span>                  &lt;&lt; std::endl;        <span class="keyword">return</span> <span class="literal">false</span>;    &#125;    std::string configpath = formation_dir;    <span class="keyword">if</span> ( ! configpath.<span class="built_in">empty</span>()         &amp;&amp; configpath[ configpath.<span class="built_in">length</span>() - <span class="number">1</span> ] != <span class="string">&#x27;/&#x27;</span> )    &#123;        configpath += <span class="string">&#x27;/&#x27;</span>;    &#125;    <span class="comment">// before kick off</span>    M_before_kick_off_formation = <span class="built_in">readFormation</span>( configpath + BEFORE_KICK_OFF_CONF );    <span class="keyword">if</span> ( ! M_before_kick_off_formation )    &#123;        std::cerr &lt;&lt; <span class="string">&quot;Failed to read before_kick_off formation&quot;</span> &lt;&lt; std::endl;        <span class="keyword">return</span> <span class="literal">false</span>;    &#125;    <span class="comment">//...</span>    s_initialized = <span class="literal">true</span>;    <span class="keyword">return</span> <span class="literal">true</span>;</code></pre><p>After that,<code>getFormation()</code> will determine which formation to apply according to the worldmode.Mainly the <code>wm.gameMode().type()</code> and <code>wm.gameMode().side()</code></p><pre><code class="highlight cpp"><span class="comment">//</span><span class="comment">// opponent indirect free kick</span><span class="comment">//</span><span class="keyword">if</span> ( ( wm.<span class="built_in">gameMode</span>().<span class="built_in">type</span>() == GameMode::BackPass_       &amp;&amp; wm.<span class="built_in">gameMode</span>().<span class="built_in">side</span>() == wm.<span class="built_in">ourSide</span>() )     || ( wm.<span class="built_in">gameMode</span>().<span class="built_in">type</span>() == GameMode::IndFreeKick_          &amp;&amp; wm.<span class="built_in">gameMode</span>().<span class="built_in">side</span>() == wm.<span class="built_in">theirSide</span>() ) )&#123;    <span class="keyword">return</span> M_indirect_freekick_opp_formation;&#125;</code></pre><h2 id="Operation"><a href="#Operation" class="headerlink" title="Operation"></a>Operation</h2><ol><li>add formation file <code>celebrate-1-L.conf</code> and <code>celebrate-1-R.conf</code></li></ol><pre><code class="highlight plaintext">Formation Static# ---------------------------------------------------------# move positions when playmode is AfterGoal.1 Goalie     -50.0   0.02 CenterBack -45.0  0.03 CenterBack -40.0   0.04 SideBack   -35.0  0.05 SideBack   -30.0  0.06 DefensiveHalf -25.0   0.07 OffensiveHalf -20.0  0.08 OffensiveHalf -15.0  0.09  SideForward  -10.0  0.010 SideForward -5.0  0.011 CenterForward -1.0   0.0# ---------------------------------------------------------</code></pre><ol start="2"><li>add formation object in <code>strategy.cpp</code> and <code>strategy.h</code></li></ol><pre><code class="highlight cpp"><span class="comment">//celebrate formation</span><span class="type">static</span> <span class="type">const</span> std::string CELEBRATE_1_L_FORMATION_CONF;<span class="comment">//celebrate formation</span>rcsc::Formation::Ptr M_Celebrate_1_L_formation;</code></pre><ol start="3"><li>add logistic judge in functions</li></ol><pre><code class="highlight cpp"><span class="comment">//in read()</span>    M_Celebrate_1_L_formation = <span class="built_in">readFormation</span>( configpath + CELEBRATE_1_L_FORMATION_CONF);    <span class="keyword">if</span> ( ! M_indirect_freekick_our_formation )    &#123;        std::cerr &lt;&lt; <span class="string">&quot;Failed to read celebrate-1-L-formation&quot;</span> &lt;&lt; std::endl;        <span class="keyword">return</span> <span class="literal">false</span>;    &#125;<span class="comment">//in getFormation()</span>    <span class="keyword">if</span> (wm.<span class="built_in">gameMode</span>().<span class="built_in">type</span>() == GameMode::AfterGoal_ &amp;&amp; wm.<span class="built_in">gameMode</span>().<span class="built_in">side</span>() == wm.<span class="built_in">ourSide</span>())    &#123;        <span class="keyword">if</span> (wm.<span class="built_in">time</span>().<span class="built_in">stopped</span>() &lt;= <span class="number">20</span>)        &#123;            <span class="keyword">if</span> (wm.<span class="built_in">ourSide</span>() == LEFT)                <span class="keyword">return</span> M_Celebrate_1_L_formation;            <span class="keyword">else</span>                <span class="keyword">return</span> M_Celebrate_1_R_formation;        &#125;        <span class="keyword">if</span> (wm.<span class="built_in">time</span>().<span class="built_in">stopped</span>() &lt;= <span class="number">40</span>)        &#123;        &#125;    &#125;</code></pre><p>You can change your formation at most twice according to rules.So a empty if is left.<br>Notice: use wm.time().stopped() to make sure formation get normally in time</p>]]></content>
      
      
      <categories>
          
          <category> Auto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> apollo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>log-a-rsync-mistake</title>
      <link href="/Operation/Tips/2571fbb2/"/>
      <url>/Operation/Tips/2571fbb2/</url>
      
        <content type="html"><![CDATA[<h1 id="log-a-rsync-mistake"><a href="#log-a-rsync-mistake" class="headerlink" title="log a rsync mistake"></a>log a rsync mistake</h1><p>I want to sync some files from 2 directories <code>mirror1</code> and<code>mirror2</code>.So I run:</p><pre><code class="highlight bash"><span class="built_in">nohup</span> rsync &lt;src&gt;/mirror1 ./tmp -a --delete &amp;<span class="built_in">nohup</span> rsync &lt;src&gt;/mirror2 ./tmp -a --delete &amp;</code></pre><p>the argument <code>--delete</code> would delete all the file not exist in source directories. So only second command make effect.</p><p>Avoid abusing of <code>--delete</code> when using <code>rsync</code>. </p>]]></content>
      
      
      <categories>
          
          <category> Operation </category>
          
          <category> Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rsync </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0xCalculator 16进制计算器</title>
      <link href="/Project/9bb627a/"/>
      <url>/Project/9bb627a/</url>
      
        <content type="html"><![CDATA[<h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><ol><li>对十六进制数进行双目、表达式运算</li><li>对运算结果进行保存和再读取，支持自动保存和手动保存</li><li>自定义运算结果储存位置</li><li>自定义字体大小</li><li>可更换窗口风格（换肤）</li><li>自动保存设置</li></ol><h1 id="任务分配"><a href="#任务分配" class="headerlink" title="任务分配"></a>任务分配</h1><ol><li>：ui设计与qt框架</li><li>：核心算法</li><li>：文件读写</li></ol><h1 id="开源地址"><a href="#开源地址" class="headerlink" title="开源地址"></a>开源地址</h1><p><a href="https://github.com/kawhicurry/0xCalculator">https://github.com/kawhicurry/0xCalculator</a></p><h1 id="开发过程"><a href="#开发过程" class="headerlink" title="开发过程"></a>开发过程</h1><h2 id="Qt框架"><a href="#Qt框架" class="headerlink" title="Qt框架"></a>Qt框架</h2><p>qt文件将会以平铺的方式放置在同一工程目录下，其组织结构由<code>.pro</code>文件记录，该文件类似于makefile（可以看作是qmakefile？）。其标准目录如下：</p><blockquote><p>.pro：记录文件</p><p>&#x2F;Headers：略</p><p>&#x2F;Sources：略</p><p>&#x2F;Forms：存放<code>.ui</code>文件，实际为<code>xml</code>格式，但不建议直接编辑，所有操作应当在设计模块中完成</p><p>&#x2F;Resources：存放qt标准资源（可以qt方式引用的资源）</p><p>&#x2F;Other files</p></blockquote><h2 id="UI设计"><a href="#UI设计" class="headerlink" title="UI设计"></a>UI设计</h2><p>直接在qt creator的设计界面中打开<code>设计</code>模块。从画面左侧拖动组件，摆放至设计框中即可。</p><p><em>问题</em>：组件散乱</p><ul><li>左侧组件库中有<code>layout</code>组件,将其拖动至设计框中,再向layout中添加组件，即可使所有组件呈现一定规律。</li></ul><blockquote><p>布局类型：</p><p>垂直：略</p><p>水平：略</p><p>栅格（grid）：上面俩合起来</p><p>窗口：？存疑，不是很能理解这是啥</p></blockquote><p><em>问题</em>：使用layout组件后无法布局固定，启动ui界面后拖动窗口改变其大小，layout组件位置不动。</p><ul><li>应当首先在右侧<code>对象</code>框中选中主窗口（mainwindow）中的中间部件（centralwidget），右键选择布局，为整个中间部分设定大的布局，（注：主窗口除了中间部件还初始化了一个菜单栏（menubar）），然后在该布局中嵌套布局或组件。本方案选择了栅格布局，虽然只需垂直布局即可，但为了可拓展性，还是选择栅格。接下来在整个中间部分的栅格布局中，嵌套了一个垂直布局（用于输入和输出）和一个栅格布局（用于存放按键）。</li></ul><p>接下来在主窗口中添加所需的组件，分别为输入框、输出框、5*6个按键。然后可以对其属性进行可视化的设计，以下是对<code>设计</code>界面中一些工具的解释：</p><blockquote><p>右侧下方为属性框，显示了所选定组件的属性，每个组件都是层层继承而来，因此要注意每一层的具体属性以及继承关系。</p><p>右侧上方为对象框，显示了当前ui文件中所有文件属性。</p><p>正中央下方的框实际上有两个可编辑区域，一个为action editor，即为组件添加动作（可方便设置快捷键）。另一个为信号与槽。</p><p>注：信号与槽是最Qt制作ui界面中最重要的机制。</p></blockquote><p>创建槽函数：在信号与槽编辑框中点击加号创建信号与槽，然后选择信号的发送对象、发送信号量、槽、响应函数。此处的创建<strong>只支持内定的槽函数</strong>，想要自定义槽函数，需在右侧对象中找到对象，然后右键选择转到槽，接下来选择信号量之后，Qt会跳转该ui文件对应的cpp文件下，并自动创建一个该槽函数的实现（.h文件中也会自动添加声明）。接下来只需在此槽函数中编写发送信号后（触发信号发送条件），所需只需的步骤即可。</p><blockquote><p>信号量是Qt类自带的属性，某个类既有自己的属性，也有继承而来的属性。如pushButton组件继承自QAbstractButton，后者又继承自QWidget，后者又继承自QObject。对于QAbstractButton，其自带的信号有<code>clicked()</code>,<code>pressed()</code>等，对于QWidget，有<code>windowIconChanged</code>等。具体解释请参考官方文档。</p></blockquote><p><code>设计</code>界面支持大量的属性设置，如字体，背景等。并且可以直接在ui界面中即时显示，但并不推荐直接做修改。</p><p>一种渲染方式：Qt提供了qss来进行类似css的样式渲染，只需选中对象然后右键改变样式表，修改某个组件的样式表即可。Qss还提供了选择器的功能，因此，只需在某个较大的组件中设置样式表，并对不同的渲染对象进行选择即可。本方案一开始的办法就是在centralwidget组件中设置样式表，完成了酷炫的按键风格。需要注意的是，改变样式表的方法在Qt中是存在一定问题的，并且，<strong>任何写死的方法都可能在以后要修改时造成麻烦</strong>。关于样式表后面还会再进一步设定。</p><h2 id="模拟按键"><a href="#模拟按键" class="headerlink" title="模拟按键"></a>模拟按键</h2><p>一个计算器应当提供一系列的按键，因此要在栅格布局中拖入一定数量的按键。按键分为输入按键和功能按键。</p><ul><li>输入按键：0123456789ABCDEF+-*&#x2F;（）</li><li>功能按键：&lt;- -&gt; DEL CE UP DOWN &#x3D;</li></ul><p>对于输入按键，按下按键后应当在输入框中显示对应的输入，同时这些按键应当有对应的键盘输入。</p><p>对于输出按键，左移和右移是为了移动输入框中的光标。DEL清除一个字符，CE要同时清除输入和输出框。UP和DOWN提供了查看历史功能。等号是整个计算器的核心功能，按下等号后，应当读取输入框中的算式，进行计算后将结果字符串返回至输出框中。</p><p>通过在组件上右键选择 转到槽 可以快捷创建槽函数。示例如图：</p><pre><code class="highlight cpp"><span class="comment">//mainwindow.h</span><span class="function"><span class="type">void</span> <span class="title">MainWindow::on_pushButton_left_bracket_clicked</span><span class="params">()</span></span>;<span class="comment">//mainwindow.cpp</span><span class="function"><span class="type">void</span> <span class="title">MainWindow::on_pushButton_left_bracket_clicked</span><span class="params">()</span> </span>&#123;  ui-&gt;textBrowser_input-&gt;<span class="built_in">setFocus</span>();  ui-&gt;textBrowser_input-&gt;<span class="built_in">insertPlainText</span>(<span class="string">&quot;(&quot;</span>);&#125;</code></pre><p>手动创建几个后，就可以发现其规矩。一个槽函数的名称由<code>on_name_action</code>组成。<code>pushButton_left_bracket</code>是改按键的名称，这个名称需要在ui文件中指定，当拖动pushButton的时候，qt会按照12345依次给其一个默认名称，并且上面的默认文字都是pushButton。因此对于声明，可以用宏生成。</p><pre><code class="highlight cpp"><span class="comment">//mainwindwo.h</span><span class="meta">#<span class="keyword">define</span> clicked_func(name) void on_pushButton_##name##_clicked();</span>  <span class="built_in">clicked_func</span>(<span class="number">0</span>);  <span class="built_in">clicked_func</span>(<span class="number">1</span>);  <span class="built_in">clicked_func</span>(<span class="number">2</span>);  <span class="built_in">clicked_func</span>(<span class="number">3</span>);<span class="comment">//...</span><span class="meta">#<span class="keyword">define</span> triggered_func(name) void on_action##name##_triggered();</span>  <span class="built_in">triggered_func</span>(Author);  <span class="built_in">triggered_func</span>(Save) <span class="built_in">triggered_func</span>(Read);  <span class="built_in">triggered_func</span>(History_location);  <span class="built_in">triggered_func</span>(Auto_Save);</code></pre><p>对于实现，部分直接输入的槽函数也可以用宏生成</p><pre><code class="highlight cpp"><span class="comment">//mainwindow.cpp</span><span class="meta">#<span class="keyword">define</span> set_insert_func(name)                         \</span><span class="meta">  void MainWindow::on_pushButton_##name##_clicked() &#123; \</span><span class="meta">    ui-&gt;textBrowser_input-&gt;setFocus();                \</span><span class="meta">    ui-&gt;textBrowser_input-&gt;insertPlainText(#name);    \</span><span class="meta">  &#125;</span><span class="built_in">set_insert_func</span>(<span class="number">0</span>);<span class="built_in">set_insert_func</span>(<span class="number">1</span>);<span class="built_in">set_insert_func</span>(<span class="number">2</span>);<span class="built_in">set_insert_func</span>(<span class="number">3</span>);<span class="built_in">set_insert_func</span>(<span class="number">4</span>);</code></pre><p>剩下的就只能自己写咯。</p><h2 id="输入输出框"><a href="#输入输出框" class="headerlink" title="输入输出框"></a>输入输出框</h2><p>qt为用户提供了<code>text Browser</code>,<code>text Edit</code>,<code>Plain text edit</code>,<code>line edit</code>等组件作为文本框。这里选择了text Browser，目的是屏蔽直接复制粘贴输入，防止非法字符进入。结果后面发现<code>text Browser</code>是由<code>text Edit</code>继承而来，因此browser也可以提供输入功能（离谱，read Only属性。</p><p>所有的输入按键都将在输入框中插入一个对应的字符。这里只需要调用<code>text Browser</code>类中自带的public function member：<code>insertPlainText(QString)</code>。</p><p><em>问题</em>：文本框中的光标只有在选中文本框时才会显示，如果使用鼠标点击按键进行输入，输入框中的光标实际仍然存在但不显示。</p><ul><li>为了使得光标时刻存在，这里使用了一个简单粗暴的方法，为所有按键功能加上<code>setFocus()</code>。从而保证焦点始终在输入框中。</li></ul><p>对于输出框，每次显示结果都是更新所有内容（而不是插入），因此需要<code>setPlainText</code>。</p><h2 id="等号"><a href="#等号" class="headerlink" title="等号"></a>等号</h2><p>等号按键是计算器最核心的按键，以下为等号按键的槽函数</p><pre><code class="highlight cpp"><span class="comment">//mainwindow.cpp</span><span class="function"><span class="type">void</span> <span class="title">MainWindow::on_pushButton_equal_clicked</span><span class="params">()</span> </span>&#123;  ui-&gt;textBrowser_input-&gt;<span class="built_in">setFocus</span>();  Location::isRead = <span class="number">0</span>;  QString s = ui-&gt;textBrowser_input-&gt;<span class="built_in">toPlainText</span>();  QString rst = <span class="built_in">parser</span>(s);  ui-&gt;textBrowser_output-&gt;<span class="built_in">setPlainText</span>(rst);  <span class="keyword">if</span> (Location::autoSave) &#123;    <span class="built_in">save</span>(Location::filePath, s, rst);  &#125;&#125;</code></pre><p>按下等号后，程序首先保证焦点仍然在输入框口上，然后讲是否正在读取历史记录按键设置为0（这讲在后面的历史记录读取中说到），然后获取输入框中的内容，交给由竞赛大佬@龚程昊编写的parser函数进行处理（这将在后面数据处理中说到），然后将parser函数返回的字符串（QString）显示到输出框中，然后在自动保存功能开启的情况下，保存至本地文件中。</p><h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><p>等会儿copy大佬写的东西，大致思路是使用栈和转化为前缀表达式。</p><p>但大佬使用的使用的是std库，并且是作为一个单独的cpp程序书写的（方便调试）。因此，这里将源文件复制到parser文件中，并将main函数改写成接受<code>QString</code>作为参数，返回<code>QString</code>的parser()函数。这里用到了<code>QString::toStdString</code>和<code>QString::fromStdString</code>。</p><p>记录几个当时测试出来的bug：</p><ol><li>只写一个数后按等号，直接返回0</li><li>没有考虑负数</li><li>没有考虑溢出</li></ol><p>附上代码</p><pre><code class="highlight cpp"><span class="comment">//parser.cpp</span><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;parser.h&quot;</span></span><span class="keyword">using</span> <span class="keyword">namespace</span> std;<span class="function"><span class="type">bool</span> <span class="title">pd</span><span class="params">(<span class="type">char</span> i)</span> </span>&#123;  <span class="keyword">if</span> ((i &lt;= <span class="number">57</span> &amp;&amp; i &gt;= <span class="number">48</span>) || (i &gt;= <span class="number">65</span> &amp;&amp; i &lt;= <span class="number">70</span>)) <span class="keyword">return</span> <span class="number">0</span>;  <span class="keyword">return</span> <span class="number">1</span>;&#125;<span class="function"><span class="type">int</span> <span class="title">pri</span><span class="params">(<span class="type">char</span> i)</span>  <span class="comment">// priority</span></span><span class="function"></span>&#123;  <span class="keyword">if</span> (i == <span class="string">&#x27;+&#x27;</span> || i == <span class="string">&#x27;-&#x27;</span>) <span class="keyword">return</span> <span class="number">1</span>;  <span class="keyword">if</span> (i == <span class="string">&#x27;*&#x27;</span> || i == <span class="string">&#x27;/&#x27;</span>) <span class="keyword">return</span> <span class="number">2</span>;  <span class="keyword">if</span> (i == <span class="string">&#x27;(&#x27;</span>) <span class="keyword">return</span> <span class="number">0</span>;  <span class="keyword">if</span> (i == <span class="string">&#x27;)&#x27;</span>) <span class="keyword">return</span> <span class="number">-1</span>;  <span class="keyword">return</span> <span class="number">255</span>;&#125;<span class="function"><span class="type">bool</span> <span class="title">judge</span><span class="params">(<span class="type">char</span> i)</span>  <span class="comment">//乱码</span></span><span class="function"></span>&#123;  <span class="keyword">if</span> ((i &lt;= <span class="number">57</span> &amp;&amp; i &gt;= <span class="number">48</span>) || (i &gt;= <span class="number">65</span> &amp;&amp; i &lt;= <span class="number">70</span>) || i == <span class="string">&#x27;+&#x27;</span> || i == <span class="string">&#x27;-&#x27;</span> ||      i == <span class="string">&#x27;*&#x27;</span> || i == <span class="string">&#x27;/&#x27;</span> || i == <span class="string">&#x27;(&#x27;</span> || i == <span class="string">&#x27;)&#x27;</span>) &#123;    <span class="keyword">return</span> <span class="number">0</span>;  &#125;  <span class="keyword">return</span> <span class="number">1</span>;&#125;<span class="function">QString <span class="title">parser</span><span class="params">(QString expression)</span> </span>&#123;  <span class="keyword">using</span> <span class="keyword">namespace</span> std;  <span class="type">const</span> <span class="type">int</span> N = <span class="number">1007</span>;  <span class="type">const</span> <span class="type">long</span> R = LONG_MAX;  <span class="type">char</span> s[N], stack1[N];  <span class="type">long</span> read[N], sta[N], stack2[N], stt[N];  <span class="type">bool</span> f[N] = &#123;<span class="number">0</span>&#125;, flag[N] = &#123;<span class="number">0</span>&#125;, ff = <span class="number">0</span>, fff = <span class="number">0</span>;  string c, sc;  string str, as = expression.<span class="built_in">toStdString</span>();  str = <span class="string">&quot;0+&quot;</span> + as;  <span class="type">int</span> l = str.<span class="built_in">length</span>();  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; l; i++) &#123;    s[i] = str[i];    <span class="keyword">if</span> (<span class="built_in">judge</span>(s[i])) &#123;      ff = <span class="number">1</span>;    &#125;    <span class="keyword">if</span> (s[i] == <span class="string">&#x27;(&#x27;</span> &amp;&amp; (s[i + <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span> || s[i + <span class="number">1</span>] == <span class="string">&#x27;/&#x27;</span>)) ff = <span class="number">1</span>;    <span class="keyword">if</span> (s[i] == <span class="string">&#x27;)&#x27;</span> &amp;&amp; (s[i - <span class="number">1</span>] == <span class="string">&#x27;+&#x27;</span> || s[i - <span class="number">1</span>] == <span class="string">&#x27;-&#x27;</span> || s[i - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span> ||                        s[i - <span class="number">1</span>] == <span class="string">&#x27;/&#x27;</span>))      ff = <span class="number">1</span>;  &#125;  <span class="keyword">if</span> (<span class="built_in">pd</span>(s[l - <span class="number">1</span>]) &amp;&amp; s[l - <span class="number">1</span>] != <span class="string">&#x27;)&#x27;</span>) ff = <span class="number">1</span>;  <span class="type">int</span> st = <span class="number">0</span>;  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; l; i++)  <span class="comment">//括号是否匹配</span>  &#123;    <span class="keyword">if</span> (s[i] == <span class="string">&#x27;(&#x27;</span>) st++;    <span class="keyword">if</span> (s[i] == <span class="string">&#x27;)&#x27;</span>) st--;  &#125;  <span class="keyword">if</span> (st != <span class="number">0</span>) ff = <span class="number">1</span>;  <span class="type">int</span> j = <span class="number">0</span>, k = <span class="number">0</span>, m = <span class="number">0</span>;  <span class="keyword">while</span> (j &lt; l &amp;&amp; ff == <span class="number">0</span>) &#123;    <span class="keyword">if</span> (!<span class="built_in">pd</span>(s[j]))  <span class="comment">//数字</span>    &#123;      <span class="keyword">if</span> (s[j] &lt;= <span class="number">57</span> &amp;&amp; s[j] &gt;= <span class="number">48</span>) &#123;        sta[k] = s[j] - <span class="number">48</span>;        j++;        k++;      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[j] &gt;= <span class="number">65</span> &amp;&amp; s[j] &lt;= <span class="number">70</span>) &#123;        sta[k] = s[j] - <span class="number">55</span>;        j++;        k++;      &#125;    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">pd</span>(s[j]))  <span class="comment">//符号</span>    &#123;      <span class="keyword">if</span> (!<span class="built_in">pd</span>(s[j - <span class="number">1</span>]) &amp;&amp; j &gt; <span class="number">0</span>)  <span class="comment">//前面的数字</span>      &#123;        <span class="type">int</span> cnt = <span class="number">0</span>;        <span class="type">char</span> c = s[j];        <span class="keyword">for</span> (<span class="type">int</span> h = <span class="number">0</span>; k &gt; <span class="number">0</span>; h++) &#123;          cnt += sta[k - <span class="number">1</span>] * <span class="built_in">pow</span>(<span class="number">16</span>, h);          k--;        &#125;        read[m] = cnt;        m++;        j++;        read[m] = c;        f[m] = <span class="number">1</span>;        m++;      &#125; <span class="keyword">else</span> &#123;  <span class="comment">//前面的符号</span>        <span class="type">char</span> c = s[j];        read[m] = c;        f[m] = <span class="number">1</span>;        m++;        j++;      &#125;    &#125;  &#125;  <span class="keyword">if</span> (!<span class="built_in">pd</span>(s[l - <span class="number">1</span>]))  <span class="comment">//数字</span>  &#123;    <span class="keyword">if</span> (k &gt; <span class="number">9</span>) &#123;      <span class="keyword">return</span> <span class="string">&quot;Detect Overflow&quot;</span>;    &#125;    <span class="type">int</span> cnt = <span class="number">0</span>;    <span class="keyword">for</span> (<span class="type">int</span> h = <span class="number">0</span>; k &gt; <span class="number">0</span>; h++) &#123;      cnt += sta[k - <span class="number">1</span>] * <span class="built_in">pow</span>(<span class="number">16</span>, h);      <span class="keyword">if</span> (cnt &gt; R) <span class="keyword">return</span> <span class="string">&quot;Detect Overflow&quot;</span>;      k--;    &#125;    read[m] = cnt;    m++;    j++;  &#125;  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m - <span class="number">1</span>; i++) &#123;    <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;      <span class="keyword">if</span> (f[i] == <span class="number">1</span> &amp;&amp; f[i + <span class="number">1</span>] == <span class="number">1</span> &amp;&amp; <span class="built_in">pri</span>(read[i]) &gt;= <span class="number">1</span> &amp;&amp;          <span class="built_in">pri</span>(read[i + <span class="number">1</span>]) == <span class="number">2</span>) &#123;        ff = <span class="number">1</span>;      &#125;    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (f[i] == <span class="number">1</span> &amp;&amp; f[i + <span class="number">1</span>] == <span class="number">1</span> &amp;&amp; <span class="built_in">pri</span>(read[i]) &gt;= <span class="number">1</span> &amp;&amp;               <span class="built_in">pri</span>(read[i + <span class="number">1</span>]) &gt;= <span class="number">1</span>) &#123;      ff = <span class="number">1</span>;    &#125;  &#125;  <span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;  <span class="comment">//反缀表达式</span>  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;    <span class="keyword">if</span> (f[i] == <span class="number">0</span>) &#123;      stack2[a] = read[i];      a++;    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (f[i] == <span class="number">1</span>) &#123;      <span class="keyword">if</span> (read[i] == <span class="string">&#x27;(&#x27;</span>) &#123;        stack1[b] = <span class="string">&#x27;(&#x27;</span>;        b++;      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">pri</span>(read[i]) == <span class="number">1</span>)  <span class="comment">//+-</span>      &#123;        <span class="keyword">while</span> (<span class="built_in">pri</span>(stack1[b - <span class="number">1</span>]) &gt;= <span class="number">1</span> &amp;&amp; b &gt; <span class="number">0</span>) &#123;          stack2[a] = stack1[b - <span class="number">1</span>];          flag[a] = <span class="number">1</span>;          b--;          a++;        &#125;        stack1[b] = read[i];        b++;      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">pri</span>(read[i]) == <span class="number">2</span>)  <span class="comment">//*/</span>      &#123;        <span class="keyword">while</span> (<span class="built_in">pri</span>(stack1[b - <span class="number">1</span>]) == <span class="number">2</span> &amp;&amp; b &gt; <span class="number">0</span>) &#123;          stack2[a] = stack1[b - <span class="number">1</span>];          flag[a] = <span class="number">1</span>;          b--;          a++;        &#125;        stack1[b] = read[i];        b++;      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (read[i] == <span class="string">&#x27;)&#x27;</span>) &#123;        <span class="keyword">while</span> (stack1[b - <span class="number">1</span>] != <span class="string">&#x27;(&#x27;</span>) &#123;          stack2[a] = stack1[b - <span class="number">1</span>];          flag[a] = <span class="number">1</span>;          b--;          a++;        &#125;        b--;      &#125;    &#125;  &#125;  <span class="keyword">while</span> (b &gt; <span class="number">0</span>) &#123;    stack2[a] = stack1[b - <span class="number">1</span>];    flag[a] = <span class="number">1</span>;    a++;    b--;  &#125;  <span class="comment">// calculation</span>  <span class="type">int</span> g = <span class="number">0</span>, cn = <span class="number">0</span>;  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a; i++) &#123;    <span class="keyword">if</span> (!flag[i])  <span class="comment">//数字</span>    &#123;      stt[g] = stack2[i];      g++;    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (flag[i])  <span class="comment">//符号</span>    &#123;      <span class="keyword">switch</span> (stack2[i]) &#123;        <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:          cn = stt[g - <span class="number">2</span>] + stt[g - <span class="number">1</span>];          <span class="keyword">if</span> (cn &gt; R) ff = <span class="number">1</span>;          <span class="keyword">break</span>;        <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:          cn = stt[g - <span class="number">2</span>] - stt[g - <span class="number">1</span>];          <span class="keyword">if</span> (cn &lt; -R) ff = <span class="number">1</span>;          <span class="keyword">break</span>;        <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:          cn = stt[g - <span class="number">2</span>] * stt[g - <span class="number">1</span>];          <span class="keyword">if</span> (cn &gt; R || cn &lt; -R) ff = <span class="number">1</span>;          <span class="keyword">break</span>;        <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:          <span class="keyword">if</span> (stt[g - <span class="number">1</span>] != <span class="number">0</span>) &#123;            cn = stt[g - <span class="number">2</span>] / stt[g - <span class="number">1</span>];            <span class="keyword">break</span>;          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stt[g - <span class="number">1</span>] == <span class="number">0</span>) &#123;            ff = <span class="number">1</span>;            <span class="keyword">break</span>;          &#125;      &#125;      g -= <span class="number">2</span>;      stt[g] = cn;      g++;    &#125;  &#125;  <span class="type">int</span> x;  <span class="type">int</span> cnn = cn;  <span class="keyword">if</span> (cn == <span class="number">0</span> &amp;&amp; !ff) &#123;    <span class="comment">//        cout&lt;&lt;str&lt;&lt;&quot;=&quot;&lt;&lt;cn&lt;&lt;endl;</span>    <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;    fff = <span class="number">1</span>;  &#125;  <span class="keyword">while</span> (cn != <span class="number">0</span> &amp;&amp; !ff)  <span class="comment">//转十六进制</span>  &#123;    <span class="keyword">if</span> (cn &gt;= <span class="number">0</span>) &#123;      x = cn % <span class="number">16</span>;      <span class="keyword">if</span> (x &lt; <span class="number">10</span>)        c = x + <span class="string">&#x27;0&#x27;</span>;      <span class="keyword">else</span>        c = x + <span class="string">&#x27;A&#x27;</span> - <span class="number">10</span>;      sc = c + sc;      cn /= <span class="number">16</span>;    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cn &lt;= <span class="number">0</span>) &#123;      x = cn % <span class="number">16</span>;      <span class="keyword">if</span> (x &gt; <span class="number">-10</span>)        c = -x + <span class="string">&#x27;0&#x27;</span>;      <span class="keyword">else</span>        c = -x + <span class="string">&#x27;A&#x27;</span> - <span class="number">10</span>;      sc = c + sc;      cn /= <span class="number">16</span>;    &#125;  &#125;  <span class="keyword">if</span> (cnn &lt; <span class="number">0</span>) &#123;    sc = <span class="string">&#x27;-&#x27;</span> + sc;  &#125;  <span class="keyword">if</span> (!ff &amp;&amp; !fff) &#123;    <span class="comment">//        cout&lt;&lt;as&lt;&lt;&quot;=&quot;;</span>    <span class="comment">//        cout&lt;&lt;sc&lt;&lt;endl;</span>    <span class="keyword">if</span> (sc == <span class="string">&quot;-80000000&quot;</span>) &#123;      <span class="keyword">return</span> <span class="string">&quot;Detect Overflow&quot;</span>;    &#125;    <span class="keyword">return</span> QString::<span class="built_in">fromStdString</span>(sc);  &#125;  <span class="keyword">return</span> <span class="string">&quot;Formula Error&quot;</span>;&#125;</code></pre><p>贴代码的时候才发现大佬写了一个pd（判断）和一个judge（还是判断）。算了算了，能用就行（</p><h2 id="历史记录"><a href="#历史记录" class="headerlink" title="历史记录"></a>历史记录</h2><p>如果只是作为计算器，以上功能就已经可以算完成了。但大多数计算器都是有历史记录功能的，因此这个计算器也该有一个。</p><p>这里将历史记录分为底层和顶层两部分来设计，顶层使用Qt框架，而底层使用c的基本库，从而实现更加原子化和方便的操作。</p><p>顶层实现的用户接口功能：</p><ul><li>手动保存当前结果</li><li>选择是否自动保存结果</li><li>选择保存位置</li><li>读取历史记录</li></ul><p>底层实现的文本的读写功能</p><ul><li>获取时间</li><li>记录结果</li><li>写入和读取</li></ul><h3 id="底层设计细节"><a href="#底层设计细节" class="headerlink" title="底层设计细节"></a>底层设计细节</h3><p>保存功能被设计为，获取当前时间和本次运算的算式和结果，以新行的方式追加到某文件的结尾。保存功能的底层设计都被保存在<code>saving</code>文件下。</p><p>为此底层使用std库设计了<code>save()</code>函数。该函数还调用了<code>getCurrentTime()</code>来获取当前时间。当然，这个函数也是由<code>main()</code>函数修改而来，由std框架接入了qt框架。源码如下：</p><pre><code class="highlight cpp"><span class="comment">//saving.cpp</span><span class="function"><span class="type">static</span> string <span class="title">getCurrentTime</span><span class="params">()</span>  <span class="comment">//输出当前时间</span></span><span class="function"></span>&#123;  <span class="type">time_t</span> t = <span class="built_in">time</span>(<span class="number">0</span>);  <span class="type">char</span> ch[<span class="number">64</span>] = &#123;<span class="number">0</span>&#125;;  <span class="built_in">strftime</span>(ch, <span class="built_in">sizeof</span>(ch) - <span class="number">1</span>, <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, <span class="built_in">localtime</span>(&amp;t));  <span class="keyword">return</span> ch;&#125;<span class="function"><span class="type">bool</span> <span class="title">save</span><span class="params">(QString location, QString fomula, QString data)</span> </span>&#123;  string addr = location.<span class="built_in">toStdString</span>();  fstream f;  f.<span class="built_in">open</span>(addr, ios::out | ios::app);  f &lt;&lt; <span class="built_in">getCurrentTime</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; fomula.<span class="built_in">toStdString</span>() &lt;&lt; <span class="string">&quot;=&quot;</span>    &lt;&lt; data.<span class="built_in">toStdString</span>()    &lt;&lt; endl;  <span class="comment">//变量addr、以及gch的等式和输出结果变量还需加进去</span>  f.<span class="built_in">close</span>();  <span class="keyword">return</span> <span class="number">1</span>;&#125;</code></pre><p>除了保存结果外，还需要读取结果，读取结果需要始终从最后一行开始往上读。经历了一系列讨论之后，本项目决定使用读取整个文件来获取所有的行数，并根据行数来获取内容。为此有了<code>CountLine()</code>和<code>readLine()</code>两个函数：</p><pre><code class="highlight cpp"><span class="function"><span class="type">int</span> <span class="title">CountLines</span><span class="params">(QString filename)</span> </span>&#123;  ifstream f;  <span class="type">int</span> n = <span class="number">0</span>;  string tmp;  string stdfilename = filename.<span class="built_in">toStdString</span>();  <span class="comment">// ios::in 表示以只读的方式读取文件</span>  f.<span class="built_in">open</span>(stdfilename, ios::in);  <span class="comment">//文件打开失败:返回0</span>  <span class="keyword">if</span> (f.<span class="built_in">fail</span>()) &#123;    <span class="keyword">return</span> <span class="number">0</span>;  &#125; <span class="keyword">else</span> &#123;    <span class="comment">//文件存在</span>    <span class="keyword">while</span> (<span class="built_in">getline</span>(f, tmp, <span class="string">&#x27;\n&#x27;</span>)) &#123;      n++;    &#125;    f.<span class="built_in">close</span>();    <span class="keyword">return</span> n;  &#125;&#125;<span class="function">QString <span class="title">ReadLine</span><span class="params">(QString filename, <span class="type">int</span> line)</span>  <span class="comment">//读取指定行文件</span></span><span class="function"></span>&#123;  <span class="comment">// line行数限制 1 - lines</span>  <span class="keyword">if</span> (line &gt; <span class="number">0</span> &amp;&amp; line &lt;= <span class="built_in">CountLines</span>(filename)) &#123;    ifstream f;    string stdfilename = filename.<span class="built_in">toStdString</span>();    f.<span class="built_in">open</span>(stdfilename, ios::in);    vector&lt;string&gt; strVec;    <span class="comment">//行0 - 行lines对应strvect[0] - strvect[lines]</span>    <span class="keyword">while</span> (!f.<span class="built_in">eof</span>()) &#123;      string inbuf;      <span class="built_in">getline</span>(f, inbuf, <span class="string">&#x27;\n&#x27;</span>);      strVec.<span class="built_in">push_back</span>(inbuf);    &#125;    <span class="keyword">return</span> QString::<span class="built_in">fromStdString</span>(strVec[line - <span class="number">1</span>]);  &#125; <span class="keyword">else</span> &#123;    <span class="keyword">return</span> <span class="literal">NULL</span>;  &#125;&#125;</code></pre><p>读取整个文件并计算行数并不是一个效率高的方式，但在文件不大和不追求高效率的条件下，这是最好的实践方式。因为考虑这里还需要考虑到连续读取历史文件。</p><p>当用户按下<code>UP</code>按键时，表示用户开始读取历史文件。用户首先查看的应该是历史文件的最后一行，当用户再次按下<code>UP</code>时，读取倒数第二行，依次类推。为了实现该功能，这里使用了一个全局变量<code>line</code>表示当前正在读取的行数，该行数被初始化为历史记录的总行数。然后再次读取将会<code>--line</code>后读取。当用户按下<code>DOWN</code>按键时，++line后读取。</p><p>这里就要考虑到另一个问题，读取一定历史记录后，用户重新进行计算，然后再次查看历史记录，这样行数应当从新的历史记录最后一行开始计算。为此，这里引入了<code>isRead</code>变量，该变量初始化为<code>0</code>，表示现在未在读取。首次按下<code>UP</code>按键时，该变量置<code>1</code>，同时将<code>line</code>变量初始化为当前历史记录行数。当用户按下<code>UP</code>或<code>DOWN</code>按键时，正常修改<code>line</code>变量的值并进行读取即可。当用户按下<code>=</code>或手动保存时，需要将<code>isRead</code>置零。这样下一次按下<code>UP</code>时，将重新读取历史文件行数并为<code>line</code>赋值。</p><pre><code class="highlight cpp"><span class="comment">//mainwindow.cpp</span><span class="comment">//等号的槽函数在上面</span><span class="function"><span class="type">void</span> <span class="title">MainWindow::on_pushButton_Up_clicked</span><span class="params">()</span> </span>&#123;  ui-&gt;textBrowser_input-&gt;<span class="built_in">setFocus</span>();  <span class="keyword">if</span> (Location::isRead) &#123;    --Location::line;  &#125; <span class="keyword">else</span> &#123;    Location::line = <span class="built_in">CountLines</span>(Location::filePath);    Location::isRead = <span class="number">1</span>;  &#125;  ui-&gt;textBrowser_output-&gt;<span class="built_in">setText</span>(<span class="built_in">ReadLine</span>(Location::filePath, Location::line));&#125;<span class="function"><span class="type">void</span> <span class="title">MainWindow::on_pushButton_Down_clicked</span><span class="params">()</span> </span>&#123;  ui-&gt;textBrowser_input-&gt;<span class="built_in">setFocus</span>();  <span class="keyword">if</span> (Location::isRead) &#123;    ++Location::line;  &#125;  ui-&gt;textBrowser_output-&gt;<span class="built_in">setText</span>(<span class="built_in">ReadLine</span>(Location::filePath, Location::line));&#125;</code></pre><p>保存和读取的路径将在<code>顶层设计细节</code>中进一步讨论。</p><h3 id="顶层设计细节"><a href="#顶层设计细节" class="headerlink" title="顶层设计细节"></a>顶层设计细节</h3><p>这里在menubar中设置了一个<code>history location</code>按键，用于修改历史文件的存放位置。当按下此按键时，程序应当打开一个新的窗口，因此，需要首先在源文件中创建一个新的窗口。右键点击<code>项目</code>，选择<code>add new</code>，选择<code>qt设计师类</code>，然后会分别在三个文件夹中依次得到头文件、源文件、ui设计文件。然后需要在主窗口中设置点击<code>history location</code>按键打开新窗口。</p><pre><code class="highlight cpp"><span class="comment">//mainwindow.cpp</span><span class="function"><span class="type">void</span> <span class="title">MainWindow::on_actionHistory_location_triggered</span><span class="params">()</span> </span>&#123;  Location *new_win = <span class="keyword">new</span> <span class="built_in">Location</span>();  new_win-&gt;<span class="built_in">show</span>();&#125;</code></pre><p><strong>注意</strong>：记得在<code>mainwindow.h</code>中include<code>location.h</code>，按下打开新窗口实际上就是创建一个新的Location窗口，然后展示。</p><p>接下来就是在<code>location.ui</code>中修改和设计可视化窗口，此项目使用了栅格布局，在左侧设置了一个较大的<code>textBrowser</code>和较小的<code>lineEdit</code>（设为不可修改，用于给出提示），在右侧依次设置了<code>选择文件</code>，<code>选择文件夹</code>，<code>确定</code>，<code>取消</code> 四个按键。</p><blockquote><p>选择文件：调用Qt库，打开系统默认的文件选择框，设置必须选择.txt格式结尾的文件，将返回的结果输出至<code>textBrowser</code>。</p><p>选择文件夹：同上，但是选择的是文件夹，并且返回的是存在的文件夹的路径，将返回的结果加上<code>/result.txt</code>后输入至<code>textBrowser</code>。</p><p>确定：按下后，读取<code>textBrowser</code>中的路径，检查其合法性（因为一开始<code>textBrowser</code>设置了可以直接更改，因此可能会输入奇怪的路径），若不合法则在<code>lineEdit</code>中给出相应的报错（格式不合法或路径不合法）。若合法，则检查文件是否存在，不存在则创建。当一切都合理以后，将全局变量<code>filePath</code>设为文本框中的内容，并关闭<code>Location</code>窗口。</p><p>取消：直接关闭，不做任何修改。</p></blockquote><pre><code class="highlight cpp"><span class="comment">//location.cpp</span><span class="function"><span class="type">void</span> <span class="title">Location::on_pushButton_path_clicked</span><span class="params">()</span> </span>&#123;  QString file_name =      QFileDialog::<span class="built_in">getOpenFileName</span>(<span class="literal">NULL</span>, <span class="string">&quot;选择txt文件&quot;</span>, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;*.txt&quot;</span>);  ui-&gt;textEdit-&gt;<span class="built_in">setText</span>(file_name);&#125;<span class="function"><span class="type">void</span> <span class="title">Location::on_pushButton_dir_clicked</span><span class="params">()</span> </span>&#123;  QString dir_name = QFileDialog::<span class="built_in">getExistingDirectory</span>(<span class="literal">NULL</span>, <span class="string">&quot;选择文件夹&quot;</span>, <span class="string">&quot;.&quot;</span>);  ui-&gt;textEdit-&gt;<span class="built_in">setText</span>(dir_name + <span class="string">&quot;/result.txt&quot;</span>);&#125;<span class="function"><span class="type">void</span> <span class="title">Location::on_pushButton_cancel_clicked</span><span class="params">()</span> </span>&#123; Location::<span class="built_in">close</span>(); &#125;<span class="function"><span class="type">void</span> <span class="title">Location::on_pushButton_sure_clicked</span><span class="params">()</span> </span>&#123;  QString new_path = ui-&gt;textEdit-&gt;<span class="built_in">toPlainText</span>();  <span class="function">QFileInfo <span class="title">info</span><span class="params">(new_path)</span></span>;  <span class="keyword">if</span> (!info.<span class="built_in">exists</span>()) &#123;    <span class="keyword">if</span> (new_path.<span class="built_in">contains</span>(<span class="string">&quot;.txt&quot;</span>)) &#123;      <span class="function">QFile <span class="title">f</span><span class="params">(new_path)</span></span>;      f.<span class="built_in">open</span>(QIODevice::WriteOnly);      f.<span class="built_in">close</span>();    &#125; <span class="keyword">else</span> &#123;      ui-&gt;prompt-&gt;<span class="built_in">setText</span>(<span class="string">&quot;路径或格式不合法，请重新输入&quot;</span>);    &#125;  &#125;  Location::filePath=new_path;  Location::<span class="built_in">close</span>();&#125;</code></pre><p>自动保存功能被设计为主窗口中菜单栏中的一个按键，默认为开启状态，显示为<code>Auto Save On</code>，当点击该按键后，槽函数将该文本替换为<code>Auto Save Off</code>，并将全局变量<code>autoSave</code>置零。</p><p><code>filePath</code>和<code>autoSave</code>以及底层中的<code>isRead</code>和<code>line</code>都设计为一个全局变量，便于主窗口调用。</p><pre><code class="highlight cpp"><span class="comment">//location.h</span><span class="keyword">class</span> <span class="title class_">Location</span> : <span class="keyword">public</span> QDialog &#123; <span class="keyword">public</span>:  <span class="type">static</span> QString filePath;  <span class="type">static</span> <span class="type">int</span> line;  <span class="type">static</span> <span class="type">bool</span> isRead;  <span class="type">static</span> <span class="type">bool</span> autoSave;&#125;<span class="comment">//location.cpp</span>QString Location::filePath = <span class="string">&quot;result.txt&quot;</span>;<span class="type">int</span> Location::line = <span class="number">0</span>;<span class="type">bool</span> Location::isRead = <span class="number">0</span>;<span class="type">bool</span> Location::autoSave = <span class="number">1</span>;</code></pre><p>在主窗口中，只有用户按下等号（并且自动保存功能开启）或手动保存（在<code>menubar</code>中设置了一个保存按键并且设置了快捷键）时，才会保存。因此只需在这些地方加入<code>save()</code>函数即可。当然，也要有对<code>autoSave</code>的判断。</p><h2 id="样式设定"><a href="#样式设定" class="headerlink" title="样式设定"></a>样式设定</h2><p>前面提到了可以在<code>ui</code>文件中直接修改样式，但这种方式并不利于后面的修改，因此我们选择直接调用函数的方式。如要为<code>centralWidget</code>设定样式，可以调用<code>setStyelSheet()</code>，后接一个QString，该字符串中直接书写qss内容。</p><p>这里选择了另一种方式，使用qt的资源文件管理功能来存储单独的qss文件，然后以前缀引用的方式来调用这些文件。</p><p>在<code>项目</code>中右键新建<code>qt resource file</code>，设定名称后打开管理界面，点击添加前缀<code>add prefix</code>。然后添加文件<code>add Files</code>。前缀决定了调用的方式（将会在源代码中演示）。文件可以新建一个<code>general file</code>后添加，也可以将其他方式创建的qss文件加入。</p><p>引入的资源可以以<code>QFile</code>的方式引用。本项目在菜单栏中添加了一个黑色主题的选项，其槽函数如下</p><pre><code class="highlight cpp"><span class="function"><span class="type">void</span> <span class="title">MainWindow::on_actionBlack_theme_triggered</span><span class="params">()</span> </span>&#123;  globalQss = <span class="string">&quot;:/Black.qss&quot;</span>;  <span class="function">QFile <span class="title">defaultQss</span><span class="params">(globalQss)</span></span>;  defaultQss.<span class="built_in">open</span>(QFile::ReadOnly);  QString qssContent = defaultQss.<span class="built_in">readAll</span>();  <span class="built_in">centralWidget</span>()-&gt;<span class="built_in">setStyleSheet</span>(qssContent);&#125;</code></pre><p><code>/</code>为我设定的前缀，只需以冒号开头，加上前缀和文件，即表明在应用qt指定好的资源文件。接下来就只需打开该文件并读取其内容，然后为需要的组件设定qss样式即可。</p><p><strong>注意</strong>：使用qss的一些麻烦：后面我希望能设定字体的大小、样式等，但这时通过<code>setFont()</code>等函数并不起作用。原因估计是qss的优先级很高，直接设定将不起作用。这时我只能再写一个<code>changeStyle()</code>函数，通过qss样式表更新来进行样式更新</p><pre><code class="highlight cpp"><span class="function"><span class="type">void</span> <span class="title">MainWindow::changeStyle</span><span class="params">(QString newStyle, QWidget *widget)</span> </span>&#123;  QString oldStyle = widget-&gt;<span class="built_in">styleSheet</span>();  oldStyle += newStyle;  widget-&gt;<span class="built_in">setStyleSheet</span>(oldStyle);&#125;</code></pre><p>所以这里我只写了改变字体的函数。</p><pre><code class="highlight cpp"><span class="function"><span class="type">void</span> <span class="title">MainWindow::on_actionLarge_font_size_triggered</span><span class="params">()</span> </span>&#123;  <span class="built_in">changeStyle</span>(<span class="string">&quot;*&#123;font:30px;&#125;&quot;</span>, MainWindow::<span class="built_in">centralWidget</span>());&#125;</code></pre><h2 id="保存设置"><a href="#保存设置" class="headerlink" title="保存设置"></a>保存设置</h2><p>类似于文件的保存位置，是否自动保存等功能，每次重新启动程序后都会按照程序的设定重新初始化。为了使得这些设定能被保存下来，需要使用一个文件将这些配置保存下来。恰好最近见到了许多<code>ini</code>格式文件，qt也提供了<code>QSetting</code>及配套的<code>ini</code>配置文件读写。</p><p>配置文件应当在主窗口创建时被读取，在主窗口被销毁时被存入。因此只需在<code>mainwindow</code>的构造函数和析构函数中加入读写<code>ini</code>文件的步骤即可。需要注意的是，要考虑<code>ini</code>文件不存在的情况，不存在时需要使用程序的内置设定。</p> <pre><code class="highlight cpp">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)    : <span class="built_in">QMainWindow</span>(parent), <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow) &#123;  ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);  <span class="keyword">this</span>-&gt;<span class="built_in">grabKeyboard</span>();  QSettings *iniRead = <span class="keyword">new</span> <span class="built_in">QSettings</span>(<span class="string">&quot;config.ini&quot;</span>, QSettings::IniFormat);  QString iniAuto = iniRead-&gt;<span class="built_in">value</span>(<span class="string">&quot;autoSave&quot;</span>).<span class="built_in">toString</span>();  QString iniPath = iniRead-&gt;<span class="built_in">value</span>(<span class="string">&quot;filePath&quot;</span>).<span class="built_in">toString</span>();  QString iniQss = iniRead-&gt;<span class="built_in">value</span>(<span class="string">&quot;globalQss&quot;</span>).<span class="built_in">toString</span>();  <span class="keyword">delete</span> iniRead;  <span class="comment">// init autoSave</span>  <span class="keyword">if</span> (!iniAuto.<span class="built_in">isEmpty</span>() &amp;&amp; !iniAuto.<span class="built_in">toInt</span>()) &#123;    Location::autoSave = <span class="number">0</span>;    ui-&gt;actionAuto_Save-&gt;<span class="built_in">setText</span>(<span class="string">&quot;Auto Save Off&quot;</span>);  &#125;  <span class="comment">// init filePath</span>  <span class="function">QFile <span class="title">iniPathFile</span><span class="params">(iniPath)</span></span>;  <span class="keyword">if</span> (iniPathFile.<span class="built_in">open</span>(QFile::WriteOnly)) &#123;    Location::filePath = iniPath;  &#125;  <span class="comment">// init Qss file(theme)</span>  <span class="function">QFile <span class="title">iniQssFile</span><span class="params">(iniQss)</span></span>;  QString qssContent;  <span class="keyword">if</span> (iniQssFile.<span class="built_in">open</span>(QFile::ReadOnly)) &#123;    qssContent = iniQssFile.<span class="built_in">readAll</span>();    globalQss = iniQss;  &#125; <span class="keyword">else</span> &#123;    QFile <span class="built_in">defaultQss</span>(<span class="string">&quot;:/Black.qss&quot;</span>);    defaultQss.<span class="built_in">open</span>(QFile::ReadOnly);    qssContent = defaultQss.<span class="built_in">readAll</span>();  &#125;  <span class="built_in">centralWidget</span>()-&gt;<span class="built_in">setStyleSheet</span>(qssContent);&#125;MainWindow::~<span class="built_in">MainWindow</span>() &#123;  QSettings *IniWrite = <span class="keyword">new</span> <span class="built_in">QSettings</span>(<span class="string">&quot;config.ini&quot;</span>, QSettings::IniFormat);  IniWrite-&gt;<span class="built_in">setValue</span>(<span class="string">&quot;autoSave&quot;</span>, Location::autoSave);  IniWrite-&gt;<span class="built_in">setValue</span>(<span class="string">&quot;filePath&quot;</span>, Location::filePath);  IniWrite-&gt;<span class="built_in">setValue</span>(<span class="string">&quot;globalQss&quot;</span>, globalQss);  <span class="keyword">delete</span> IniWrite;  <span class="keyword">delete</span> ui;&#125;</code></pre><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>在主函数中为整个窗口设置了透明度，让它看起来酷炫一点点。</li><li>在主函数中为窗口设定名称。</li><li>在<code>.pro</code>文件中加入图标文件，使得生成的程序有图标</li></ul><h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li>不再害怕qt框架了，反而觉得它好用。</li><li>qt的窗口类很舒服，有清晰且层次分明的关系，有足够好用的成员函数。</li><li>qt的基本库也有不少可以讨论的，如QString的设计，不仅提供了基本的可变长度和操作符重载，还考虑到了和std库之间的转换。</li><li>qt的信号与槽机制是qt最精髓的东西之一，信号是一种非常不错的线程间通信方式，很遗憾我没有手动使用connect函数来创建信号与槽。但确实在写qt的过程中，qtcreator已经为我提供了足够的可视化信号与槽构建工具。</li><li>qss基本等于css</li><li>qt以易于制作ui界面出名，但用了之后发现，qt实际上是借鉴了很多现代浏览器（前端）的实现方式。我写的时候感觉自己像是在写js+css。对于一个web项目来说，前端工程师书写html，css，以及利用框架来写js。后端工程师则使用各种工具来构建web服务。但对于qt这样一种前后结合的一体化程序设计框架来说，前后的分离并不彻底（虽然对硬件工程师来说可能会很友好）。</li><li>我还是支持“qt是一个平台而不只是一个ui框架”这种说法。qt在基本库中的内容一点也不比它在ui界面中的少。无论是基本库还是ui库，都有很多可以研究的东西。</li><li>宏的自动扩展确实好用</li><li>qt毕竟还是封装的比较高层了，要是需要一些简单的功能，还是老老实实写原生的c和std吧。</li></ul><h2 id="遗憾"><a href="#遗憾" class="headerlink" title="遗憾"></a>遗憾</h2><ul><li>大佬说他使用了前缀表达式，求余和翻方功能不好实现，我懂的算法也不多，这两个功能没能实现。只能说算法能力有待提高了。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给Apollo的面对对象课</title>
      <link href="/Auto/49144470/"/>
      <url>/Auto/49144470/</url>
      
        <content type="html"><![CDATA[<h1 id="课前提醒（给我自己的）"><a href="#课前提醒（给我自己的）" class="headerlink" title="课前提醒（给我自己的）"></a>课前提醒（给我自己的）</h1><ol><li>打开vscode，准备源码</li><li>准备好使用g++</li></ol><h1 id="多文件编程"><a href="#多文件编程" class="headerlink" title="多文件编程"></a>多文件编程</h1><h2 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h2><p>非结构化与结构化：<code>goto</code>满天飞的后果</p><h2 id="How"><a href="#How" class="headerlink" title="How"></a>How</h2><pre><code class="highlight cpp"><span class="comment">//fun.h</span><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span>;<span class="comment">//fun.cpp</span><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;fun.h&quot;</span></span><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;std::cout&lt;&lt;<span class="string">&quot;hello&quot;</span>&lt;&lt;std::endl;<span class="comment">//?</span>&#125;<span class="comment">//main.cpp</span><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span><span class="meta">#inlcude <span class="string">&quot;fun.h&quot;</span></span><span class="keyword">using</span> <span class="keyword">namespace</span> std;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;    <span class="built_in">printf</span>(<span class="string">&quot;hi\n&quot;</span>);<span class="built_in">func</span>();<span class="keyword">return</span> <span class="number">0</span>;&#125;</code></pre><p><strong>提问</strong>：<code>iostream</code>头文件应该放在哪？</p><pre><code class="highlight cpp"><span class="comment">//fun.h</span><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></code></pre><p><strong>提问</strong>：<code>main.cpp</code> 如何找到func()的实现？</p><p>VS（IDE）的编译过程：</p><ul><li>预处理</li><li>编译，生成中间可执行文件</li><li><strong>链接</strong></li><li>生成最终可执行文件</li></ul><hr><p>演示：<a href="https://zhuanlan.zhihu.com/p/106781089">https://zhuanlan.zhihu.com/p/106781089</a></p><hr><p>更进一步：Make</p><p><strong>提问</strong>：如果把上面的<code>stdio.h</code>改成<code>iostream</code>，会怎么样</p><pre><code class="highlight cpp"><span class="comment">//fun.h</span><span class="meta">#<span class="keyword">ifndef</span> _fun</span><span class="meta">#<span class="keyword">define</span> _fun</span><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span><span class="meta">#<span class="keyword">endif</span></span></code></pre><h1 id="面对对象"><a href="#面对对象" class="headerlink" title="面对对象"></a>面对对象</h1><p><strong>提问</strong>：计算机是用来干啥的？为何计算机今天能为我们带来如此多好处？一个词语，两个汉字。</p><ol><li>面向过程：我让机器干啥就干啥</li><li>面向对象：以对象为中心，把问题分解成对象</li></ol><p><em>举例</em>：卖书</p><h2 id="C的对象"><a href="#C的对象" class="headerlink" title="C的对象"></a>C的对象</h2><pre><code class="highlight c"><span class="class"><span class="keyword">struct</span> <span class="title">book</span>&#123;</span>    <span class="type">char</span> name[<span class="number">10</span>];    <span class="type">char</span> ISBN[<span class="number">20</span>];    <span class="type">double</span> price;&#125;<span class="type">double</span> <span class="title function_">getPrice</span><span class="params">(<span class="keyword">struct</span> book* theBook)</span>&#123;    <span class="keyword">return</span> theBook-&gt;price;&#125;<span class="type">void</span> <span class="title function_">showPrice</span><span class="params">(<span class="keyword">struct</span> book* theBook)</span>&#123;    <span class="built_in">printf</span>(<span class="string">&quot;%lf&quot;</span>,theBook-&gt;price);&#125;</code></pre><p><strong>提问</strong>：考虑一另一把剑🗡</p><pre><code class="highlight c"><span class="class"><span class="keyword">struct</span> <span class="title">sword</span>&#123;</span>    <span class="type">char</span> name[<span class="number">10</span>];    <span class="type">double</span> price;&#125;<span class="type">double</span> <span class="title function_">getPrice</span><span class="params">(<span class="keyword">struct</span> sword* theSword)</span>&#123;    <span class="keyword">return</span> theSword-&gt;price;&#125;<span class="type">void</span> <span class="title function_">showPrice</span><span class="params">(<span class="keyword">struct</span> book* theSword)</span>&#123;    <span class="built_in">printf</span>(<span class="string">&quot;%lf&quot;</span>,theSword-&gt;price);&#125;</code></pre><p>C不允许同名函数，即使允许，你也不知道show了谁的price。如何解决这个问题？（其实可以同名，在后面的重载会讲到）</p><p>把函数写在struct里面，让函数成为struct的“专属函数”。C不许我们这么做，但是C++可以</p><pre><code class="highlight cpp"><span class="keyword">struct</span> <span class="title class_">Book</span>&#123;    <span class="type">char</span> name[<span class="number">10</span>];    <span class="type">char</span> ISBN[<span class="number">20</span>];    <span class="type">double</span> price;        <span class="function"><span class="type">double</span> <span class="title">getPrice</span><span class="params">()</span></span>&#123;    <span class="keyword">return</span> price;&#125;<span class="function"><span class="type">void</span> <span class="title">showPrice</span><span class="params">()</span></span>&#123;    <span class="built_in">printf</span>(<span class="string">&quot;%lf&quot;</span>,price);&#125;    <span class="comment">//...</span>&#125;;<span class="keyword">struct</span> <span class="title class_">Book</span> theBook=<span class="comment">/*...*/</span>;theBook.<span class="built_in">showPrice</span>();</code></pre><p><strong>提问</strong>：考虑price的合理性，如何正确的为price赋值？（price&gt;0)</p><pre><code class="highlight cpp"><span class="comment">//考虑这种用法</span>theBook.price=<span class="number">100</span>;<span class="function"><span class="type">int</span> <span class="title">setPrice</span><span class="params">(<span class="type">double</span> value)</span></span>&#123;    <span class="keyword">if</span>(value&lt;<span class="number">0</span>)&#123;        <span class="keyword">return</span> <span class="number">-1</span>;    &#125;<span class="keyword">else</span>&#123;        price=value;        <span class="keyword">return</span> <span class="number">0</span>;    &#125;&#125;<span class="comment">//还是没有解决问题，依然可以</span>theBook.price=<span class="number">100</span>;</code></pre><p>封装的必要性</p><pre><code class="highlight cpp"><span class="keyword">class</span> <span class="title class_">Book</span>&#123;<span class="keyword">private</span>:    <span class="type">char</span> name[<span class="number">10</span>];    <span class="type">char</span> ISBN[<span class="number">20</span>];    <span class="type">double</span> price;<span class="keyword">public</span>:<span class="function"><span class="type">int</span> <span class="title">setPrice</span><span class="params">(<span class="type">double</span> value)</span></span>&#123;    <span class="keyword">if</span>(value&lt;<span class="number">0</span>)&#123;        <span class="keyword">return</span> <span class="number">-1</span>;    &#125;<span class="keyword">else</span>&#123;        price=value;    &#125;&#125;    <span class="function"><span class="type">double</span> <span class="title">getPrice</span><span class="params">()</span></span>&#123;    <span class="keyword">return</span> price;&#125;<span class="function"><span class="type">void</span> <span class="title">showPrice</span><span class="params">()</span></span>&#123;    <span class="built_in">printf</span>(<span class="string">&quot;%lf&quot;</span>,price);&#125;    <span class="comment">//...</span>&#125;;<span class="comment">//无法直接修改price，必须通过公共成员函数</span></code></pre><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>C中的<code>struct</code>如何创建对象？</p><pre><code class="highlight c"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span><span class="type">int</span> num;&#125;Book;Book b;</code></pre><p>考虑 <code>int a=1</code>，我们能不能<code>Book b</code>？</p><p>我们可以如何创建一个对象？我们需要Constructor，构造函数。</p><pre><code class="highlight cpp"><span class="keyword">class</span> <span class="title class_">Book</span>&#123;<span class="keyword">public</span>:    <span class="built_in">Book</span>()&#123;&#125;    <span class="comment">//Book(double the_price):price(the_price)&#123;&#125;</span>    <span class="built_in">Book</span>(<span class="type">double</span> the_price)&#123;<span class="built_in">setPrice</span>(the_price);&#125;    <span class="built_in">Book</span>(<span class="type">double</span> the_price,<span class="type">char</span>* the_name)&#123;        <span class="built_in">Book</span>(the_price,the_name,<span class="string">&quot;0000&quot;</span>);    &#125;    <span class="built_in">Book</span>(<span class="type">double</span> the_price=<span class="number">10.0</span>,<span class="type">char</span>* the_name=<span class="string">&quot;none&quot;</span>,<span class="type">char</span>* ISBN)&#123;        <span class="built_in">setPrice</span>(the_price);        <span class="built_in">memcpy</span>(name,the_name,<span class="number">10</span>);        <span class="built_in">memcpy</span>(ISBN,the_ISBN,<span class="number">20</span>);    &#125;    <span class="keyword">private</span>:    <span class="type">double</span> price;    <span class="type">char</span> name[<span class="number">10</span>];    <span class="type">char</span> ISBN[<span class="number">20</span>];    <span class="comment">//...</span>&#125;;Book b0;<span class="function">Book <span class="title">b1</span><span class="params">(<span class="number">10</span>)</span></span>;<span class="function">Book <span class="title">b2</span><span class="params">(<span class="number">10</span>,<span class="string">&quot;Apollo&quot;</span>)</span></span>;</code></pre><p>参考：</p><ol><li>拷贝构造</li><li>移动构造</li><li>合成构造</li></ol><h2 id="继承与多态"><a href="#继承与多态" class="headerlink" title="继承与多态"></a>继承与多态</h2><p><strong>提问</strong>：我希望有一个科幻书，科幻书有一个别人没有的成员：科幻程度(depth)。同时有一种传记，有一个独有的值来记录传记主人公的名字(person)。</p><pre><code class="highlight cpp"><span class="keyword">class</span> <span class="title class_">Book</span>&#123;<span class="keyword">public</span>:    <span class="comment">//...</span><span class="keyword">private</span>:    <span class="type">double</span> price;    <span class="type">char</span> name[<span class="number">10</span>];    <span class="type">char</span> ISBN[<span class="number">20</span>];    <span class="type">int</span> depth;    <span class="type">char</span>* person;    <span class="comment">//...</span>        <span class="comment">//...</span>&#125;;</code></pre><p>有公共属性，也有独有的属性(attribute)</p><pre><code class="highlight cpp"><span class="keyword">class</span> <span class="title class_">Fiction</span>:<span class="keyword">public</span> Book&#123;<span class="keyword">public</span>:    <span class="built_in">Fiction</span>();        <span class="function"><span class="type">int</span> <span class="title">setPrice</span><span class="params">(<span class="type">double</span> value)</span></span>&#123;    <span class="keyword">if</span>(value&lt;<span class="number">10</span>)&#123;        <span class="keyword">return</span> <span class="number">-1</span>;    &#125;<span class="keyword">else</span>&#123;        price=value;    &#125;&#125;<span class="keyword">private</span>:    <span class="comment">//不用写，都继承过来了</span>    <span class="comment">//...</span>&#125;;<span class="keyword">class</span> <span class="title class_">biography</span>:<span class="keyword">public</span> Book&#123;  <span class="comment">//现场要求写一个  </span>&#125;;</code></pre><p>继承的方式有三种：</p><blockquote><p>当一个类派生自基类，该基类可以被继承为 <strong>public、protected</strong> 或 <strong>private</strong> 几种类型。继承类型是通过上面讲解的访问修饰符 access-specifier 来指定的。</p><p>我们几乎不使用 <strong>protected</strong> 或 <strong>private</strong> 继承，通常使用 <strong>public</strong> 继承。当使用不同类型的继承时，遵循以下几个规则：</p><ul><li><strong>公有继承（public）：<strong>当一个类派生自</strong>公有</strong>基类时，基类的<strong>公有</strong>成员也是派生类的<strong>公有</strong>成员，基类的<strong>保护</strong>成员也是派生类的<strong>保护</strong>成员，基类的<strong>私有</strong>成员不能直接被派生类访问，但是可以通过调用基类的<strong>公有</strong>和<strong>保护</strong>成员来访问。</li><li><strong>保护继承（protected）：</strong> 当一个类派生自<strong>保护</strong>基类时，基类的<strong>公有</strong>和<strong>保护</strong>成员将成为派生类的<strong>保护</strong>成员。</li><li><strong>私有继承（private）：<strong>当一个类派生自</strong>私有</strong>基类时，基类的<strong>公有</strong>和<strong>保护</strong>成员将成为派生类的<strong>私有</strong>成员。</li></ul></blockquote><p>现在，我希望所有书都是被分了类的（如果不知道怎么分，就分到“未知分类”里面去），我们现在不允许直接创建一个Book对象，必须要先从Book继承一个专门的分类，再创建该分类的对象。</p><pre><code class="highlight cpp"><span class="keyword">class</span> <span class="title class_">Book</span>&#123;<span class="keyword">public</span>:    <span class="function"><span class="keyword">virtual</span> <span class="title">Book</span><span class="params">()</span></span>;    <span class="function"><span class="keyword">virtual</span> <span class="title">Book</span><span class="params">(<span class="type">double</span> the_price)</span></span>;    <span class="function"><span class="keyword">virtual</span> <span class="title">Book</span><span class="params">(<span class="type">double</span> the_price)</span></span>;        <span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">setPrice</span><span class="params">(<span class="type">double</span> value)</span></span>;    <span class="keyword">private</span>:    <span class="type">char</span> name[<span class="number">10</span>];    <span class="type">char</span> ISBN[<span class="number">20</span>];    <span class="type">double</span> price;    <span class="comment">//...</span>&#125;;</code></pre><p><code>virtual</code>意味着必须由子类来实现这些函数。这叫纯虚函数，关于virtual，还有更多用法。</p><h2 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h2><p><code>virtual</code>要求必须由子类来实现，这就是重载。重载允许同名，但必须接受不同参数。</p><pre><code class="highlight cpp"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span><span class="keyword">using</span> <span class="keyword">namespace</span> std;<span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a)</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;1&quot;</span> &lt;&lt; endl; &#125;<span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">char</span> b)</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;2&quot;</span> &lt;&lt; endl; &#125;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  <span class="built_in">func</span>(<span class="number">1</span>);  <span class="built_in">func</span>(<span class="string">&#x27;a&#x27;</span>);&#125;</code></pre><p><strong>提问</strong>：</p><pre><code class="highlight cpp"><span class="comment">//已经有了这个函数</span><span class="built_in">Book</span>(<span class="type">double</span> the_price,<span class="type">char</span>* the_name)&#123;   <span class="built_in">setPrice</span>(the_price);   <span class="built_in">memcpy</span>(name,the_name,<span class="number">10</span>);&#125;<span class="comment">//又有了这个</span><span class="built_in">Book</span>(<span class="type">double</span> the_price,<span class="type">char</span>* the_ISBN)&#123;   <span class="built_in">setPrice</span>(the_price);   <span class="built_in">memcpy</span>(name,the_ISBN,<span class="number">10</span>);&#125;<span class="function">Book <span class="title">b3</span><span class="params">(<span class="number">10</span>,<span class="string">&quot;Apollo&quot;</span>)</span></span>;<span class="comment">//Apollo 会变成name还是ISBN？</span></code></pre><p>C++编译器不允许这样的事情发生，会出现redefinition报错，编译器认为这两个是同一函数。因此，参数的类型应该有所区别。</p><p>更进一步，考虑Book&#x3D;&#x3D;Book</p><pre><code class="highlight cpp"><span class="function">Book <span class="title">a</span><span class="params">(<span class="number">1</span>,<span class="string">&quot;apollo&quot;</span>)</span></span>;<span class="function">Book <span class="title">b</span><span class="params">(<span class="number">10</span>,<span class="string">&quot;apollo&quot;</span>)</span></span>;<span class="comment">//a.equal(b);</span><span class="keyword">if</span>(a==b)&#123;&#125;<span class="keyword">class</span> <span class="title class_">Book</span>&#123;<span class="keyword">public</span>:    <span class="comment">//...</span>    <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> Book) &#123;      <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;name == Book::name)        <span class="keyword">return</span> <span class="literal">true</span>;      <span class="keyword">else</span>        <span class="keyword">return</span> <span class="literal">false</span>;    &#125;    <span class="keyword">private</span>:    <span class="type">char</span> name[<span class="number">10</span>];    <span class="type">char</span> ISBN[<span class="number">20</span>];    <span class="type">double</span> price;    <span class="comment">//...</span>&#125;;<span class="comment">//写一个重载+，当两本书相同时，价格相加</span></code></pre><h2 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h2><p>一个对象创建完成后，也要销毁，我们应当定义它如何被销毁。</p><h2 id="两种风格的对象"><a href="#两种风格的对象" class="headerlink" title="两种风格的对象"></a>两种风格的对象</h2><ul><li>使这个对象像个“东西”，示例如上</li><li>使这个对象像个“指针”，先看看内存管理</li></ul><h1 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h1><p><strong>提问</strong>：a+b中的内存是如何分配的？</p><blockquote><p>**栈区（stack）：**指那些由编译器在需要的时候分配，不需要时自动清除的变量所在的储存区，如函数执行时，函数的形参以及函数内的局部变量分配在栈区，函数运行结束后，形参和局部变量去栈（自动释放）。栈内存分配运算内置与处理器的指令集中，效率高但是分配的内存空间有限。</p><p>**堆区（heap）：**指哪些由程序员手动分配释放的储存区，如果程序员不释放这块内存，内存将一直被占用，直到程序运行结束由系统自动收回，c语言中使用malloc，free申请和释放空间。</p><p>**静态储存区（static）：**全局变量和静态变量的储存是放在一块的，其中初始化的全局变量和静态变量在一个区域，这块空间当程序运行结束后由系统释放。</p><p>**常量储存区（const）：**常量字符串就是储存在这里的，如“ABC”字符串就储存在常量区，储存在常量区的只读不可写。const修饰的全局变量也储存在常量区，const修饰的局部变量依然在栈上。</p><p>**程序代码区：**存放源程序的二进制代码。</p></blockquote><p><strong>提问</strong>：如何创建一个长度不定的数组</p><p>错误示范：</p><pre><code class="highlight c"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;    <span class="type">int</span> N = <span class="number">0</span>;    <span class="built_in">printf</span>(<span class="string">&quot;请输入数组的大小\n&quot;</span>);    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);    <span class="type">int</span> arr[N] = &#123; <span class="number">0</span> &#125;;&#125;</code></pre><p>正确示范：</p><pre><code class="highlight c"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;    <span class="type">int</span> arr[<span class="number">1000</span>] = &#123; <span class="number">0</span> &#125;;    <span class="type">int</span> N = <span class="number">0</span>;    <span class="type">int</span> i = <span class="number">0</span>;    <span class="built_in">printf</span>(<span class="string">&quot;请输入数组的大小\n&quot;</span>);    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);    <span class="built_in">printf</span>(<span class="string">&quot;请输入%d个数\n&quot;</span>, N);    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++)        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;arr[i]);    <span class="keyword">return</span> <span class="number">0</span>;&#125;</code></pre><h2 id="手动内存管理"><a href="#手动内存管理" class="headerlink" title="手动内存管理"></a>手动内存管理</h2><p>C 使用malloc 分配内存和 free释放内存。</p><pre><code class="highlight c"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;    <span class="type">int</span> i = <span class="number">0</span>;    <span class="type">int</span> N = <span class="number">0</span>;    <span class="type">int</span>* arr;    <span class="built_in">printf</span>(<span class="string">&quot;请输入数组的大小\n&quot;</span>);    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);    arr = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * N);    <span class="built_in">printf</span>(<span class="string">&quot;请输入%d个数\n&quot;</span>, N);    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++)        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;arr[i]);    <span class="built_in">free</span>(arr);    <span class="keyword">return</span> <span class="number">0</span>;&#125;</code></pre><p>C++ 使用封装好的new 和delete</p><pre><code class="highlight cpp"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;    <span class="type">int</span> i = <span class="number">0</span>;    <span class="type">int</span> N = <span class="number">0</span>;    <span class="built_in">printf</span>(<span class="string">&quot;请输入数组的大小\n&quot;</span>);    cin&lt;&lt;N;    <span class="type">int</span> *arr = <span class="keyword">new</span> <span class="type">int</span>[N];    cin&lt;&lt;<span class="string">&quot;请输入%d个数\n&quot;</span>&lt;&lt;endl;    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++)        cin&lt;&lt; arr[i]);    <span class="keyword">delete</span>[] p;    <span class="keyword">return</span> <span class="number">0</span>;&#125;</code></pre><p> <strong>提问</strong>：为什么不是delete p?</p><h2 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h2><p>画图</p><p><em>share_ptr</em> 的原理：对指针进行计数</p><h1 id="使用STL库"><a href="#使用STL库" class="headerlink" title="使用STL库"></a>使用STL库</h1><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><ul><li>创建string</li><li>string+</li><li>insert</li><li>substr</li></ul><h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><ul><li>创建vector</li><li>size</li><li>begin</li><li>end</li><li>resize</li></ul><h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><ul><li>find</li><li>rotate</li><li>sort</li><li>min</li><li>max</li></ul><h2 id="Utility"><a href="#Utility" class="headerlink" title="Utility"></a>Utility</h2><ul><li>swap</li><li>pari</li><li>tuple</li></ul><h1 id="完整示例"><a href="#完整示例" class="headerlink" title="完整示例"></a>完整示例</h1><pre><code class="highlight cpp"><span class="comment">//book.h</span><span class="meta">#<span class="keyword">ifndef</span> _book</span><span class="meta">#<span class="keyword">define</span> _book</span><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;show.hpp&quot;</span></span><span class="keyword">class</span> <span class="title class_">Book</span>&#123;<span class="keyword">public</span>:    <span class="built_in">Book</span>()&#123;<span class="built_in">init</span>();&#125;;    <span class="comment">//Book(double the_price):price(the_price)&#123;&#125;</span>    <span class="built_in">Book</span>(<span class="type">double</span> the_price);    <span class="built_in">Book</span>(std::string the_name)=<span class="keyword">delete</span>;    <span class="comment">//Book(double the_price,std::string the_name);</span>    <span class="built_in">Book</span>(<span class="type">double</span> the_price,std::string the_name,std::string ISBN);        <span class="built_in">Book</span>(Book);        <span class="built_in">Book</span>(Book b);        <span class="function"><span class="type">int</span> <span class="title">set_price</span><span class="params">()</span></span>;    <span class="function"><span class="type">int</span> <span class="title">set_name</span><span class="params">()</span></span>;    <span class="function"><span class="type">int</span> <span class="title">set_ISBN</span><span class="params">()</span></span>;        <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">show_price</span><span class="params">(Book)</span></span>;    <span class="keyword">private</span>:    <span class="type">double</span> price;    std::string name;    std::string ISBN;        <span class="function"><span class="type">int</span> <span class="title">init</span><span class="params">(<span class="type">double</span> the_price=<span class="number">0</span>,std::string the_name=<span class="string">&quot;&quot;</span>,std::string ISBN=<span class="string">&quot;&quot;</span>)</span></span>;&#125;;<span class="meta">#<span class="keyword">endif</span></span></code></pre><pre><code class="highlight cpp"><span class="comment">//book.cpp</span><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;book.h&quot;</span></span>Book::<span class="built_in">Book</span>(<span class="type">double</span> the_price)&#123;<span class="built_in">Book</span>()&#125;<span class="comment">//Book::Book(double the_price=0,std::string the_name):Book(the_price,the_name,&quot;&quot;)&#123;&#125;</span>Book::<span class="built_in">Book</span>(<span class="type">double</span> the_price=<span class="number">0</span>,std::string the_name=<span class="string">&quot;&quot;</span>,std::string the_ISBN=<span class="string">&quot;&quot;</span>)&#123;    Book::<span class="built_in">init</span>(the_price,the_name,the_ISBN);&#125;Book::<span class="built_in">Book</span>(Book the_book)&#123;&#125;<span class="function"><span class="type">int</span> <span class="title">Book::init</span><span class="params">(<span class="type">double</span> the_price,std::string the_name,std::string the_ISBN)</span></span>&#123;    <span class="keyword">return</span> <span class="built_in">set_price</span>(the_price) &amp;&amp; <span class="built_in">set_name</span>(the_name) &amp;&amp; <span class="built_in">set_ISBN</span>(the_ISBN);&#125;<span class="function"><span class="type">int</span> <span class="title">Book::set_price</span><span class="params">(<span class="type">double</span> the_price)</span></span>&#123;    <span class="keyword">if</span>(the_price&gt;=<span class="number">0</span>)&#123;        <span class="keyword">this</span>-&gt;price=the_price;        <span class="keyword">return</span> <span class="number">1</span>;    &#125;<span class="keyword">else</span>&#123;        <span class="keyword">return</span> <span class="number">0</span>;    &#125;&#125;<span class="comment">//set_name 和 set_ISBN 略</span></code></pre><pre><code class="highlight cpp"><span class="comment">//show.hpp</span><span class="function"><span class="type">void</span> <span class="title">show_price</span><span class="params">(Book the_book)</span></span>&#123;    std::cout&lt;&lt;the_book.price&lt;&lt;std::endl;&#125;</code></pre><pre><code class="highlight cpp"><span class="comment">//main.cpp</span><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;book.hpp&quot;</span></span><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;    Book b;    b.<span class="built_in">set_price</span>(<span class="number">10</span>);    <span class="built_in">show_price</span>(b);    <span class="function">Book <span class="title">bb</span><span class="params">(b)</span></span>;    <span class="comment">//Book bb=b;</span>    <span class="comment">//Book bb&#123;b&#125;;</span>&#125;</code></pre><h1 id="Apollo2D"><a href="#Apollo2D" class="headerlink" title="Apollo2D"></a>Apollo2D</h1><p>&#x2F;&#x2F;这里是Agent2d中的WorldModel</p>]]></content>
      
      
      <categories>
          
          <category> Auto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录从无人机上学到的东西</title>
      <link href="/Auto/12263b9c/"/>
      <url>/Auto/12263b9c/</url>
      
        <content type="html"><![CDATA[<h1 id="记录从无人机上学到的东西"><a href="#记录从无人机上学到的东西" class="headerlink" title="记录从无人机上学到的东西"></a>记录从无人机上学到的东西</h1><p><em>UAV</em>: Unmanned Aerial Vehicle</p><h2 id="项目的目的"><a href="#项目的目的" class="headerlink" title="项目的目的"></a>项目的目的</h2><p>分为森林救火和森林巡逻，我被分在森林巡逻部分。主要是让飞机按一定轨迹在操场上飞行，以z形路线飞过一个操场。森姐救火则是在上述基础上加上使用视觉识别找到一个红色的正方形。我在该小组中负责通信部分。</p><h2 id="数传通信"><a href="#数传通信" class="headerlink" title="数传通信"></a>数传通信</h2><p>主要的任务是将无人机的xyz及三个偏转角通过数传发到地面站，地面站方面会有同学根据数据进行3d绘图。</p><p>一开始读代码思路不对，一心想着找gps的数据，于是找到了Sensor，通过将整个sensor的数据取出来，然后获取其中的数据。后来发现库里有个MeasureSystem，可以直接获取xyz及偏转角。于是改写为直接调取。</p><p>获取数据后就是发送，发送是利用飞控的Uart与数传进行连接。库中提供了Uart_Send函数，接受一个数组和一个长度作为参数，但是该数组只接受字符，因此要将实际数据转为字符后再发送，思路是将 原始数据%10+‘0’ 从而得到其ascii码值，同时用switch来遍历xyz和三个偏转角。每6个数据作为一组，一组中的数据之间使用‘，’分割，不同组之间使用‘@’分割。期间对原数据进行处理时要记得将得到的某个数据进行数组反转（再看一眼上面对原始数据处理的思路），因为这个问题还出过bug……。</p><p>再具体一点，原始数据都是double 或者 float类型，单位都为厘米。一开始我在将获取的数据传到中间的handler时，将其转为（int），然后再直接处理，后面我在转为（int）前，让原始数据的右值*PRESION，设定一个精度，精度取100，从而获得了0.1mm级别的精度。但后面发现这个精度的意义不大了，于是又改回了1。</p><p>再记录一下硬件的问题：</p><ol><li>电调插反了，折磨了搞硬件的兄弟一下午</li><li>图传始终没有图像，一直以为是电源线的问题，后面发现是插在电脑上的输入线没有插稳</li><li>飞到一半炸机了，排查半天发现是当时调试的太久，没有注意到电量。</li><li>几乎相同的坐标发送代码（除了版本问题外，对数据处理的方式相同）在A9上正常运行，在TI上发出的数据是乱码，改用发送固定值之后，电脑端收到了稳定的乱码。更换数传和数传连接线之后问题仍然存在。直到写下此文时依然未解决。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Auto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> auto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Situation of operation technology</title>
      <link href="/Operation/Reliable/a09255e2/"/>
      <url>/Operation/Reliable/a09255e2/</url>
      
        <content type="html"><![CDATA[<h1 id="一个软件的诞生"><a href="#一个软件的诞生" class="headerlink" title="一个软件的诞生"></a>一个软件的诞生</h1><h2 id="开发过程"><a href="#开发过程" class="headerlink" title="开发过程"></a>开发过程</h2><p>准备：市场调查、需求分析……</p><p>确定方案：技术，平台</p><p>开发：</p><ul><li>设计&amp;前端：界面</li><li>后端：业务逻辑</li></ul><p>上线：</p><ul><li>运营：宣传</li><li>运维：服务器维护</li></ul><h1 id="传统的运维方式"><a href="#传统的运维方式" class="headerlink" title="传统的运维方式"></a>传统的运维方式</h1><p>把写好的软件部署到服务器上，跑就完事了。</p><h2 id="如果业务量大了呢？"><a href="#如果业务量大了呢？" class="headerlink" title="如果业务量大了呢？"></a>如果业务量大了呢？</h2><p>用一样的方式部署到很多服务器上，跑就完事了。</p><h2 id="有什么问题？"><a href="#有什么问题？" class="headerlink" title="有什么问题？"></a>有什么问题？</h2><ul><li><strong>必须时刻以最大业务量安排服务器数量</strong>，成本高。</li><li>每个公司都要有专职运维人员，招人难</li><li>运维人员无论水平高低，所能管理的服务器数量有上限</li><li>遇到突发状况，所需运维人员数量陡增，而保持一个大量运维团队需要高成本</li></ul><h1 id="一种趋势"><a href="#一种趋势" class="headerlink" title="一种趋势"></a>一种趋势</h1><p>所需管理的服务器数量庞大，但大部分工作都是重复的。所以……</p><h2 id="CI-CD"><a href="#CI-CD" class="headerlink" title="CI&#x2F;CD"></a>CI&#x2F;CD</h2><p>持续集成，持续交付，持续部署。让后端开发人员（数量庞大，不乏牛人）来完成运维工作</p><h2 id="Devops"><a href="#Devops" class="headerlink" title="Devops"></a>Devops</h2><p>运维开发，专门开发运维工具的人。试图将运维工作尽可能的自动化。</p><h1 id="另一种趋势"><a href="#另一种趋势" class="headerlink" title="另一种趋势"></a>另一种趋势</h1><h2 id="虚拟化技术的进步"><a href="#虚拟化技术的进步" class="headerlink" title="虚拟化技术的进步"></a>虚拟化技术的进步</h2><p>最初的虚拟化：让windows的应用在mac上跑起来（纯举例），虚拟化的环境具有完整的系统，可以在另一个操作系统上跑起来。在性能上具有极大的开销（就是会很慢）</p><p>容器化：让一个应用在一个容器中运行，该容器具有该应用所需的全部环境。一个容器就是一个进程，开销较小，与操作系统兼容良好（主要指linux）</p><h2 id="容器时代"><a href="#容器时代" class="headerlink" title="容器时代"></a>容器时代</h2><p>不再关注各式各样的环境问题，所需要的环境都可以打包成容器，并且可以使用别人打包好的容器。</p><p><strong>docker</strong>:第一个开源容器技术的公司，现在仍然是王者。</p><p>docker的开源使得任何人都可以轻松部署各式各样的服务，因为环境的配置已经不是难题。但是对于企业来说，问题仍然存在：每个服务器上都可以跑好几个容器，就像以前一个服务器上可以跑好几个应用一样。如果有几千台呢？几万台呢？</p><h2 id="容器编排"><a href="#容器编排" class="headerlink" title="容器编排"></a>容器编排</h2><p>能不能让不同的服务器上的容器连成一个整体？或者自动编排容器，让它们在合适的时间或者位置提供服务？</p><p><strong>kubernetes</strong>:来自google，简称k8s，容器编排唯一的标准，生态的中心。</p><p>允许将多个提供同一服务的容器打包成一个pod（豆荚），将多个服务器设置为一个cluster（集群），由k8s来决定pod在哪台服务器上运行。并且k8s可以在不同服务器上启动相同的pod，当一台服务器出现故障时，k8s迅速在其他服务器上添加故障服务器上运行的pod，从而保证了服务的稳定性。</p><p>即成事实：<strong>k8s是生态的中心</strong></p><p>围绕k8s的生态：监控，流水线部署，自动预警，网格化网关，容器化数据库以及<strong>serverless</strong></p><p><em>k8s标志着云时代的正式开始</em></p><h2 id="再进一步"><a href="#再进一步" class="headerlink" title="再进一步"></a>再进一步</h2><p>如果容器可以方便的创建和销毁，能不能更进一步？</p><p>当有请求时才创建容器进行服务（而不是一直等着），请求结束就销毁容器，这便是<strong>Serverless</strong>，来自Amazon（亚马逊）</p><p><strong>Serverless</strong>，无服务器技术，只有有需求的时候才服务。</p><p>试想一个秒杀系统，在短暂的几秒内，服务器收到了数以亿记的请求，服务器立刻反应，创建大量容器进行服务，每服务完就立即销毁，把资源留给下一个创建的容器。而在几秒前或几秒后，服务器也许还处于一个“清闲”的状态。当前的serverless按照请求数计费，小公司无需按最大并发量购置服务器，只需直接购买serverless服务。</p><h1 id="云服务现状"><a href="#云服务现状" class="headerlink" title="云服务现状"></a>云服务现状</h1><p>自k8s被推出以后，大公司们成立了CNCF（云原生计算基金会）。示例成员：google、AWS（亚马逊，世界最大的云服务供应商，serverless的领头羊）、RedHat（红帽，世界上最大的服务器软件公司，负责的centos操作系统跑在世界上百分之五十以上，中国百分之八十以上的服务器上）、docker、apache基金会（最成熟的服务器软件apache拥有者）、github、gitlab（二者分别为最大的代码托管网站和最大的开源私有git服务提供商）、华为（独立的鲲鹏架构）。</p><h2 id="国内环境"><a href="#国内环境" class="headerlink" title="国内环境"></a>国内环境</h2><ul><li>阿里云：全国最大的云服务供应商，对内为淘宝等提供服务，对外为各类企业提供云服务。</li><li>腾讯云：对内有qq、微信、微信小程序等业务。拥有独立的小程序平台。</li><li>华为云：有自产鲲鹏服务器，使用与绝大多数服务器不一样的arm架构（大部分服务器包括个人电脑都是amd64，也叫x86-64，但苹果的自研芯片M1是arm）。</li><li>七牛云：阿里云出走大佬创办，有一定实力。</li><li>青云：一个k8s开源集群管理系统的国内主导者。</li></ul><p>现状分析：</p><blockquote><p>一方面，围绕容器和容器编排的标准已经制定完成，但基于标准的各项指标仍有提升空间，各大公司仍然在试图在这些标准下做出更好的工具，比如容器和容器的构建工具。另一方面，围绕生态的工具也有许多不完善之处，比如一个让不懂运维的人也能轻松部署的自动部署平台，或是一个完善的部署到监控的工具链。这些被统称为“云基础设施”，云基础设施仍然有许多待完善之处。对于互联网行业来说，传统的运维会越来越少（但绝对不会消失），更多企业倾向于请云服务供应商来构建自己的服务，甚至直接将自身服务交给云供应商。反过来，云供应商也要开发更好的云平台给企业使用。</p></blockquote><h1 id="一些其他的机会"><a href="#一些其他的机会" class="headerlink" title="一些其他的机会"></a>一些其他的机会</h1><h2 id="云与AI"><a href="#云与AI" class="headerlink" title="云与AI"></a>云与AI</h2><p>当服务器闲下来可以做什么？挖矿（划掉）。服务器被设计成可以不间断的运行，但很显然它并不会真的时刻运行，当它闲下来时，其算力就有大用途，比如用于机器学习。当然，对于专业的ai公司，他们也有自己的服务器集群，如何利用互联网的云服务来管理自己的集群，也成了一个不错的方向。</p><h2 id="云与物联网"><a href="#云与物联网" class="headerlink" title="云与物联网"></a>云与物联网</h2><p>专业的物联网后端早就有了，尤其是近年来通信行业的进步，更加促进了“计算不一定非要在本地完成”这种概念的推广。对于传统控制行业来说，大多数计算会在嵌入式设备（看作是一个低性能的计算机）上完成，底层工程师们不得不想尽办法优化性能，确保其服务能稳定的运行在嵌入式设备中。而现在，这些计算有望在很远的云服务器上完成。（当然，嵌入式设备工程师并不会消失）</p><p>这就是我对这个行业的一些了解。</p>]]></content>
      
      
      <categories>
          
          <category> Operation </category>
          
          <category> Reliable </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>log-a-git-error</title>
      <link href="/Operation/Tips/1bfaedf6/"/>
      <url>/Operation/Tips/1bfaedf6/</url>
      
        <content type="html"><![CDATA[<p>When I tried to clone a repo from self-built gitlab. I met a error like this：</p><pre><code class="highlight bash">$&gt; git <span class="built_in">clone</span> https://git.qingyou.ren/KawhiCurry/ansible.git  Cloning into <span class="string">&#x27;ansible&#x27;</span>...fatal: unable to access <span class="string">&#x27;https://git.qingyou.ren/KawhiCurry/ansible.git/&#x27;</span>: Failed to connect to 127.0.0.1 port 7890: Connection refused</code></pre><p>Anyway, 7890 refuse me. Finally, I got this: <a href="https://www.cnblogs.com/lfri/p/15377383.html">cnblogs</a></p><p>Seems my proxy(or vpn?)ruin it. It leads my git somewhere strange.</p><p>record the operation here.</p><pre><code class="highlight bash">git config --global -lgit config --global -e//delete or comment on the lines about port</code></pre>]]></content>
      
      
      <categories>
          
          <category> Operation </category>
          
          <category> Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Magic-Macro</title>
      <link href="/Language/Cpp/17d8837d/"/>
      <url>/Language/Cpp/17d8837d/</url>
      
        <content type="html"><![CDATA[<h1 id="The-magic-of-macro"><a href="#The-magic-of-macro" class="headerlink" title="The magic of macro"></a>The magic of macro</h1><p>最近在写c，遇到了这样一段逻辑，要根据接受的字符串</p><pre><code class="highlight plaintext"># The magic of macro最近在写c，遇到了这样一段逻辑，根据要接受的字符串，比如`name=ubuntu`来在结构体mirror中找到对应的mirror.name进行赋值，一开始是这样设计的：```cstatic const char* PARA_LIST[MAX_ARG_NUM] = &#123;&quot;name&quot;, &quot;cmd&quot;, &quot;arg&quot;, &quot;url&quot;, &quot;timeout&quot;&#125;;//然后对&#x27;=&#x27;前的值与上述值匹配，得到一个id，如name的id为0switch(i)&#123;    case 0:      if (para_len &gt; MAX_NAME_LEN) &#123;        printf(&quot;name too long!&quot;);        return;      &#125;      memcpy(mirror-&gt;name, parameter + 1, MAX_NAME_LEN);      break;    case 1:      //...    case 4:      //...  &#125;//然后switch进行匹配，在switch中都需要先做长度判断，再给结构体mirror赋值</code></pre><p>对于每个case来说，这样的事情都要做一遍，而其中除了struct中的元素不同之外，其他基本都完全一致（除了最后一个timeout），于是我就想简化这个过程。一开始，我想到了写n个不同的函数，这样我就可以在每个case中用一个函数替换，但仔细一想，这样还不是要给每个case写一个函数。这时候我想起了宏，上网查找一番后发现的宏的拼接功能。于是我写出了这个：</p><pre><code class="highlight c"><span class="meta">#<span class="keyword">define</span> set_mirror(the_mirror, element, parameter)            \</span><span class="meta">  &#123;                                                           \</span><span class="meta">    <span class="keyword">if</span> (!strcmp(#element, <span class="string">&quot;timeout&quot;</span>)) &#123;                       \</span><span class="meta">      the_mirror.timeout_len = strlen(parameter);             \</span><span class="meta">    &#125;                                                         \</span><span class="meta">    memset(the_mirror.element, 0, strlen(parameter) + 1);     \</span><span class="meta">    memcpy(the_mirror.element, parameter, sizeof(parameter)); \</span><span class="meta">  &#125;</span></code></pre><p>其中的<code>#element</code>,会讲element替换成字符串，而<code>##</code>可以将set_mirror的参数和后面的内容进行拼接（在后面的版本有示范）。上面这个版本已经可以替换赋值的功能了，但还没对长度进行考察。然后我脑子一抽，写了个<code>#define len_set_mirror</code> 其实就是上面<code>set_mirror</code>加一个参数，然后再调用<code>set_mirror</code>的宏。当时是记住了宏的一种“延迟”的机制，可以在有限次数内对宏进行一个嵌套。后面发现length可以直接从parameter获取，于是就将两个宏合并成了一个：</p><pre><code class="highlight c"><span class="meta">#<span class="keyword">define</span> set_mirror(p_mirror, element, parameter, id)               \</span><span class="meta">  do &#123;                                                             \</span><span class="meta">    <span class="keyword">if</span> (length(parameter) &gt; MAX_##element##_LEN) &#123;                 \</span><span class="meta">      printf(<span class="string">&quot;##element too long!&quot;</span>);                               \</span><span class="meta">      return 0;                                                    \</span><span class="meta">    &#125;                                                              \</span><span class="meta">    <span class="keyword">if</span> (!strcmp(#element, <span class="string">&quot;timeout&quot;</span>)) &#123;                            \</span><span class="meta">      (p_mirror)-&gt;timeout_len = length(parameter);                 \</span><span class="meta">    &#125;                                                              \</span><span class="meta">    memset((p_mirror)-&gt;element, <span class="string">&#x27;\0&#x27;</span>, length(parameter) + 1);      \</span><span class="meta">    memcpy((p_mirror)-&gt;element, parameter, length(parameter) - 1); \</span><span class="meta">    ((p_mirror)-&gt;available) &lt;&lt; id;                                 \</span><span class="meta">  &#125; while (0)</span></code></pre><p>这次成功将所有功能合并了，并且学到了用do…while(0)来提高宏的安全性（其实我也想到了用大括号的方法来避免，但确实do…while(0)是一个更好的方案。这种写法之后我只需在case中写两行：</p><pre><code class="highlight c"><span class="keyword">case</span> <span class="number">0</span>:  set_mirror(p_mirror, name, parameter, id);  <span class="keyword">break</span>;<span class="comment">//break还是老老实实写吧，方便set_mirror复用</span></code></pre><p>其实在第一个宏之前，我还写了个在宏中构造变量来接受值的做法，但我发现完全没有必要，毕竟传递进来的值都应该可以被直接操作的（宏展开后直接获得变量）。由此也引出一条经验，大可不必在宏中定义新变量来处理数据。</p><p>我对宏最大的印象就是文本替换，关于上面这段逻辑，switch还可以进一步优化。而对于整个c来说，宏是底层库的基础，我后面试图去实现一个strlen函数时，发现这玩意就是靠宏和汇编来实现的，而像c中的attribute，<strong>VA_ARGS</strong>(可变参数)，更有一片天地。甚至可以做逻辑运算，过于离谱了。</p><p>结论：宏是魔法，这是我第一次真正近距离接触它，它真的是c的魔法。</p>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
          <category> Cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Daily-10-27</title>
      <link href="/Daily/8f47f88e/"/>
      <url>/Daily/8f47f88e/</url>
      
        <content type="html"><![CDATA[<h1 id="Daily-10-27"><a href="#Daily-10-27" class="headerlink" title="Daily-10-27"></a>Daily-10-27</h1><p>谁都想不到第一次挑战会来的这么快，前两天还在悠哉游哉的看镜像站，今天就遇到了空前绝后大危机。学校的服务器似乎遇上了arp广播风暴，信息办和青柚几乎所有的服务都down了。两位后端学长带着我去了信息办，用了一下午来试着恢复所有service，顺便还参观了一下信息办的机房。</p><p>今天早上才写了<a href="/Daily/2bbc7ca0/" title="Qingyou_1">Qingyou_1</a>这篇文章，说到同时加班我摸鱼。这个摸鱼确实没得办法，毕竟是业务处理方面的事情，但今天这个服务器down了，可就是彻彻底底要运维干活了（然后我还是在摸鱼）。早上本来在开开心心的在github上搭自己的blog，本来很开心的发现hexo的源代码和deploy用的现成文件可以直接用<code>git branch</code>分开来。结果到了中午，突然说学校的内部网络出了超级大问题，连食堂都刷不上卡。中午两位后端学长都到了，然后带着我去了信息办，坐在某个开会的桌子边重启服务。主要是两位学长在做，我最多起一个记录的作用。下面是一些印象深刻的记录。</p><ol><li>最主要的两台服务器，理论是完全一样的，但一台可以正常运行，另一台卡死，reboot都卡死。并且tomcat父进程为1，无法kill，同时其log文件夹无法打开，无法ls、du，free显示内存占满，swap分区16g全满。最后只能物理重启，重启后可以正常使用了，从另一台服务器上copy过来了配置。</li><li>搭载某部门服务的服务器，80+443端口都无法使用，但ssh连接正常，redis没有设置登录密码，但是手动登录时要求密码了，reboot之后可以正常使用了，但是证书似乎还有问题，两个学长也没解决。</li><li>搭载另一部门服务的服务器，服务down了，重启服务后可正常使用。</li></ol><p>除此之外还有各种容器需要重启，有的是学长搭建的，如果不及时记录的话，还真不一定记得住他们的作用。</p><p>本来下午约了去飞无人机，果断推到明天了，不过无人机的代码倒是早就写好了。本以为明天没课的，约时间调试无人机的时候才想起来明天还有个实验课。又是不想上课的一天。</p><p>不管怎么说，今天下午还是多多少少学到了点nouns，也深刻意识到一个了解服务的运维的重要性，此前的服务都是后端同学手动搭的，幸好他们还记得相关信息，不然我现在的能力可做不到完美恢复。除此之外，我对网络、数据库的了解还是差的太多。</p><p>对于未来的话，希望能早点上云吧，服务也希望能够系统化一点，文档可以多写一点。</p><p>以上。</p>]]></content>
      
      
      <categories>
          
          <category> Daily </category>
          
      </categories>
      
      
        <tags>
            
            <tag> daily </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qingyou_1</title>
      <link href="/Daily/2bbc7ca0/"/>
      <url>/Daily/2bbc7ca0/</url>
      
        <content type="html"><![CDATA[<h1 id="青柚的这点事（1）"><a href="#青柚的这点事（1）" class="headerlink" title="青柚的这点事（1）"></a>青柚的这点事（1）</h1><p>大一开学的时候被学校拉去听优秀学生讲座。然后青柚的指导老师上去宣传了一波，我就记得两件事：</p><ol><li>学校的小程序是青柚管的</li><li>不招零基础</li></ol><p>说是不招，还是抱着试一试的心态，去投了个ui岗，毕竟当时恰好在学原型。结果石沉大海，冒得回应。</p><p>大一上死命学会c之后，大一下堕落了起来，直到有天看到阿里云服务器打折，心血来潮，和好基友Roc买了一台49一年的小服务器，搭博客玩。</p><p>没服务器的时候就在折腾jekyll和各种pages了，有了服务器之后终于上了心心念的wordpress，然后就是折腾wp各种奇奇怪怪的东西，然后发现有个好东西叫docker，于是又拿docker部署各种各样的服务。我记得最多的时候，部署了博客，gitee，一个ftp服务器，还连了163邮箱发报警。对于一个1核心2m带宽的服务器来说，压力还是很大了哈哈哈。对了，一开始是用宝塔面板，开始还觉得挺方便的，后来lnmp的p就开始出各种各样的问题。这时候就发现了自动部署忽视细节是个多么难搞的问题。从此决定手动搭各种环境。然后又经历了几次服务器重置之后，我和Roc决定还是把网页部署到gitlab page上，毕竟写好md文档然后直接push，确实比wp舒服多了。</p><p>接下来在大一结束的那个暑假，我又一次想起了青柚的招新，这次我决定报个运维岗位试试。本想着会遇到各种可能的高难度问题，还提心吊胆地做了各种准备，结果似乎没有遇到太大困难就进来了。进来之后才发现青柚已经很久没有运维了。上一届的运维是一位后端，再往前是一位运营。也确实，运维这份活在小公司本就是可有可无的，更何况这么个工作室呢？不过我还是很喜欢这份活的，毕竟能看着各种软件稳稳的运行，不用想破脑袋实现各种奇奇怪怪的需求，其实也不错（手动狗头）。</p><p>就在今天，学校的出入校小程序上线了。这个项目一个月前就开始了，当时我也被拉进了这个项目的群里，然后被告知学校找了外面的运维，用了大公司的serverless。这一个月以来都是平稳推进，直到前天，突然改了需求，又要求昨天就要上线，整个工作室的人都被拉了进来，并且核心人员从前天晚上七点一直加班到昨天中午十一二点。当所有人都在加班的时候，一个运维坐在工作室的正中间，写着自己满是bug的minishell（狗头）。</p><p>好吧，其实几天前我几天前刚接到了要管理学校镜像站的任务，一个python+nginx的小组合，拉取镜像用了python写的mirrord工具，好像是北京外国语还是北京交大的（我估计再往上查一下会发现是清华的，此时，清华用的go），然后再在nginx里面配置下转发就行。但是仔细考虑下自己吧，好像python不咋熟练（那必然），go吧肯定不会，最要命的是线程相关的问题，基本是只知道概念（甚至不清楚），略知一二那种。所以想写出点什么，一时半会恐怕没办法，所以现在抓紧学操作系统，把线程方面搞清楚了，再找个趁手的工具，把镜像站的任务系统化一点，争取做成一个平台。</p><p>我又想起前天晚上加班的场景，虽然我啥都没干，但我还是挺喜欢这种氛围的。希望能在这里写点什么，写点什么，最后再写点什么。（老谜语人了）</p>]]></content>
      
      
      <categories>
          
          <category> Daily </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qingyou </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>New-Start</title>
      <link href="/Daily/6235173f/"/>
      <url>/Daily/6235173f/</url>
      
        <content type="html"><![CDATA[<h1 id="New-Start"><a href="#New-Start" class="headerlink" title="New Start"></a>New Start</h1><p>Today I start a new blog with domain: <a href="kawhicurry.shuihua.top">kawhicurry.shuihua.top</a>.</p><p>I hope I can keep the anything I meet after now.</p><p>Record the things that refresh, happy, knowledgeable or miserable, sad, terrible.</p>]]></content>
      
      
      <categories>
          
          <category> Daily </category>
          
      </categories>
      
      
        <tags>
            
            <tag> daily </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/test/4a17b156/"/>
      <url>/test/4a17b156/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="highlight bash">$ hexo new <span class="string">&quot;My New Post&quot;</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="highlight bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="highlight bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="highlight bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
